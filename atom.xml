<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>观奇笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tech.guanqi.xyz/"/>
  <updated>2019-01-30T10:52:08.282Z</updated>
  <id>https://tech.guanqi.xyz/</id>
  
  <author>
    <name>GuanQi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js中Cookie的属性和用法</title>
    <link href="https://tech.guanqi.xyz/2019-01-30/js-cookie/"/>
    <id>https://tech.guanqi.xyz/2019-01-30/js-cookie/</id>
    <published>2019-01-30T09:33:21.000Z</published>
    <updated>2019-01-30T10:52:08.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天，说一下这个cookie的属性和用法，包括设置cookie,获取cookie,删除cookie。cookie是Document对象的一个属性，可以使js方便的把一些数据放在在本地进行存取操作。cookie还用于客户端脚本化，是http协议的一个标准扩展。</p></blockquote><h2 id="cookie的概念"><a href="#cookie的概念" class="headerlink" title="cookie的概念"></a>cookie的概念</h2><p>cookie是Web游览器存储的少量命名数据，它作用于某个特定的网页或者网站。它可以在客户端和服务器之间的传递数据，位于服务器端的脚本可以读取到客户端的cookie。</p><p>常用的使用场景有以下几个：</p><ul><li>用户登录，服务器记录下用户的登录信息，以便验证下次是否重新登录；</li><li>电商网站的购物车，记录下用户的购物车购买东西喜好，以便下次推广相关的产品；</li><li>网络广告主和网络广告服务商的广告推广，对于不同网站进行用户广告的推送。</li></ul><p><em>温馨提示：</em>由于cookie是http协议的标准扩展，所以要在http协议下的网站和页面才可以使用cookie。不要使用在游览器中打开（类似于：<code>file:///D:/test.html</code>），建议开启http服务（<code>http://localhost:2009/test.html</code>）。</p><h2 id="检测是否支持"><a href="#检测是否支持" class="headerlink" title="检测是否支持"></a>检测是否支持</h2><p>由于用户登录或者购物车需要记录cookie的有关信息，所以首先要检测用户的游览器是否开启了cookie，没有开启要提示用户开启cookie后在操作。</p><p>下面是检测游览器的cookie是否开启的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"cookieTips"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//isOpenCookie这个方法需要传一个id用来给用户显示提示语。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOpenCookie</span>(<span class="params">id</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> cookieTips = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">window</span>.navigator.cookieEnabled;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    cookieTips.style.color = <span class="string">'#269d26'</span>;</span><br><span class="line">    cookieTips.style.fontSize = <span class="string">'18px'</span>;</span><br><span class="line">    cookieTips.innerHTML = <span class="string">'您的cookie已激活!'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cookieTips.style.color = <span class="string">'#f00'</span>;</span><br><span class="line">    cookieTips.style.fontSize = <span class="string">'18px'</span>;</span><br><span class="line">    cookieTips.innerHTML = <span class="string">'您的cookie未激活，可能不能享受好的服务!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isOpenCookie(<span class="string">'cookieTips'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="cookie的属性"><a href="#cookie的属性" class="headerlink" title="cookie的属性"></a>cookie的属性</h2><p>cookie的属性有名字和值，最大期限，当前可以访问cookie信息的文件路径，可以访问cookie的网站域名，还有安全性属性，下面一一介绍。</p><h3 id="名字和值"><a href="#名字和值" class="headerlink" title="名字和值"></a>名字和值</h3><p>这个就是name和value属性了，name是你要存的数据的名字，value是你要存的名字对应的值。</p><p>由于这个值是明文可见的，非常的不安全，所以你要进行编码和解码操作，可以使用以下两种方法：</p><ul><li>早期的方法：escape()编码，unescape()解码；（<em>已废弃，但可以用</em>）</li><li>新的方法：encodeURIComponent()编码，decodeURIComponent()解码。</li></ul><p>方法： <code>document.cookie = &quot;&lt;名字&gt;=&lt;值&gt;&quot;</code>。</p><p>例如：<code>document.cookie = &quot;title=&quot; + encodeURIComponent(&#39;世界那么大&#39;)</code>。</p><h3 id="最大期限"><a href="#最大期限" class="headerlink" title="最大期限"></a>最大期限</h3><p>最大期限之前是<code>expires</code>属性（<em>已废弃</em>）；现在是<code>max-age</code>来表示，它接收秒作为单位。</p><p>方法： <code>document.cookie = &quot;max-age=&lt;数字&gt;&quot;</code>。</p><p>例如：<code>document.cookie = &quot;title=&quot; + encodeURIComponent(&#39;你好啊&#39;) + &quot;;max-age=&quot; + 60*60*24*7;</code>。</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>path就是当前文件所在的目录，在这个目录下的所以网页都可以共享这个cookie信息，但是不在这个路径下的网页就享受不到这个cookie信息了。</p><p>比如说：<code>test.html</code>在<code>server</code>这个目录下，test.html的网页设置了cookie，那么这个server下面的其他网页也可以共享这一个cookie信息；但是不在server这个目录下的网页就享受不到这个cookie信息了。</p><p>可以通过设置这个属性来告诉游览器哪些目录下的网页可以获取cookie信息。</p><p>方法： <code>document.cookie = &quot;path=&#39;&lt;文件路径名字&gt;&#39;&quot;</code>。</p><p>例如：<code>document.cookie = &quot;title=&quot; + encodeURIComponent(&#39;你好啊&#39;) + &quot;;max-age=&quot; + 60*60*24*7 + &#39;;path=&#39; + &#39;/&#39;;</code>。</p><h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><p>domain就是当前html文件所在的这个网站（不包括二级域名），在这个网站下的所以网页都可以共享这个cookie信息，但是不在这个网站下的网页就享受不到这个cookie信息了。</p><p>比如说：<code>test.html</code>在<code>http://www.examle.com</code>这个目录下，test.html的网页设置了cookie，那么这个<code>http://www.examle.com</code>网站下面的其他网页也可以共享这一个cookie信息；但是不在<code>http://www.examle.com</code>这个网站下的网站（比如：<code>http://blog.examle.com</code>）网页就享受不到这个cookie信息了。</p><p>可以通过设置这个属性来告诉游览器哪些网站可以获取cookie信息。</p><p>方法： <code>document.cookie = &quot;domain=&#39;&lt;网站域名&gt;&#39;&quot;</code>。</p><p>例如：<code>document.cookie = &quot;title=&quot; + encodeURIComponent(&#39;你好啊&#39;) + &quot;;max-age=&quot; + 60*60*24*7 + &#39;;domain=&#39; + &#39;127.0.0.1&#39;;</code></p><p>那么其他的比如说<code>localhost</code>下面的网页无法获取cookie信息。</p><h3 id="secure"><a href="#secure" class="headerlink" title="secure"></a>secure</h3><p>这个属性是一个布尔值，如果添加到一条cookie记录中，那么这个cookie只能在带有<code>https</code>安全协议或者其他安全协议的网站下面进行存取。</p><p>例如:<code>document.cookie = &quot;title=&quot; + encodeURIComponent(&#39;你好啊&#39;) + &quot;;max-age=&quot; + 60*60*24*7 + &#39;;secure&#39;</code></p><h2 id="cookie的方法"><a href="#cookie的方法" class="headerlink" title="cookie的方法"></a>cookie的方法</h2><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><p>可以通过封装一个方法来方便的设置cookie，下面是我封装的一个设置cookie的方法，里面要传五个参数，分别对于五个属性。</p><p>原理就是对传入的参数进行类型检测，然后遍历对象的属性和值进行存储。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name,value,maxAge,path,domain,secure</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//检测flag</span></span><br><span class="line">  <span class="keyword">var</span> cookieinfo = &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    value: value,</span><br><span class="line">    maxAge: maxAge,</span><br><span class="line">    path: path,</span><br><span class="line">    domain: domain,</span><br><span class="line">    secure: secure</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//验证值</span></span><br><span class="line">  <span class="keyword">for</span>(key <span class="keyword">in</span> cookieinfo) &#123;</span><br><span class="line">    <span class="keyword">var</span> val = cookieinfo[key];</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'path'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val != <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: path must be an string!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">'domain'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val != <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: domain must be an string!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">'secure'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val != <span class="string">'boolean'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: secure must be an boolean!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (val == <span class="string">''</span> || val == <span class="literal">undefined</span> || val == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error:'</span> + key + <span class="string">' not a null value!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//赋值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> cookieinfo) &#123;</span><br><span class="line">    <span class="keyword">var</span> val = cookieinfo[key];</span><br><span class="line">    <span class="keyword">if</span> (val == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'value'</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'name'</span>) &#123;</span><br><span class="line">      res += cookieinfo[<span class="string">'name'</span>] + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(cookieinfo[<span class="string">'value'</span>]) + <span class="string">';'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">'maxAge'</span>) &#123;</span><br><span class="line">      res += <span class="string">'max-age'</span> + <span class="string">'='</span> + cookieinfo[<span class="string">'maxAge'</span>] + <span class="string">';'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">'secure'</span> &amp;&amp; cookieinfo[<span class="string">'secure'</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">      res += <span class="string">'secure;'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += key + <span class="string">'='</span> + val + <span class="string">';'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res) &#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie = res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">setCookie(<span class="string">'title'</span>,<span class="built_in">document</span>.title,<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>,<span class="string">'/'</span>,<span class="string">'127.0.0.1'</span>,secure);</span><br></pre></td></tr></table></figure><h3 id="读取cookie"><a href="#读取cookie" class="headerlink" title="读取cookie"></a>读取cookie</h3><p>可以通过封装一个方法来方便的读取cookie，下面是我封装的一个读取cookie的方法，里面要传两个参数，第一个是布尔值，true表示获取全部cookie,false表示不用；第二个参数是你要获取的cookie名字。</p><p>原理就是对cookie进行分解，然后再进行对比，返回相应的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">isAll,name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tisAll = isAll;</span><br><span class="line">  <span class="keyword">var</span> tname = name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tisAll != <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: tisAll not an boolean!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!tisAll) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tname == <span class="string">'undefined'</span>  || tname == <span class="literal">null</span> || </span><br><span class="line">      tname == <span class="string">''</span> ||  <span class="keyword">typeof</span> tname == <span class="string">'object'</span> || </span><br><span class="line">      <span class="keyword">typeof</span> tname == <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: name not an object or function or undefined!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> cookie = <span class="built_in">document</span>.cookie;</span><br><span class="line">  <span class="keyword">var</span> cookies = cookie.split(<span class="string">';'</span>);</span><br><span class="line">  <span class="keyword">var</span> value = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> allObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cookies.length;i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> vals = cookies[i].split(<span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">var</span> allKey = vals[<span class="number">0</span>].trim();</span><br><span class="line">    <span class="keyword">var</span> allVal = <span class="built_in">decodeURIComponent</span>(vals[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (allKey == <span class="string">''</span> &amp;&amp; allVal == <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (tisAll) &#123;</span><br><span class="line">        allObj[allKey] = allVal;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tname == allKey) &#123;</span><br><span class="line">          value = allVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!tisAll &amp;&amp; value == <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error:'</span> + tname +  <span class="string">' not found!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tisAll) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> allObj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key == <span class="string">''</span> &amp;&amp; allObj[key] == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: all cookie not found!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> res = tisAll ? allObj : value;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如：上面的cookie值</span></span><br><span class="line"><span class="built_in">console</span>.log(getCookie(<span class="literal">false</span>,<span class="string">'title'</span>)); <span class="comment">// 你好啊</span></span><br></pre></td></tr></table></figure><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><p>可以通过封装一个方法来方便的删除cookie，下面是我封装的一个删除cookie的方法，里面要传一个参数，参数是你要删除的cookie名字。</p><p>原理：只要设置这个cookie的期限为0，就可以删除这个cookie了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name == <span class="string">''</span> || name == <span class="literal">undefined</span> || name == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error: name not an null!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> cookie = <span class="built_in">document</span>.cookie;</span><br><span class="line">  <span class="keyword">var</span> cookies = cookie.split(<span class="string">';'</span>);</span><br><span class="line">  <span class="keyword">var</span> res;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cookies.length;i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> vals = cookies[i].split(<span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">var</span> allKey = vals[<span class="number">0</span>].trim();</span><br><span class="line">    <span class="keyword">if</span> (name == allKey) &#123;</span><br><span class="line">      res = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error:'</span> + name +<span class="string">' not found!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">document</span>.cookie = name + <span class="string">'='</span> + <span class="string">''</span> + <span class="string">';max-age=0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如：删除上面的title</span></span><br><span class="line">removeCookie(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>有关cookie的知识点就讲这么多，老铁，赶快用起来吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天，说一下这个cookie的属性和用法，包括设置cookie,获取cookie,删除cookie。cookie是Document对象的一个属性，可以使js方便的把一些数据放在在本地进行存取操作。cookie还用于客户端脚本化，是http协议的一个
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="DOM" scheme="https://tech.guanqi.xyz/tags/DOM/"/>
    
      <category term="cookie" scheme="https://tech.guanqi.xyz/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>js中DOM详解</title>
    <link href="https://tech.guanqi.xyz/2019-01-27/js-dom-use/"/>
    <id>https://tech.guanqi.xyz/2019-01-27/js-dom-use/</id>
    <published>2019-01-27T01:35:21.000Z</published>
    <updated>2019-01-30T09:10:50.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前说过BOM是游览器对象模型，提供了很多操作游览器、操作窗口的属性和方法。那从今天开始讲述有关DOM的知识点。</p></blockquote><h2 id="DOM的概念"><a href="#DOM的概念" class="headerlink" title="DOM的概念"></a>DOM的概念</h2><p><strong>DOM</strong>英文全称是Document Object Model,简称DOM，含义是文档对象模型。这个是核心的js语法所没有的，是对核心js的扩展。</p><p>每个游览器窗口都显示一个HTML文档，那每个窗口就有一个Window对象，而它的属性document就是引用的Document对象。</p><p>DOM的发展也是一步步来的，从最开始的Netscape和ie指定的一些DOM操作属性和方法；到1998年10月，W3C组织制定了1级DOM标准，到2000年发布了2级DOM标准，DOM的功能也在不断的扩展补充，从最开始的静态显示到后面的动态读写，逐步完善起来。</p><p><em>注意：</em>这里指的文档是HTML文档，HTML文档被人们习惯性的叫做网页。</p><h2 id="0级DOM-旧规范"><a href="#0级DOM-旧规范" class="headerlink" title="0级DOM(旧规范)"></a>0级DOM(旧规范)</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>title,文档的标题；位于<code>&lt;title&gt;&lt;/title&gt;</code>之间的文本；</li><li>cookie,一个特殊属性,允许js可以读写HTTP Cookie；</li><li>domain,可以使在同一域中的相互信任的服务器之间进行网页交互避免同源策略安全性的限制；</li><li>lastModified,文档的修改日期；</li><li>referrer,文档的URL，包含游览器带到当前文档的链接；</li><li>URL，等同于Window对象的属性location.href；</li><li>location,等价于属性URL,（<em>现已废弃</em>）；</li><li>bgColor,文档的背景颜色，（<em>现已废弃</em>）；</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的标题：'</span>,<span class="built_in">document</span>.title); <span class="comment">// 文档的标题： Document</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'cookie值：'</span>,<span class="built_in">document</span>.cookie); <span class="comment">// cookie值： </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的域：'</span>,<span class="built_in">document</span>.domain); <span class="comment">// 文档的域： localhost</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的最新修改日期：'</span>,<span class="built_in">document</span>.lastModified); <span class="comment">// 文档的最新修改日期： 01/27/2019 09:02:46</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的链接：'</span>,<span class="built_in">document</span>.referrer); <span class="comment">// 文档的链接： http://localhost:2009/test.html</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的背景颜色：'</span>,<span class="built_in">document</span>.bgColor = <span class="string">'#f808080'</span>); <span class="comment">// 文档的背景颜色： #f00</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的当前链接：'</span>,<span class="built_in">document</span>.location); <span class="comment">// 文档的当前链接： Location &#123;replace: ƒ, assign: ƒ, href: "http://localhost:2009/test.html"…&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文档的链接地址：'</span>,<span class="built_in">document</span>.URL); <span class="comment">// 文档的链接地址： http://localhost:2009/test.html</span></span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>防止外链，当游览者在网站的其他页面，可以跳转到当前主页，再去访问其他页。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测是否本网站域名，跳转到本网站主页</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.referrer == <span class="string">''</span> || <span class="built_in">document</span>.referrer.indexOf(<span class="string">"example.com"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.location = <span class="string">'http://www.example.com'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>这个方法就是向当前文档中插入一个文本，它有时会覆盖到已存在的一些文本，所以最好在文档解析完成后再调用此方法。</p><p>和open()以及close()方法一起组合会更加好。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">window</span>.document;</span><br><span class="line">  d.open();</span><br><span class="line">  d.write(<span class="string">'&lt;h2&gt;Hello,world!&lt;/h2&gt;'</span>);</span><br><span class="line">  d.close();</span><br><span class="line">&#125;</span><br><span class="line">hello();</span><br></pre></td></tr></table></figure><h3 id="文档对象集合"><a href="#文档对象集合" class="headerlink" title="文档对象集合"></a>文档对象集合</h3><p>这个也是0级DOM中遗留下来的一些属性和方法，不过它们的值都是数组，可以访问文档的  某些元素。</p><ul><li>anchors[],</li></ul><p>Anchors对象的一个数组，该对象代表文档中的锚，就是<code>&lt;a&gt;</code>的<code>name</code>属性。</p><ul><li>links[],</li></ul><p>Links对象的一个数组，该对象代表文档中的超文本链接，就是<code>&lt;a&gt;</code>的<code>href</code>属性,也包括通过<code>&lt;area&gt;</code>标记创建的热点链接属性。</p><ul><li>images[],</li></ul><p>Images对象的一个数组，该对象代表文档中的<code>&lt;img&gt;</code>元素，Images对象的src属性是可以赋值的。可以实现图像翻滚和简单动画。</p><ul><li>forms[],</li></ul><p>Forms对象的一个数组，该对象代表文档中的<code>&lt;form&gt;</code>表单元素，每个Forms对象都有自己的一个名为<code>elements[]</code>的集合属性。</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><h4 id="获取表单元素"><a href="#获取表单元素" class="headerlink" title="获取表单元素"></a>获取表单元素</h4><p>文档中有一个表单名称叫login,有一个表单元素叫username，那么就可以使用命名Document对象的方法，直接用元素的<code>name</code>属性来命名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个就是表示这个表单，表单的可以用forms[按照文档的顺序第几个表单索引]，表单的元素用elements[这个表单的按照表单里面的顺序第几个元素]。</span></span><br><span class="line"><span class="keyword">var</span> login = <span class="built_in">document</span>.forms[<span class="number">0</span>] || <span class="built_in">document</span>.login;</span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>] || <span class="built_in">document</span>.login.username;</span><br><span class="line"><span class="built_in">console</span>.log(login,username);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果文档中有两个表单name一样，它会返回一个数组，所以要尽量保持<code>name</code>属性在文档中的唯一性。</p><h4 id="获取文档中所有的链接"><a href="#获取文档中所有的链接" class="headerlink" title="获取文档中所有的链接"></a>获取文档中所有的链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#1"</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#2"</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#3"</span>&gt;</span>链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.links;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'所有的链接：'</span>,links); <span class="comment">// 所有的链接： HTMLCollection(7) [a, a, a, a, a, a, a]</span></span><br></pre></td></tr></table></figure><h2 id="1级DOM-W3C标准"><a href="#1级DOM-W3C标准" class="headerlink" title="1级DOM(W3C标准)"></a>1级DOM(W3C标准)</h2><p>之前的DOM都是被一些公司操作着定义着用法内容，是老早的约定俗成的东西，但是缺乏规范和标准。W3C组织在1998年10月发布了DOM的标准，被后人成为1级DOM标准，它规定了DOM的一些属性和方法，包括DOM树，节点操作，属性操作，以及对html文档元素进行的创建、获取、修改、删除以及添加和插入等操作方法。</p><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p>html是嵌套的有层级关系的一种超文本标记语言，在DOM就表示对象的一棵树。这个树从树根开始，到下面的元素节点，文本节点，组成了一颗树。</p><p>例如：这是最简单的一颗DOM树。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM树<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>DOM树<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，DOM树！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h3><p>每一个元素都是一个节点，有元素节点，文本节点等，每个节点都由<code>Node</code>对象定义类型，用<code>nodeType</code>属性来表示。</p><p><strong>节点列表:</strong></p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">接口</th><th style="text-align:left">nodeType常量</th><th style="text-align:left">nodeType值</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Element</td><td style="text-align:left">Node.ELEMENT_NODE</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Text</td><td style="text-align:left">Node.TEXT_NODE</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Document</td><td style="text-align:left">Node.DOCUMENT_NODE</td><td style="text-align:left">9</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">Comment</td><td style="text-align:left">Node.COMMENT_NODE</td><td style="text-align:left">8</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">DocumentFragment</td><td style="text-align:left">Node.DOCUMENTFRAGMENT_NODE</td><td style="text-align:left">11</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">Attr</td><td style="text-align:left">Node.ATTRIBUTE_NODE</td><td style="text-align:left">2</td></tr></tbody></table><p>DOM树根部的Node是一个Document对象，这个对象的documentElement属性引用了一个Element对象，代表了文档的根元素。那以此类推，代表body这个节点的就是body。</p><p><strong>补充：</strong>DOM的节点总的来说分为四个大的板块。</p><ul><li>第一个是Document代表文档节点，就是<code>HTMLDocument</code>;</li><li>第二个是CharacterData代表就是文本和注释节点，<code>Text</code>和<code>Comment</code>;</li><li>第三个就Element代表着元素节点HTMLElement，比如像<code>head</code>、<code>body</code>、<code>title</code>等。</li><li>第四个是属性节点Attr，包括元素的各个属性。</li></ul><p>节点还有父节点、子节点、兄弟节点等关系的节点，这个关系的节点都有对应的元素。</p><ul><li>父节点和元素，<code>parentNode</code>，<code>parentElement</code>；</li><li>子节点和元素，<code>childNodes</code>,<code>children</code>;</li><li>当前节点的第一个子节点和元素，<code>firstChild</code>,<code>firstElementChild</code>;</li><li>当前节点的最后一个子节点和元素，<code>lastChild</code>,<code>lastElementChild</code>;</li><li>上一个兄弟节点和元素，<code>previousSibling</code>,<code>previousElementSibling</code>;</li><li>下一个兄弟节点和元素，<code>nextSibling</code>,<code>nextElementSibling</code>;</li></ul><h3 id="节点案例"><a href="#节点案例" class="headerlink" title="节点案例"></a>节点案例</h3><h4 id="获取一个元素的各类节点以及元素"><a href="#获取一个元素的各类节点以及元素" class="headerlink" title="获取一个元素的各类节点以及元素"></a>获取一个元素的各类节点以及元素</h4><p>这个案例就是如何表示一个元素的各类节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM树<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>DOM树<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>兄弟<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好，DOM树！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好，DOM节点！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好，DOM节点对应的元素！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> helem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'h3'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> pelem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//1.helem的父节点，爷爷节点以及元素。</span></span><br><span class="line"><span class="keyword">var</span> parent = helem.parentNode;</span><br><span class="line"><span class="keyword">var</span> grandParent = parent.parentNode;</span><br><span class="line"><span class="keyword">var</span> parentElem = helem.parentElement;</span><br><span class="line"><span class="keyword">var</span> grandParentElem = parentElem.parentElement;</span><br><span class="line"><span class="built_in">console</span>.log(parent,grandParent,parentElem,grandParentElem);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.helem的子节点，第一个和最后一个子节点以及元素。</span></span><br><span class="line"><span class="keyword">var</span> childs = pelem.childNodes;</span><br><span class="line"><span class="keyword">var</span> firstChild = pelem.firstChild;</span><br><span class="line"><span class="keyword">var</span> lastChild = pelem.lastChild;</span><br><span class="line"><span class="keyword">var</span> childsElem = pelem.children;</span><br><span class="line"><span class="keyword">var</span> firstChildElem = pelem.firstElementChild;</span><br><span class="line"><span class="keyword">var</span> lastChildElem = pelem.lastElementChild;</span><br><span class="line"><span class="built_in">console</span>.log(childs,firstChild,lastChild,childsElem,firstChildElem,lastChildElem);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//3.helem的兄弟节点,下一个兄弟节点，上一个兄弟节点以及元素。</span></span><br><span class="line"><span class="keyword">var</span> nextSibling = helem.nextSibling;</span><br><span class="line"><span class="keyword">var</span> previousSibling = helem.previousSibling;</span><br><span class="line"><span class="keyword">var</span> nextSiblingElem = helem.nextElementSibling;</span><br><span class="line"><span class="keyword">var</span> previousSiblingElem = helem.previousElementSibling;</span><br><span class="line"><span class="built_in">console</span>.log(nextSibling,previousSibling,nextSiblingElem,previousSiblingElem);</span><br></pre></td></tr></table></figure><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><p>元素的属性操作方法：</p><ul><li>获取属性<code>getAttribute()</code>;</li><li>设置属性<code>setAttribute()</code>;</li><li>移除属性<code>removeAttribute()</code>;</li></ul><p>例如：一个链接元素的属性操作。由于还没有涉及到元素的一些操作，这里还是以0级DOM的方法来做。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>属性操作<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">var</span> linka = <span class="built_in">document</span>.links[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置属性</span></span><br><span class="line">linka.setAttribute(<span class="string">'title'</span>,<span class="string">'属性提示语'</span>);</span><br><span class="line">linka.setAttribute(<span class="string">'class'</span>,<span class="string">'属性类'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linka); <span class="comment">// &lt;a href="" title="属性提示语" class="attr"&gt;属性操作&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">linka.getAttribute(<span class="string">'class'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cls); <span class="comment">// attr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line">linka.removeAttribute(<span class="string">'title'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linka); <span class="comment">// &lt;a href="" class="attr"&gt;属性操作&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素的操作"><a href="#元素的操作" class="headerlink" title="元素的操作"></a>元素的操作</h3><p>下面就是对html文档元素进行的创建、获取、修改、删除以及添加和插入等操作方法。</p><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p>获取元素有以下几种方法，都是<code>Document对象</code>下面的方法。分别从不同的方面进行获取元素，如通过<code>id</code>获取元素；通过标签名称获取元素，这个获取到就是类数组，会返回一个类似于数组的结果。</p><ul><li>通过元素的id名称来获取：<code>document.getElementById(&lt;id名称&gt;)</code>;</li><li>通过元素的标签名称来获取：<code>document.getElementsByTagName(&lt;标签名称&gt;)</code>;</li><li>通过元素的name属性名称来获取：<code>document.getElementsByName(&lt;name属性名称&gt;)</code>;</li><li>通过元素的class名称来获取：<code>document.getElementsByClassName(&lt;class名称&gt;)</code>;</li></ul><p><em>注意:</em>除了id以外，其他的都是类数组，可以用下标来表示某个元素。</p><p>例如：获取链接和输入框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"food"</span> <span class="attr">class</span>=<span class="string">"myfood"</span> <span class="attr">href</span>=<span class="string">"#1"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"myfood"</span> <span class="attr">href</span>=<span class="string">"#2"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"myfood"</span> <span class="attr">href</span>=<span class="string">"#3"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id</span></span><br><span class="line"><span class="keyword">var</span> banana = <span class="built_in">document</span>.getElementById(<span class="string">'food'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(banana); <span class="comment">// &lt;a id="food" class="myfood" href="#1"&gt;香蕉&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过标签名称</span></span><br><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(links); <span class="comment">// HTMLCollection(4) [a.attr, a#food.myfood, a.myfood, a.myfood, food: a#food.myfood]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过name属性名称</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementsByName(<span class="string">'username'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(username); <span class="comment">// NodeList [input]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过class名称</span></span><br><span class="line"><span class="keyword">var</span> myfood = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'myfood'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myfood); <span class="comment">// HTMLCollection(3) [a#food.myfood, a.myfood, a.myfood, food: a#food.myfood]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取类数组的第一个</span></span><br><span class="line"><span class="keyword">var</span> myfoodOne = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'myfood'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myfoodOne); <span class="comment">// &lt;a id="food" class="myfood" href="#1"&gt;香蕉&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h4><p>这个就是用document的方法来创建一个标签元素或者一个文本元素。</p><p>方法就是：</p><ul><li>标签元素：<code>document.createElement(&#39;&lt;元素名称&gt;&#39;)</code>;</li><li>文本元素：<code>document.createTextNode(&#39;&lt;文本内容&gt;&#39;)</code>;</li></ul><p>例如：创建一个a标签，还有一个内容为你好，元素的文本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建链接元素</span></span><br><span class="line"><span class="keyword">var</span> linka = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'linka:'</span>,linka); <span class="comment">// linka: &lt;a&gt;​&lt;/a&gt;​</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建打招呼文本</span></span><br><span class="line"><span class="keyword">var</span> txta = <span class="built_in">document</span>.createTextNode(<span class="string">'你好，元素'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'txta:'</span>,txta); <span class="comment">// txta: "你好，元素"</span></span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>这个就是把一个元素或者文本添加到另一个元素的内容里面去。</p><p>用法：<code>&lt;另一个元素&gt;.appendChild(&lt;要添加的元素&gt;)</code>。</p><p>例如：把一个文本添加到一个链接中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建链接元素</span></span><br><span class="line"><span class="keyword">var</span> linka = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建打招呼文本</span></span><br><span class="line"><span class="keyword">var</span> txta = <span class="built_in">document</span>.createTextNode(<span class="string">'你好，元素'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">linka.appendChild(txta);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'linka:'</span>,linka); <span class="comment">// linka: &lt;a&gt;​你好，元素​&lt;/a&gt;​</span></span><br></pre></td></tr></table></figure><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><p>修改元素的属性可以使用上面讲到的属性操作方法，这里主要讲修改元素的内容。</p><p>修改元素的内容有以下几种方法：</p><ul><li>往元素里面添加新的文本内容：<code>&lt;要修改的元素&gt;.innerText = &#39;&lt;新的内容&gt;&#39;</code>;</li><li>往元素里面添加新的html元素和内容：<code>&lt;要修改的元素&gt;.innerHTML = &#39;&lt;新的内容&gt;&#39;</code></li></ul><p><strong>注意：</strong>它们两个的区别就是<code>innerText</code>只是修改元素的内容文本，相当于创建了一个文本节点，然后添加到这个元素中，改变的只有元素的内容；而<code>innerHTML</code>,不仅修改元素的内容文本，还可以添加嵌套的元素和元素自己的属性和内容，相当于创建了一个元素和文本节点，并且赋予元素属性和属性值，然后添加到这个要修改的元素中。</p><p>例如:修改段落标签的内容，往段落标签里面添加一个链接，链接的class叫linka,href属性值叫#1,内容叫我是新链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"linkb"</span> <span class="attr">href</span>=<span class="string">"#1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只添加文本</span></span><br><span class="line"><span class="keyword">var</span> linkb = <span class="built_in">document</span>.getElementById(<span class="string">'linkb'</span>);</span><br><span class="line">linkb.innerText = <span class="string">'你好，我的朋友！'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(linkb); <span class="comment">// &lt;a id="linkb" href="#1"&gt;你好，我的朋友！&lt;/a&gt;</span></span><br><span class="line"><span class="comment">//添加元素和文本</span></span><br><span class="line"><span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span><br><span class="line">con.innerHTML = <span class="string">'&lt;a class="linka" href="#1"&gt;我是新链接&lt;/a&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(con); <span class="comment">// &lt;p id="con"&gt;&lt;a class="linka" href="#1"&gt;我是新链接&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>其实也可以使用上面的方法来实现，不过比较麻烦一点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span><br><span class="line"><span class="keyword">var</span> linkb = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">linkb.setAttribute(<span class="string">'href'</span>,<span class="string">'#1'</span>);</span><br><span class="line">linkb.setAttribute(<span class="string">'class'</span>,<span class="string">'linka'</span>);</span><br><span class="line"><span class="keyword">var</span> txtb = <span class="built_in">document</span>.createTextNode(<span class="string">'我是新链接'</span>);</span><br><span class="line">linkb.appendChild(txtb);</span><br><span class="line">con.appendChild(linkb);</span><br></pre></td></tr></table></figure><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>插入元素就是把一个子元素插入到父元素中，方法就是<code>&lt;父元素&gt;.insertBefore(&lt;子元素&gt;,&lt;插入子元素的位置&gt;)</code>。</p><p>例如：往一个列表中插入一个子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="keyword">var</span> lia = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> txtc = <span class="built_in">document</span>.createTextNode(<span class="string">'葡萄'</span>);</span><br><span class="line"><span class="keyword">var</span> lastElem = list.lastElementChild;</span><br><span class="line">lia.appendChild(txtc);</span><br><span class="line">list.insertBefore(lia,lastElem);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// &lt;ul id="list"&gt;&lt;li&gt;苹果&lt;/li&gt;&lt;li&gt;香蕉&lt;/li&gt;&lt;li&gt;葡萄&lt;/li&gt;&lt;li&gt;梨子&lt;/li&gt;&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><h4 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h4><p>替换元素就是把当前元素的子元素给替换成另外一个子元素，方法就是<code>&lt;父元素&gt;.removeChild(&lt;要替换的子元素&gt;)</code>。</p><p>例如：从列表中把苹果替换成葡萄。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="keyword">var</span> apple = list.firstElementChild;</span><br><span class="line"><span class="keyword">var</span> putao = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> txta = <span class="built_in">document</span>.createTextNode(<span class="string">'葡萄'</span>);</span><br><span class="line">putao.appendChild(txta);</span><br><span class="line">list.replaceChild(putao,apple);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// &lt;ul id="list"&gt;&lt;li&gt;葡萄&lt;/li&gt;&lt;li&gt;香蕉&lt;/li&gt;&lt;li&gt;梨子&lt;/li&gt;&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><h4 id="克隆元素"><a href="#克隆元素" class="headerlink" title="克隆元素"></a>克隆元素</h4><p>克隆元素其实就是复制一个元素，分为以下两种：</p><ul><li>深克隆，又叫深拷贝。就是既克隆元素本身，又克隆元素的子节点和节点的内容。</li><li>浅克隆，又叫浅拷贝。只是克隆节点本身，不包括节点的内容。</li></ul><p>方法就是：<code>&lt;要克隆的节点&gt;.cloneNode(&lt;deep: boolean&gt;)</code>,这个参数是接收一个布尔值，true就是深拷贝，false就是浅拷贝。</p><p>例如：克隆一个苹果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="keyword">var</span> apple = list.firstElementChild;</span><br><span class="line"><span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> appleOne = apple.cloneNode(<span class="literal">false</span>);</span><br><span class="line">list.appendChild(appleOne);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">//&lt;ul id="list"&gt;&lt;li&gt;苹果&lt;/li&gt;&lt;li&gt;香蕉&lt;/li&gt;&lt;li&gt;梨子&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">var</span> appleOne = apple.cloneNode(<span class="literal">true</span>);</span><br><span class="line">list.appendChild(appleOne);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">//&lt;ul id="list"&gt;&lt;li&gt;苹果&lt;/li&gt;&lt;li&gt;香蕉&lt;/li&gt;&lt;li&gt;梨子&lt;/li&gt;&lt;li&gt;苹果&lt;/li&gt;&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>删除元素就是把一个子元素从到父元素中删去，方法就是<code>&lt;父元素&gt;.removeChild(&lt;要删除的子元素&gt;)</code>。</p><p>例如：从列表中删除最后一个子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="keyword">var</span> lastElem = list.lastElementChild;</span><br><span class="line">list.removeChild(lastElem);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// &lt;ul id="list"&gt;&lt;li&gt;苹果&lt;/li&gt;&lt;li&gt;香蕉&lt;/li&gt;&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><p><em>温馨提示:</em>上面这些操作可以写成函数封装起来，日后使用比较方便了。</p><p>比如说获取元素是经常用到的，就写一个函数就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElem</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">var</span> $d = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">if</span> (name.indexOf(<span class="string">'#'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    name = name.split(<span class="string">'#'</span>)[<span class="number">1</span>];</span><br><span class="line">    result = $d.getElementById(name);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.indexOf(<span class="string">'.'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    name = name.split(<span class="string">'.'</span>)[<span class="number">1</span>];</span><br><span class="line">    result = $d.getElementsByClassName(name);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.indexOf(<span class="string">'%'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    name = name.split(<span class="string">'%'</span>)[<span class="number">1</span>];</span><br><span class="line">    result = $d.getElementsByTagName(name);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.indexOf(<span class="string">'&amp;'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    name = name.split(<span class="string">'&amp;'</span>)[<span class="number">1</span>];</span><br><span class="line">    result = $d.getElementsByName(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：获取p标签</span></span><br><span class="line"><span class="keyword">var</span> w1 = getElem(<span class="string">'#con'</span>);</span><br><span class="line"><span class="keyword">var</span> w2 = getElem(<span class="string">'.cons'</span>);</span><br><span class="line"><span class="keyword">var</span> w3 = getElem(<span class="string">'%p'</span>);</span><br><span class="line"><span class="comment">//获取输入框</span></span><br><span class="line"><span class="keyword">var</span> w4 = getElem(<span class="string">'&amp;user'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span> <span class="attr">class</span>=<span class="string">"cons"</span>&gt;</span>CSS样式脚本化的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSSDOM"><a href="#CSSDOM" class="headerlink" title="CSSDOM"></a>CSSDOM</h3><p>CSSDOM就是DOM对于CSS样式进行脚本化，可以很轻松的创建动态的html文档，之前因为这个原因还出现了DHTML，文档不再是静态的文本和媒体等内容了，而是可以动态的获取和操作。</p><p>CSSDOM的操作有以下几种：</p><ul><li>Document对象的styleSheets来表示；</li><li>通过style这个属性来控制元素的样式变化的，</li><li>通过className可以给元素添加类名。</li></ul><h4 id="styleSheets-数组"><a href="#styleSheets-数组" class="headerlink" title="styleSheets[]数组"></a>styleSheets[]数组</h4><p>通过Document对象引用的CSSStyleSheet对象属性和方法。可以用这个<code>document.styleSheets[]</code>就可以获取到所有的样式。</p><p>如果这个文档中引用了3个样式表，那么就会返回这3个样式表所定义的样式规则内容。</p><p>第一个样式表就可以用这样来表示<code>document.styleSheets[0]</code>。</p><p><strong>属性：</strong>每个样式表都有以下几个属性</p><ul><li>cssRules和rules，这里面记录着每一条规则的内容；</li><li>disabled，这个属性表示这个样式表是否禁用掉，默认是false；</li><li>href，这个属性表示这个样式表的url地址；</li><li>type，这个样式表的类型。</li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS样式脚本化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"jbh.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CSS样式脚本化<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS样式脚本化的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allstyle = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> cssRules = allstyle.cssRules;</span><br><span class="line"><span class="keyword">var</span> disabled = allstyle.disabled;</span><br><span class="line"><span class="keyword">var</span> href = allstyle.href;</span><br><span class="line"><span class="keyword">var</span> type = allstyle.type;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'规则：'</span>,cssRules); <span class="comment">// CSSRuleList &#123;0: CSSStyleRule, 1: CSSStyleRule, 2: CSSStyleRule, length: 3&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'是否禁用：'</span>,disabled); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'url地址：'</span>,href); <span class="comment">// url地址： http://localhost:2009/day/jbh.css</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'类型：'</span>,type); <span class="comment">// 类型： text/css</span></span><br></pre></td></tr></table></figure><h4 id="style属性控制"><a href="#style属性控制" class="headerlink" title="style属性控制"></a>style属性控制</h4><p>这个就是通过html的style标签来控制元素的样式，适用于内联样式和内嵌样式。优先级比外部样式表要大，就是可以把外部样式表的样式给覆盖掉。</p><p><strong>注意：</strong>这个style只是可以获取和改变文档内部的样式规则，对于外链的样式表，无法获取和改变样式的属性。</p><p><em>提示：</em></p><p>例如：给一个链接加上颜色和大小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS样式脚本化的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span><br><span class="line">con.style.color = <span class="string">'#f00'</span>;</span><br><span class="line">con.style.fontSize = <span class="string">'20px'</span>;</span><br></pre></td></tr></table></figure><h4 id="className"><a href="#className" class="headerlink" title="className"></a>className</h4><p>这个className就是给元素直接添加类名。只要文档内部或者外链样式表有这个类名的css规则就可以加上去。</p><p>用法：<code>&lt;要加类名的元素&gt;.className=&quot;&lt;类名&gt;&quot;</code>。</p><p>例如：给一个段落加一个类名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>给我加类名吧！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> con = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line">con.className = <span class="string">'con'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(con); <span class="comment">// &lt;p class="con"&gt;给我加类名吧！&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h4 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h4><p>这个classList就是给元素直接添加多个类名。</p><p>用法：<code>&lt;要加类名的元素&gt;.classList=&quot;&lt;类名1 类名2 类名3 ...&gt;&quot;</code>，类名之间要空格。</p><p>例如：给一个段落加一个类名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>给我加多个类名吧！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.con1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.con2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> con = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line">con.classList = <span class="string">'con con1 con2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(con); <span class="comment">// &lt;p class="con con1 con2"&gt;给我加类名吧！&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM标准支持表"><a href="#DOM标准支持表" class="headerlink" title="DOM标准支持表"></a>DOM标准支持表</h3><p>由于游览器的各处林立，导致制定的标准在每个游览器的支持都不一样，下面这个表是有关如何查询游览器支持哪些DOM标准的。</p><p>Document对象的<code>implementation</code>引用了DOMImplementation对象，定义了一个方法用来查询是否支持。</p><p>方法用法：<code>hasFeature(name,version)</code>;里面包含两个参数，第一个是你要查询的标准名称，你要查询的DOM级别。</p><p>在这里我封装了一个方法，可以用来查询，如果返回true说明支持，反之则不支持。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchDomSupport</span>(<span class="params">name,version</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.implementation &amp;&amp;</span><br><span class="line">    <span class="built_in">document</span>.implementation.hasFeature &amp;&amp;</span><br><span class="line">    <span class="built_in">document</span>.implementation.hasFeature(name,version)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = searchDomSupport(<span class="string">'html'</span>,<span class="string">'1.0'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><p><strong>附表：</strong></p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">特性名称</th><th style="text-align:left">版本</th><th style="text-align:left">说明</th><th style="text-align:left">暗示</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">HTML</td><td style="text-align:left">1.0</td><td style="text-align:left">1级的Core和HTML接口</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">XML</td><td style="text-align:left">1.0</td><td style="text-align:left">1级的Core和XML接口</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Core</td><td style="text-align:left">2.0</td><td style="text-align:left">2级的Core接口</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">HTML</td><td style="text-align:left">2.0</td><td style="text-align:left">2级的HTML接口</td><td style="text-align:left">Core</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">XML</td><td style="text-align:left">2.0</td><td style="text-align:left">2级的XML专有接口</td><td style="text-align:left">Core</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">Views</td><td style="text-align:left">2.0</td><td style="text-align:left">AbstractView接口</td><td style="text-align:left">Core</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">StyleSheets</td><td style="text-align:left">2.0</td><td style="text-align:left">通用样式表遍历</td><td style="text-align:left">Core</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">CSS</td><td style="text-align:left">2.0</td><td style="text-align:left">CSS样式</td><td style="text-align:left">Core,Views</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">CSS2</td><td style="text-align:left">2.0</td><td style="text-align:left">CSS2Properties接口</td><td style="text-align:left">CSS</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">Events</td><td style="text-align:left">2.0</td><td style="text-align:left">事件处理基础结构</td><td style="text-align:left">Core</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">UIEvents</td><td style="text-align:left">2.0</td><td style="text-align:left">用户接口事件(Events+ Views)</td><td style="text-align:left">Events,Views</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">MouseEvents</td><td style="text-align:left">2.0</td><td style="text-align:left">Mouse事件</td><td style="text-align:left">UIEvents</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">HTMLEvents</td><td style="text-align:left">2.0</td><td style="text-align:left">HTML事件</td><td style="text-align:left">Events</td></tr></tbody></table><p><em>提示：</em>有时候这个方法可能不是太准确，兼容性不是很好。</p><p>这里提供两个网站，上面有着各个游览器的的兼容性的处理方法。</p><ul><li>Peter Paul Koch的著名站点： <a href="https://www.quirksmode.org" target="_blank" rel="noopener">quirksmode</a></li></ul><p>这个站点提供了作者DOM和CSS标准对于游览器兼容性的进行广泛研究后的成果。</p><ul><li>David Hammond的：<a href="http://www.webdevout.net" target="_blank" rel="noopener">webdevout</a></li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>一个对象的出现，既有优点，又有缺点，不过缺点大于优点。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>易用性强</li><li>把文档信息都存于内存中，遍历简单方便</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>解析速度慢，占内存过高，非常大的文件就不适合操作；</li><li>在DOM运行的过程中，创建和修改、删除了大量的对象，机制不健全，导致效率低下，消耗了大量的时间</li></ul><p>DOM有风险，使用需谨慎。切记，切记。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>因为DOM在不断的发展，内容规则和标准在不断的扩展。所以今天讲的是0级和1级DOM的有关知识点。因为内容太多，所以有关2级DOM的内容放在以后来说。其实上面的内容已经非常多了，需要慢慢的去使用。实践出真知，理论联系实践，相信你自己一定可以成功的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前说过BOM是游览器对象模型，提供了很多操作游览器、操作窗口的属性和方法。那从今天开始讲述有关DOM的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;DOM的概念&quot;&gt;&lt;a href=&quot;#DOM的概念&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="DOM" scheme="https://tech.guanqi.xyz/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>js中BOM的概念和方法</title>
    <link href="https://tech.guanqi.xyz/2019-01-25/js-bom-use/"/>
    <id>https://tech.guanqi.xyz/2019-01-25/js-bom-use/</id>
    <published>2019-01-25T07:35:21.000Z</published>
    <updated>2019-01-25T11:00:30.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天开始介绍一篇有关BOM知识点的总结文章。</p></blockquote><p>BOM顾名思义，就是游览器对象模型，英文是Browser Object Model的简称。这个套模型定义了JavaScript如何操作游览器窗口以及获取游览器本身的一些信息，包括窗口的各种高度和宽度，滚动高度和宽度，历史纪录，url的相关信息，游览器的相关信息等知识。</p><h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><p>在游览器中，javascript的Window对象就等同于全局对象，并且在该全局对象下定义的属性和方法也就等同于Window对象的属性和方法。</p><p>例如：一个变量和一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.i) <span class="comment">// 10;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'fn'</span>); &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.fn) <span class="comment">// ƒ fn() &#123; console.log('fn'); &#125;</span></span><br></pre></td></tr></table></figure><p>Window对象自身有很多的属性和方法，以下是几种Window对象中常用的属性和方法。这些方法由于是Window对象下面的方法，所以可以省略不写。</p><h2 id="窗口信息"><a href="#窗口信息" class="headerlink" title="窗口信息"></a>窗口信息</h2><p>这个有些方法ie是<code>document.documentElement.方法</code>，谷歌火狐是<code>document.body.方法</code>。</p><h3 id="外边框的宽高"><a href="#外边框的宽高" class="headerlink" title="外边框的宽高"></a>外边框的宽高</h3><p>用法：宽，<code>window.outerWidth</code>；高<code>window.outerHeight</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'外边框的宽高:'</span>+<span class="built_in">window</span>.outerWidth+<span class="string">'*'</span>+<span class="built_in">window</span>.outerHeight); <span class="comment">// 外边框的宽高:1536*824</span></span><br></pre></td></tr></table></figure><h3 id="内边框的宽高"><a href="#内边框的宽高" class="headerlink" title="内边框的宽高"></a>内边框的宽高</h3><p>用法：宽，<code>window.innerWidth</code>；高<code>window.innerHeight</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'内边框的宽高:'</span>+<span class="built_in">window</span>.innerWidth+<span class="string">'*'</span>+<span class="built_in">window</span>.innerHeight); <span class="comment">// 内边框的宽高:1164*723</span></span><br></pre></td></tr></table></figure><h3 id="可视窗口的宽高"><a href="#可视窗口的宽高" class="headerlink" title="可视窗口的宽高"></a>可视窗口的宽高</h3><p>用法：宽，<code>document.documentElement.clientWidth</code>；高<code>document.documentElement.clientHeight</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'可视窗口的宽高:'</span>+<span class="built_in">document</span>.documentElement.clientWidth+<span class="string">'*'</span>+<span class="built_in">document</span>.documentElement.clientHeight); <span class="comment">// 可视窗口的宽高:1164*723</span></span><br></pre></td></tr></table></figure><h3 id="滚动窗口的坐标"><a href="#滚动窗口的坐标" class="headerlink" title="滚动窗口的坐标"></a>滚动窗口的坐标</h3><p>用法：宽，<code>window.scrollX</code>；高<code>window.scrollY</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'滚动窗口的坐标:'</span>+<span class="built_in">window</span>.scrollX+<span class="string">'*'</span>+<span class="built_in">window</span>.scrollY); <span class="comment">// 滚动窗口的坐标:0*0</span></span><br></pre></td></tr></table></figure><h3 id="滚动窗口的左上"><a href="#滚动窗口的左上" class="headerlink" title="滚动窗口的左上"></a>滚动窗口的左上</h3><p>用法：左，<code>document.documentElement.scrollLeft</code>；上<code>document.documentElement.scrollTop</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'滚动窗口的左上:'</span>+<span class="built_in">document</span>.documentElement.scrollLeft+<span class="string">'*'</span>+<span class="built_in">document</span>.documentElement.scrollTop); <span class="comment">// 滚动窗口的左上:0*0</span></span><br></pre></td></tr></table></figure><h3 id="元素的宽高左右"><a href="#元素的宽高左右" class="headerlink" title="元素的宽高左右"></a>元素的宽高左右</h3><p>用法：</p><ul><li>左：<code>document.documentElement.offsetLeft</code>；</li><li>上：<code>document.documentElement.offsetTop</code>，</li><li>宽：<code>document.documentElement.offsetWidth</code>，</li><li>高：<code>document.documentElement.offsetHeight</code>。</li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"margin:10px;width:100px;height:100px;"</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'元素距离距离窗口的宽高:'</span>+box.offsetWidth+<span class="string">'*'</span>+box.offsetHeight); <span class="comment">// 元素距离距离窗口的宽高:100*100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'元素距离距离窗口的左右:'</span>+box.offsetLeft+<span class="string">'*'</span>+box.offsetTop); <span class="comment">// 元素距离距离窗口的左右:18*106</span></span><br></pre></td></tr></table></figure><h2 id="屏幕信息"><a href="#屏幕信息" class="headerlink" title="屏幕信息"></a>屏幕信息</h2><p>这个是Screen对象的有关属性，Window对象的screen属性就是引用的Screen对象。</p><h3 id="显示器的大小"><a href="#显示器的大小" class="headerlink" title="显示器的大小"></a>显示器的大小</h3><p>用法：宽<code>window.screen.width</code>，高<code>window.screen.height</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'显示器的大小:'</span>+<span class="built_in">window</span>.screen.width+<span class="string">'*'</span>+<span class="built_in">window</span>.screen.height); <span class="comment">// 显示器的大小:1536*864</span></span><br></pre></td></tr></table></figure><h3 id="实际可用的显示大小"><a href="#实际可用的显示大小" class="headerlink" title="实际可用的显示大小"></a>实际可用的显示大小</h3><p>用法：宽<code>window.screen.availWidth</code>，高<code>window.screen.availHeight</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'实际可用的显示大小:'</span>+<span class="built_in">window</span>.screen.availWidth+<span class="string">'*'</span>+<span class="built_in">window</span>.screen.availHeight); <span class="comment">// 实际可用的显示大小:1536*824</span></span><br></pre></td></tr></table></figure><h3 id="屏幕第一个可用位置的坐标"><a href="#屏幕第一个可用位置的坐标" class="headerlink" title="屏幕第一个可用位置的坐标"></a>屏幕第一个可用位置的坐标</h3><p>用法：宽<code>window.screen.availLeft</code>，高<code>window.screen.availTop</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'屏幕第一个可用位置的坐标:'</span>+<span class="built_in">window</span>.screen.availLeft+<span class="string">'*'</span>+<span class="built_in">window</span>.screen.availTop); <span class="comment">// 屏幕第一个可用位置的坐标:0*0</span></span><br></pre></td></tr></table></figure><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><p>对话框就是你可以对它进行操作，但是<strong>用户体验稍微差点</strong>，所以后来慢慢的，这个对话框就变成了程序完成后<strong>调试bug</strong>的作用了。</p><p>对话框还有一点就是，它<strong>阻塞</strong>了游览器解析进程，你需要对当前对话框进行操作完成后才能进行下一项渲染，或者是看见了页面内容，或者是开始其他操作。</p><h3 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h3><p>这个方法就是一个简单的对话框，里面接受一个字符作为显示在游览器窗口的内容。向用户显示信息并且需要用户手动关闭。</p><p>用法：<code>window.alert(&lt;内容&gt;);</code>，这个方法是Window对象下面的方法，所以可以省略不写。</p><p>这样也可以执行的<code>alert(&lt;内容&gt;);</code>。</p><p>例如：<code>window.alert(&#39;欢迎光临本网站！&#39;);</code></p><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h3><p>这个方法就是一个简单的对话框，里面需要输入内容，有两个按钮，一个是确定，另一个是取消。它的返回值是布尔值，当你点击确定，会返回true；当你点击取消，会返回false。</p><p>用法：<code>confirm(&lt;内容&gt;);</code></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = confirm(<span class="string">'你过年回家吗？'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res ? <span class="string">'我回家'</span> : <span class="string">'我不回家'</span>); <span class="comment">// 点击确定：我回家；点击取消： 我不回家</span></span><br></pre></td></tr></table></figure><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h3><p>这个方法就是一个简单的对话框，里面需要输入一个字符串，有两个按钮，一个是确定，另一个是取消。它的返回值是你输入框中的内容，当你点击确定，会返回输入框的内容；当你点击取消，会返回null。</p><p>用法：<code>prompt(&lt;字符串&gt;);</code></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = prompt(<span class="string">'你喜欢吃什么小吃？'</span>); <span class="comment">// 你可以输入任何字符串，例如我输入了沙县小吃</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 点击确定：沙县小吃；点击取消： null</span></span><br></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器是web客户端里面定义的一个全局方法，核心的JavaScript并没有定义这个方法。</p><p>定时器的功能就是在未来某个时间进行某段代码的执行，可以有一次的或者多次的执行。</p><p><strong>注意：</strong>setTimeout只执行一次，setInterval可以一直连续的执行。</p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><p>这个方法就是用来使一个函数在指定的时间内（单位是毫秒ms）过去之后执行。这个有时候被拿来模拟ajax异步操作。</p><p>用法：<code>setTimeout(fn,time);</code>,第一个参数就是一个函数或者函数的名称，第二个参数就是时间。</p><p>例如：一秒后打印我爱你</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.函数名称</span></span><br><span class="line">setTimeout(fn,<span class="number">1000</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我爱你'</span>); <span class="comment">// 我爱你</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我爱你'</span>); <span class="comment">// 我爱你</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h3><p>这个方法可以取消setTimeout方法中第一个参数函数的执行。</p><p>用法：<code>clearTimeout(函数名称);</code>，参数是setTimeout方法中第一个参数的函数名称。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我爱你'</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line">clearTimeout(fn);</span><br></pre></td></tr></table></figure><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h3><p>这个方法就是用来使一个函数在指定的时间内（单位是毫秒ms）重复的调用执行。这个有时候被拿来做模拟时钟或者动画。</p><p>用法：<code>setInterval(fn,time);</code>,第一个参数就是一个函数或者函数的名称，第二个参数就是时间。</p><p>例如：把当前时间显示在游览器窗口中，并且时间是动态走动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.函数名称</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">document</span>.querySelector(<span class="string">'#time'</span>);</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(fn,<span class="number">1000</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = now.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = now.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> day = now.getDay();</span><br><span class="line">  <span class="keyword">var</span> hour = now.getHours();</span><br><span class="line">  <span class="keyword">var</span> minute = now.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> second = now.getSeconds();</span><br><span class="line">  month = month &gt;= <span class="number">10</span> ? month : <span class="string">'0'</span> + month;</span><br><span class="line">  day = day &gt;= <span class="number">10</span> ? day : <span class="string">'0'</span> + day;</span><br><span class="line">  hour = hour &gt;= <span class="number">10</span> ? hour : <span class="string">'0'</span> + hour;</span><br><span class="line">  minute = minute &gt;= <span class="number">10</span> ? minute : <span class="string">'0'</span> + minute;</span><br><span class="line">  second = second &gt;= <span class="number">10</span> ? second : <span class="string">'0'</span> + second;</span><br><span class="line">  time.innerHTML = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.函数</span></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = now.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = now.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> day = now.getDay();</span><br><span class="line">  <span class="keyword">var</span> hour = now.getHours();</span><br><span class="line">  <span class="keyword">var</span> minute = now.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> second = now.getSeconds();</span><br><span class="line">  month = month &gt;= <span class="number">10</span> ? month : <span class="string">'0'</span> + month;</span><br><span class="line">  day = day &gt;= <span class="number">10</span> ? day : <span class="string">'0'</span> + day;</span><br><span class="line">  hour = hour &gt;= <span class="number">10</span> ? hour : <span class="string">'0'</span> + hour;</span><br><span class="line">  minute = minute &gt;= <span class="number">10</span> ? minute : <span class="string">'0'</span> + minute;</span><br><span class="line">  second = second &gt;= <span class="number">10</span> ? second : <span class="string">'0'</span> + second;</span><br><span class="line">  time.innerHTML = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h3><p>这个方法可以取消setInterval方法中第一个参数函数的执行，停止重复调用这个函数。</p><p>用法：<code>clearInterval(函数名称);</code>，参数是setInterval方法中第一个参数的函数名称。</p><p>例如：要取消上面那个例子的时钟走动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clearInterval(timer);</span><br></pre></td></tr></table></figure><h2 id="打开和关闭新窗口"><a href="#打开和关闭新窗口" class="headerlink" title="打开和关闭新窗口"></a>打开和关闭新窗口</h2><p>这个可以打开或者关闭一个新窗口，但是随着时代经济的发展，越来越多的网站把它用于投放展示广告，导致很多游览器封杀了这两个方法，除非是用户自己点击新窗口。</p><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>这个方法是可以打开一个新的窗口。</p><p>用法：<code>open(一参,二参,三参,四参);</code>，以下是参数说明：</p><ul><li>第一参数是你要打开新窗口的url；</li><li>第二个参数是你要打开新窗口的名称，可以是a标签的target属性中的值，也可以自定义；</li><li>第三个参数是新窗口的一些属性定义，比如说状态了，宽和高，也没有菜单栏等；</li><li>第四个参数是是否覆盖掉当前的页面历史纪录，如果是true，那就覆盖掉，否则就新增一条历史记录。</li></ul><p>例如：打开一个宽高为300*400的，显示状态栏的，内容为你好，世界，不覆盖当前url的历史纪录的一个新窗口。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存为new.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>新窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好，世界<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'new.html'</span>,<span class="string">'width=200,height=200,status=yes'</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">openNew();</span><br></pre></td></tr></table></figure><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>这个方法是关闭当前的窗口网页。</p><p>用法：<code>close();</code></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeWin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.close();</span><br><span class="line">&#125;</span><br><span class="line">closeWin();</span><br></pre></td></tr></table></figure><h2 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h2><p>这个Location对象提供了当前文档的url的一些信息，包括协议，域名，端口号，url参数等信息。</p><p>窗口的location属性引用的是Location对象。它代表当前文档的url信息。</p><h3 id="location的属性"><a href="#location的属性" class="headerlink" title="location的属性"></a>location的属性</h3><p>用法：<code>window.location</code>，属性包括：</p><ul><li>protocol 网页通信协议；</li><li>host 网页域名（包括域名和端口）；</li><li>hostname 网页域名名字（）；</li><li>port 端口号</li><li>href 网页地址</li><li>hash 哈希值</li><li>search 参数内容（包括?号）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'url信息：'</span>,<span class="built_in">window</span>.location); </span><br><span class="line"><span class="comment">/* url信息：</span></span><br><span class="line"><span class="comment">Location &#123;</span></span><br><span class="line"><span class="comment">  ancestorOrigins: DOMStringList &#123;length: 0&#125;</span></span><br><span class="line"><span class="comment">  assign: ƒ ()</span></span><br><span class="line"><span class="comment">  hash: ""</span></span><br><span class="line"><span class="comment">  host: "localhost:2009"</span></span><br><span class="line"><span class="comment">  hostname: "localhost"</span></span><br><span class="line"><span class="comment">  href: "http://localhost:2009/test.html"</span></span><br><span class="line"><span class="comment">  origin: "http://localhost:2009"</span></span><br><span class="line"><span class="comment">  pathname: "test.html"</span></span><br><span class="line"><span class="comment">  port: "2009"</span></span><br><span class="line"><span class="comment">  protocol: "http:"</span></span><br><span class="line"><span class="comment">  reload: ƒ reload()</span></span><br><span class="line"><span class="comment">  replace: ƒ ()</span></span><br><span class="line"><span class="comment">  search: ""</span></span><br><span class="line"><span class="comment">  toString: ƒ toString()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="location的方法"><a href="#location的方法" class="headerlink" title="location的方法"></a>location的方法</h3><ul><li>reload();重新载入当前网页</li><li>location或者location.href; 载入新的网页url</li><li>replace(); 重新载入当前网页（会覆盖掉当前网页的历史纪录）</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.重新载入当前网页</span></span><br><span class="line"><span class="built_in">window</span>.location.reload();</span><br><span class="line"><span class="comment">//2.载入新的网页url</span></span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">'test.html'</span>;</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'test.html'</span>;</span><br><span class="line"><span class="comment">//3.重新载入当前网页（会覆盖掉当前网页的历史纪录）</span></span><br><span class="line"><span class="built_in">window</span>.location.replace();</span><br></pre></td></tr></table></figure><h3 id="案例：解析url的参数"><a href="#案例：解析url的参数" class="headerlink" title="案例：解析url的参数"></a>案例：解析url的参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.abc.com/index?name=keke&amp;type=1'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlArgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  <span class="keyword">var</span> query = location.search.substring(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> pairs = query.split(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;pairs.length;i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> pos = pairs[i].indexOf(<span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">var</span> argname = pairs[i].substring(<span class="number">0</span>,pos);</span><br><span class="line">    <span class="keyword">var</span> value = pairs[i].substring(pos+<span class="number">1</span>);</span><br><span class="line">    value = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">    args[argname] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getUrlArgs()); <span class="comment">// &#123; name: "keke", type: "1" &#125;</span></span><br></pre></td></tr></table></figure><h2 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h2><p>这个History对象可以允许载入新的文档或者游览器后退或者前进游览过的文档。</p><p>窗口的history属性引用的是History对象。</p><h3 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h3><p>这个方法可以使游览器载入到新文档，和游览器的前进箭头按钮功能一样。</p><p>用法：<code>forward();</code>，不需要传参。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forwardTo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  history.forward();</span><br><span class="line">&#125;</span><br><span class="line">forwardTo();</span><br></pre></td></tr></table></figure><h3 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h3><p>这个方法可以使游览器后退到以前游览过的网页，和游览器的后退箭头按钮功能一样。</p><p>用法：<code>back();</code>，不需要传参。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  history.back();</span><br><span class="line">&#125;</span><br><span class="line">backTo();</span><br></pre></td></tr></table></figure><h3 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h3><p>这个方法可以使游览器前进或者后退到以前游览过的网页。</p><p>用法：<code>go();</code>，需要传参，正参就是前进几个历史纪录，负参就是后退几个历史纪录。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goTo</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  history.go(val);</span><br><span class="line">&#125;</span><br><span class="line">goTo(<span class="number">1</span>);</span><br><span class="line">goTo(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h2 id="Navigation对象"><a href="#Navigation对象" class="headerlink" title="Navigation对象"></a>Navigation对象</h2><p>这个Navigation对象可以储存的当前游览器的信息，包括版本号，app名称，游览器内核名称，系统版本等。</p><p>Window对象的navigator属性引用的是Navigation对象。</p><p>打印查看当前游览器信息直接执行<code>console.log(window.navigator)</code>就可以了。</p><h3 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h3><ul><li>appName，游览器的简称；</li><li>appVersion，游览器的内部版本号；</li><li>appCodeName，游览器的代码名称；</li><li>platform，运行游览器的硬件平台；</li><li>userAgent，用户代理，游览器在它的USER-AGENT HTTP头部发送字符串。</li></ul><p>例如：打印当前游览器的信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getnNavigatorInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  <span class="keyword">var</span> proArr = [<span class="string">'appName'</span>,<span class="string">'appVersion'</span>,<span class="string">'appCodeName'</span>,<span class="string">'platform'</span>,<span class="string">'userAgent'</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;proArr.length;i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key == proArr[i]) &#123;</span><br><span class="line">        obj[key] = navigator[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getnNavigatorInfo());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">appCodeName: "Mozilla"</span></span><br><span class="line"><span class="comment">appName: "Netscape"</span></span><br><span class="line"><span class="comment">appVersion: "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span></span><br><span class="line"><span class="comment">platform: "Win32"</span></span><br><span class="line"><span class="comment">userAgent: "Mozilla/5.0 (Windows NT 10.0; ...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="案例：检测游览器"><a href="#案例：检测游览器" class="headerlink" title="案例：检测游览器"></a>案例：检测游览器</h2><h3 id="检测游览器名称"><a href="#检测游览器名称" class="headerlink" title="检测游览器名称"></a>检测游览器名称</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBrowserName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'Chrome'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是谷歌游览器'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'Trident'</span>) != <span class="number">-1</span> || navigator.appVersion.indexOf(<span class="string">'MSIE'</span>) != <span class="number">-1</span> ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是ie游览器'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'Firefox'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是火狐游览器'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'Opera'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是Opera游览器'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'Safari'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是Safari游览器'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">checkBrowserName();</span><br></pre></td></tr></table></figure><h3 id="检测ie游览器版本"><a href="#检测ie游览器版本" class="headerlink" title="检测ie游览器版本"></a>检测ie游览器版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkIeVersion</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ie = navigator.userAgent.indexOf(<span class="string">'Trident'</span>) == <span class="number">-1</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> version = navigator.appVersion;</span><br><span class="line">  <span class="built_in">console</span>.log(version);</span><br><span class="line">  <span class="keyword">var</span> versionName = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (ie &amp;&amp; version) &#123;</span><br><span class="line">    <span class="keyword">if</span> (version.indexOf(<span class="string">'rv:11.0'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      versionName = <span class="string">'ie11'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version.indexOf(<span class="string">'MSIE 10.0'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      versionName = <span class="string">'ie10'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version.indexOf(<span class="string">'MSIE 9.0'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      versionName = <span class="string">'ie9'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version.indexOf(<span class="string">'MSIE 8.0'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      versionName = <span class="string">'ie8'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version.indexOf(<span class="string">'MSIE 7.0'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      versionName = <span class="string">'ie7'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> versionName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkIeVersion());</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这期的BOM知识分享就结束了，希望可以用起来，细细体会这其中的神奇奥秘。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天开始介绍一篇有关BOM知识点的总结文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BOM顾名思义，就是游览器对象模型，英文是Browser Object Model的简称。这个套模型定义了JavaScript如何操作游览器窗口以及获取游览器本
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="BOM" scheme="https://tech.guanqi.xyz/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>js中的常用方法集合</title>
    <link href="https://tech.guanqi.xyz/2019-01-24/js-array-example/"/>
    <id>https://tech.guanqi.xyz/2019-01-24/js-array-example/</id>
    <published>2019-01-24T10:16:21.000Z</published>
    <updated>2019-01-24T10:21:49.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天来说一下js中经常用到的去重，排序等方法。</p></blockquote><h2 id="求多维数组的和"><a href="#求多维数组的和" class="headerlink" title="求多维数组的和"></a>求多维数组的和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>; <span class="comment">//初始值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArrSum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || (arr &amp;&amp; <span class="keyword">typeof</span> arr == <span class="string">'object'</span> &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> arr)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!arr[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] == <span class="string">'number'</span>) &#123;</span><br><span class="line">                total += arr[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((arr[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)  || (arr[i] &amp;&amp; <span class="keyword">typeof</span> arr[i] == <span class="string">'object'</span> &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> arr[i])) &#123;</span><br><span class="line">                getArrSum(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'getArrSum():arr must be array!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,[<span class="number">123</span>],[<span class="number">45</span>,[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]];</span><br><span class="line">getArrSum(arr);</span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">//result is 190</span></span><br></pre></td></tr></table></figure><h2 id="返回参数中的最大值"><a href="#返回参数中的最大值" class="headerlink" title="返回参数中的最大值"></a>返回参数中的最大值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="built_in">Number</span>.NEGATIVE_INFINITY;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (element &gt; m) &#123;</span><br><span class="line">      m = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> large = max(<span class="number">10</span>,<span class="number">20</span>,<span class="number">1111</span>,<span class="number">1212</span>);</span><br><span class="line"><span class="built_in">console</span>.log(large); <span class="comment">// result is 1212;</span></span><br></pre></td></tr></table></figure><h2 id="检测参数类型求和"><a href="#检测参数类型求和" class="headerlink" title="检测参数类型求和"></a>检测参数类型求和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((a <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || (a &amp;&amp; <span class="keyword">typeof</span> a == <span class="string">'Object'</span> &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> a)) &#123;</span><br><span class="line">        <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> element = a[i];</span><br><span class="line">            <span class="keyword">if</span> (!element) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> element == <span class="string">'number'</span>) &#123;</span><br><span class="line">                total += element;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"sum():all array elements must be an number!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"sum():argument must be an array!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res1 = getSum([<span class="number">123</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">54</span>]);</span><br><span class="line"><span class="keyword">var</span> res2 = getSum(<span class="number">121</span>);</span><br><span class="line"><span class="keyword">var</span> res3 = getSum([<span class="number">12</span>,<span class="number">31</span>,<span class="string">'121'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(res1); <span class="comment">// result is 225;</span></span><br><span class="line"><span class="built_in">console</span>.log(res2); <span class="comment">// result is Uncaught Error: sum():argument must be an array!;</span></span><br><span class="line"><span class="built_in">console</span>.log(res3); <span class="comment">// result is Uncaught Error: sum():all array elements must be an number!</span></span><br></pre></td></tr></table></figure><h2 id="返回阶乘"><a href="#返回阶乘" class="headerlink" title="返回阶乘"></a>返回阶乘</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回阶乘</span></span><br><span class="line"><span class="keyword">var</span> stratum = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(stratum(<span class="number">5</span>)); <span class="comment">// result is 120</span></span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组元素为数字的排序（升序）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArrayUp</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组元素为数字排序（升序）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArrayDown</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组元素为对象排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortObject</span>(<span class="params">protoname,type</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果type是up，是升序，否则为降序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">'up'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> b[protoname] - a[protoname];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[protoname] - b[protoname];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>,<span class="number">13</span>,<span class="number">234</span>,<span class="number">121</span>,<span class="number">1212</span>,<span class="number">334</span>,<span class="number">212</span>,<span class="number">520</span>,<span class="number">125</span>];</span><br><span class="line"><span class="keyword">var</span> resa = arr.sort(sortArrayUp);</span><br><span class="line"><span class="keyword">var</span> resb = arr.sort(sortArrayDown);</span><br><span class="line"><span class="built_in">console</span>.log(resa); <span class="comment">//result is [1212, 520, 334, 234, 212, 125, 121, 13, 12];</span></span><br><span class="line"><span class="built_in">console</span>.log(resb); <span class="comment">//result is [12, 13, 121, 125, 212, 234, 334, 520, 1212];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrb = [</span><br><span class="line">    &#123;<span class="attr">num</span>: <span class="number">12</span>,<span class="attr">name</span>: <span class="string">'orange'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">num</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">'banana'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">num</span>: <span class="number">42</span>,<span class="attr">name</span>: <span class="string">'apple'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">num</span>: <span class="number">31</span>,<span class="attr">name</span>: <span class="string">'orange'</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> resc = arrb.sort(sortObject(<span class="string">'num'</span>,<span class="string">'up'</span>));</span><br><span class="line"><span class="keyword">var</span> resd = arrb.sort(sortObject(<span class="string">'num'</span>,<span class="string">'down'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(resc); </span><br><span class="line"><span class="comment">/* result is</span></span><br><span class="line"><span class="comment">&#123;num: 112,name: 'banana'&#125;,</span></span><br><span class="line"><span class="comment">&#123;num: 42,name: 'apple'&#125;,</span></span><br><span class="line"><span class="comment">&#123;num: 31,name: 'orange'&#125;,</span></span><br><span class="line"><span class="comment">&#123;num: 12,name: 'orange'&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(resd); </span><br><span class="line"><span class="comment">/* result is</span></span><br><span class="line"><span class="comment">&#123;num: 12,name: 'orange'&#125;,</span></span><br><span class="line"><span class="comment">&#123;num: 31,name: 'orange'&#125;,</span></span><br><span class="line"><span class="comment">&#123;num: 42,name: 'apple'&#125;,   </span></span><br><span class="line"><span class="comment">&#123;num: 112,name: 'banana'&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayRemoveRepeat</span>(<span class="params">arr,type,name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = arr; <span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">var</span> type = type; <span class="comment">//类型，数组元素为对象，传'object',否则传'number'</span></span><br><span class="line">    <span class="keyword">var</span> name = name || <span class="string">''</span>; <span class="comment">// 数组元素为对象，是对象的属性判断值；</span></span><br><span class="line">    <span class="keyword">if</span> ((arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || (<span class="keyword">typeof</span> arr == <span class="string">'Object'</span> &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> arr)) &#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">var</span> len = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!arr[i]) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] == <span class="string">'object'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (newArr.indexOf(arr[i][name]) == <span class="number">-1</span>) &#123;</span><br><span class="line">                        newArr.push(arr[i][name]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arrayRemoveRepeat():all element must be an object!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'number'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] == <span class="string">'number'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">                        newArr.push(arr[i]);</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arrayRemoveRepeat():all element must be an number!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arrayRemoveRepeat():argument must be an array!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象情况下:</span></span><br><span class="line"><span class="keyword">var</span> arr31 = [&#123;<span class="attr">num</span>: <span class="number">12</span>&#125;,&#123;<span class="attr">num</span>: <span class="number">12</span>&#125;,&#123;<span class="attr">num</span>: <span class="number">1</span>&#125;,&#123;<span class="attr">num</span>: <span class="number">13</span>&#125;,&#123;<span class="attr">num</span>: <span class="number">13</span>&#125;,&#123;<span class="attr">num</span>: <span class="number">13</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> arr32 = arrayRemoveRepeat(arr31,<span class="string">'object'</span>,<span class="string">'num'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr32); <span class="comment">// result is [12, 1, 13];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字情况下：</span></span><br><span class="line"><span class="keyword">var</span> arr22 = [<span class="number">12</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">212</span>,<span class="number">1243</span>,<span class="number">2321</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">123</span>,<span class="number">261</span>];</span><br><span class="line"><span class="keyword">var</span> arr32 = arrayRemoveRepeat(arr22,<span class="string">'number'</span>,<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr32); <span class="comment">// result is [12, 11, 212, 1243, 2321, 1, 123, 261];</span></span><br></pre></td></tr></table></figure><h2 id="检测函数参数是否为制定个数"><a href="#检测函数参数是否为制定个数" class="headerlink" title="检测函数参数是否为制定个数"></a>检测函数参数是否为制定个数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x,y,z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须是三个参数！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="built_in">arguments</span>[i];</span><br><span class="line">        sum += element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> res1 = sum(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// result is 6;</span></span><br><span class="line"><span class="built_in">console</span>.log(res1); <span class="comment">// result is Uncaught Error: 必须是三个参数！</span></span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>上面就是我在日常使用中总结到的一些常用方法技巧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天来说一下js中经常用到的去重，排序等方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;求多维数组的和&quot;&gt;&lt;a href=&quot;#求多维数组的和&quot; class=&quot;headerlink&quot; title=&quot;求多维数组的和&quot;&gt;&lt;/a&gt;求多维数组的和
      
    
    </summary>
    
      <category term="案例" scheme="https://tech.guanqi.xyz/categories/%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="案例" scheme="https://tech.guanqi.xyz/tags/%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>js中正则表达式使用方法</title>
    <link href="https://tech.guanqi.xyz/2019-01-24/js-regexp-use/"/>
    <id>https://tech.guanqi.xyz/2019-01-24/js-regexp-use/</id>
    <published>2019-01-24T06:16:21.000Z</published>
    <updated>2019-01-24T10:01:29.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天说一下有关js中正则表达式的一些知识点。正则表达式主要是在表单输入验证，以及一些文本字符处理中特表好用。</p></blockquote><h2 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h2><p>正则表达式是一个描述字符模式的对象，最早是诞生于Perl语言中，JavaScript继承了Perl语言的正则表达式的一些特性，方法和概念。在JavaScript中，有一个类RegExp表示正则表达式，而且String和RegExp都有对应的模式匹配和文本检索、替换的函数。</p><h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>创建正则表达式可以使用两种方法，这是js对象一以贯之的方法，就是new实例化一个对象，或者直接写正则表达式。</p><h3 id="new运算符创建"><a href="#new运算符创建" class="headerlink" title="new运算符创建"></a>new运算符创建</h3><p>通过new运算符来实例化一个RegExp对象。</p><p>语法表达：<code>new RegExp(code is here);</code></p><p>例如：创建一个验证数字的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：这里使用test()方法来检测是否符合</span></span><br><span class="line"><span class="keyword">var</span> numReg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'a123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(num)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h3 id="直接量创建"><a href="#直接量创建" class="headerlink" title="直接量创建"></a>直接量创建</h3><p>直接量就是直接赋值，创建一个表达式。这个看着更加简洁好用，非常灵活。</p><p>例如：还是上面那个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numReg = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'a123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(num)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h2><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>之前都是直接写正则表达式，例如<code>/abc/</code>,只是匹配任意一个符合abc的字符，而如果想要匹配多个字符，就可以使用字符类来实现。</p><p>字符类是使用方括号<code>[]</code>，中间可以随意写一些匹配规则。</p><p>例如：我们要检测文本中是否包含0-9中的任意数字，就可以使用字符类。这里我们使用直接量比较方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numReg = <span class="regexp">/[0-9]/</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'a123'</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(num)); <span class="comment">// true;</span></span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(str)); <span class="comment">// false;</span></span><br></pre></td></tr></table></figure><p><strong>补充</strong>：其他字符类</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">[…]</td><td style="text-align:left">括号内的任意字符</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">[^…]</td><td style="text-align:left">不再括号内的任意字符</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">.]</td><td style="text-align:left">除换行符和Unicode行终止符之外的任意字符</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">\w</td><td style="text-align:left">任何ASCII(注释1)单字字符，等于[a-zA-Z0-9_]</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">\W</td><td style="text-align:left">任何非ASCII(注释1)单字字符，等于[^a-zA-Z0-9_]</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">\s</td><td style="text-align:left">任何Unicode空白符</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">\S</td><td style="text-align:left">任何非Unicode空白符的字符</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">\d</td><td style="text-align:left">任何ASCII数字，等于[0-9]</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">\D</td><td style="text-align:left">任何非ASCII数字，等于[^0-9]</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">[\b]</td><td style="text-align:left">退格直接量(<em>特殊</em>)</td></tr></tbody></table><p><em>注释1</em>：ASCII指的是美国信息交换标准代码。</p><p>以上就是一些字符类的说明，下面使用几个练习一下。</p><p>例如：一个检测是否包含数字、字母和下划线以及非空白符的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/\w\s/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc 123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(patten.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="避免重复定义"><a href="#避免重复定义" class="headerlink" title="避免重复定义"></a>避免重复定义</h3><p>上面的字符类，只能匹配单个，如果我们要匹配多个符合的字符，不能一直重复写吧，像这样<code>/\d\d\d/</code>,那这样就不高效了。</p><p>为了解决上面的烦恼，正则表达式用一些方法来表示这种情况，下面是一些列表。</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">{n,m}</td><td style="text-align:left">表示匹配前一项至少n次，不能超过m次</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">{n,}</td><td style="text-align:left">表示匹配前一项n次，或者更多次</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">{n}</td><td style="text-align:left">表示匹配前一项正好n次</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">?</td><td style="text-align:left">表示匹配前一项0次或者1次，等于{0,1}</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">+</td><td style="text-align:left">表示匹配前一项1次或者多次，等于{1,}</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">*</td><td style="text-align:left">表示匹配前一项0次或者多次，等于{0,}</td></tr></tbody></table><p>举个例子：匹配2到4位数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numReg = <span class="regexp">/\d&#123;2,4&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(num)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h3 id="用于选择的字符"><a href="#用于选择的字符" class="headerlink" title="用于选择的字符"></a>用于选择的字符</h3><p>正则表达式中有用于选择的字符<code>|</code>。这个是从左到右进行匹配，一旦左边符合就返回结果。</p><p>例如:匹配是带有ab或者cd或者ef的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numReg = <span class="regexp">/ab|cd|ef/</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'ab123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(num)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h3 id="用于分组的字符"><a href="#用于分组的字符" class="headerlink" title="用于分组的字符"></a>用于分组的字符</h3><p>正则表达式中有用于分组的字符<code>()</code>。</p><p><strong>知识点：正则中括号的含义</strong></p><ul><li>把单独的项目组合成子表达式，例如：<code>/java(script)?/</code>匹配的是字符串java,后面可以有script，也可以没有。</li><li>在完整的模式中定义子模式,例如：<code>/[a-z]+(\d+)/</code>,匹配的是尾部是否是数字。</li></ul><p>例如:匹配是带有ab或者cd或者ef的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numReg = <span class="regexp">/ab|cd|ef/</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'ab123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numReg.test(num)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h3 id="用于引用的字符"><a href="#用于引用的字符" class="headerlink" title="用于引用的字符"></a>用于引用的字符</h3><p>括号()也可以表示引用，允许在同一个正则表达式中的后面部分引用前面的子表达式。</p><p>例如：开始和结束的引号相匹配。\1引用的是第一个带括号的子表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quoat = <span class="regexp">/(['"])[^'"]*\1/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(quoat.test(<span class="string">'1"2"3'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>补充</strong>：正则表达式的选择、分组和引用字符</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">竖杠</td><td style="text-align:left">选择，匹配的是该符号左边或者右边的子表达式</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">(…)</td><td style="text-align:left">分组，组合，将一个项目组合成一个独立的单元，还可以供后面的引用使用</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">(?:…)</td><td style="text-align:left">只组合，把项目组合到一个单元，但是不记与该组匹配的字符</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">\n</td><td style="text-align:left">和第n个分组第一次匹配的字符相匹配</td></tr></tbody></table><h3 id="匹配指定的位置"><a href="#匹配指定的位置" class="headerlink" title="匹配指定的位置"></a>匹配指定的位置</h3><p>先来看一个列表，里面罗列了需要用到的锚字符。</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">^</td><td style="text-align:left">匹配字符串的开头；如果是匹配多行，那就是匹配一行的开头</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">$</td><td style="text-align:left">匹配字符串的结尾；如果是匹配多行，那就是匹配一行的结尾</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">\b</td><td style="text-align:left">匹配一个词语的边界，例如在\w和\W之间的位置，<em>注意：\b是退格符</em></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">\B</td><td style="text-align:left">匹配一个非词语的边界</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">(?=p)</td><td style="text-align:left">正前向声明，要求接下来的字符都有和模式p匹配，但是不包括匹配中的那些字符</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">(?!p)</td><td style="text-align:left">反前向声明，要求接下来的字符都不和模式p匹配</td></tr></tbody></table><p>例如：匹配一个用户名，以字母开头，数字结尾的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nameReg = <span class="regexp">/^[a-zA-Z]\d$/</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'a1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>,nameReg.test(name)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h3 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h3><p>正则表达式的标志说明了高级模式里面匹配的规则。和上面的正则表达式的语法不同的是标志出现在<code>/</code>符合之外说明的，位于第二个<code>\</code>之后。</p><p>正则表达式中的标志列表</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">g</td><td style="text-align:left">模式匹配应该是全局的，应该找出被检索字符串所有的匹配。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">i</td><td style="text-align:left">模式匹配应该是不区分大小写的匹配。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">m</td><td style="text-align:left">多行模式，^匹配一行的开头和字符串的开头，$匹配一行的结尾和字符串的结尾</td></tr></tbody></table><p>例如：匹配全局的a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'an apple'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(patten.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="String模式匹配的方法"><a href="#String模式匹配的方法" class="headerlink" title="String模式匹配的方法"></a>String模式匹配的方法</h2><h3 id="search-方法"><a href="#search-方法" class="headerlink" title="search()方法"></a>search()方法</h3><p>这个方法的参数是正则表达式，返回一个与之匹配的子串的位置；如果找不到就返回-1，如果参数不是正则表达式，会转换成正则表达式进行匹配。</p><p><strong>注意：</strong>该方法不支持全局检索，只要找到便会返回结果。</p><p>例如：匹配一个查找a的位置的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/a/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'apple'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(patten)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h3><p>这个方法的第一个参数是正则表达式，第二个参数是要替换的字符串，也可以是一个函数。用于把匹配到的字符串替换成别的内容。</p><p>例如：把小写字母a替换成大写字母*。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'apple'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(patten,<span class="string">"*"</span>)); <span class="comment">// *pple</span></span><br></pre></td></tr></table></figure><h3 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a>match()方法</h3><p>这个是比较常用的String正则表达式方法，参数只有一个就是正则表达式。把匹配到的内容以数组的形式返回。</p><p>例如：解析一个url地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlReg = <span class="regexp">/(\w+):\/\/([\w.]+)\/(\S*)\/(\d*)/</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'http://www.abc.com/post/1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(text.match(urlReg)); <span class="comment">// ["http://www.abc.com/post/1", "http", "www.abc.com", "post", "1", index: 0, input: "http://www.abc.com/post/1", groups: undefined]</span></span><br></pre></td></tr></table></figure><h3 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h3><p>这个也是比较常用的String正则表达式方法，参数只有一个就是正则表达式或者一个字符。把字符串分解为一个子串数组，使用的分隔符就是它的参数。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/\s/</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'123,456,789'</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="string">'123 456 789'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.split(<span class="string">','</span>)); <span class="comment">// ["123", "456", "789"]</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.split(patten)); <span class="comment">//  ["123", "456", "789"]</span></span><br></pre></td></tr></table></figure><h2 id="RegExp对象的属性和方法"><a href="#RegExp对象的属性和方法" class="headerlink" title="RegExp对象的属性和方法"></a>RegExp对象的属性和方法</h2><p>Javascript中的正则表达式是用RegExp对象来表示的，除了构造函数RegExp()，这个对象可以接受两个参数，一个是正则表达式的字符串，另一个是正则表达式的标志。</p><p>例如：<code>new RegExp(&quot;\\d{2}&quot;,&quot;g&quot;);</code></p><h3 id="RegExp对象的属性"><a href="#RegExp对象的属性" class="headerlink" title="RegExp对象的属性"></a>RegExp对象的属性</h3><p>每个RegExp对象都有五个属性。包括以下：</p><ul><li><code>source</code>是一个只读字符串，存放的是正则表达式的文本。</li><li><code>global</code>是一个只读的布尔值，是否具有标志g</li><li><code>ignoreCase</code>是一个只读的布尔值，是否具有标志i</li><li><code>multiline</code>是一个只读的布尔值，是否具有标志m</li><li><code>lastIndex</code>是一个可读写的整数。对于具有标志g的模式，这个属性存储在字符串中下一次可以检索的位置，由方法exec()和test()使用</li></ul><h3 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h3><p>该方法是对于一个指定的<strong>字符串</strong>进行匹配，把匹配到的内容返回一个的数组。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/a/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'apple'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(patten.exec(str)); <span class="comment">// ["a", index: 0, input: "apple", groups: undefined]</span></span><br></pre></td></tr></table></figure><h3 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h3><p>该方法和exec()方法类似，但是不只限于字符串，其他字符也支持；而且它返回的是一个布尔值，表示是否符合正则表达式的匹配规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patten = <span class="regexp">/a/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'apple'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(patten.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>###　检验用户名为中文的</p><p><code>/^[\u4e00-\u9fa5]{0,}$/</code></p><h3 id="检验密码强度"><a href="#检验密码强度" class="headerlink" title="检验密码强度"></a>检验密码强度</h3><p><code>/^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$/</code></p><p>密码的强度必须是包含大小写字母和数字的组合不能使用特殊字符,长度在8-10之间</p><h3 id="检测电子邮箱地址"><a href="#检测电子邮箱地址" class="headerlink" title="检测电子邮箱地址"></a>检测电子邮箱地址</h3><p><code>/[\\w!#$%&amp;&#39;*+/=?^_</code>{|}~-]+(?:\.[\w!#$%&amp;’<em>+/=?^_`{|}~-]+)</em>@(?:<a href="?:[\\w-]*[\\w]">\w</a>?\.)+<a href="?:[\\w-]*[\\w]">\w</a>?/`</p><h3 id="检测手机号的"><a href="#检测手机号的" class="headerlink" title="检测手机号的"></a>检测手机号的</h3><p><code>/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$/</code></p><h3 id="检测身份证的"><a href="#检测身份证的" class="headerlink" title="检测身份证的"></a>检测身份证的</h3><p><strong>15位的</strong>:<code>/^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$/</code></p><p><strong>18位的</strong>:<code>/^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/</code></p><h3 id="检验金额的"><a href="#检验金额的" class="headerlink" title="检验金额的"></a>检验金额的</h3><p>精确到2位小数。</p><p><code>/^[0-9]+(.[0-9]{2})?$/</code></p><h3 id="判断ie版本"><a href="#判断ie版本" class="headerlink" title="判断ie版本"></a>判断ie版本</h3><p><code>/^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$/</code></p><h3 id="校验IP-v4地址"><a href="#校验IP-v4地址" class="headerlink" title="校验IP-v4地址"></a>校验IP-v4地址</h3><p><code>/\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/</code></p><h3 id="提取url链接"><a href="#提取url链接" class="headerlink" title="提取url链接"></a>提取url链接</h3><p><code>/^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?/</code></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这个JavaScript中的正则表达式RegExp对象就讲到到这里，内容还是挺多的，需要慢慢吸收转化，可以多几个例子练习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天说一下有关js中正则表达式的一些知识点。正则表达式主要是在表单输入验证，以及一些文本字符处理中特表好用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正则表达式的概念&quot;&gt;&lt;a href=&quot;#正则表达式的概念&quot; class=&quot;header
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="正则表达式" scheme="https://tech.guanqi.xyz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js获取url地址的参数的方法</title>
    <link href="https://tech.guanqi.xyz/2019-01-23/js-url-params/"/>
    <id>https://tech.guanqi.xyz/2019-01-23/js-url-params/</id>
    <published>2019-01-23T13:36:21.000Z</published>
    <updated>2019-01-24T10:01:25.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天说一下如何获取url参数值。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>通过<code>location</code>的<code>search</code>就可以获取到url中问号后面的值。</li><li>字符串过滤到问号</li><li>通过split方法分割参数集合</li><li>循环赋值</li><li>匹配对应的参数值</li><li>返回值</li></ul><h2 id="封装的方法"><a href="#封装的方法" class="headerlink" title="封装的方法"></a>封装的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParams</span>(<span class="params">name</span>) </span>&#123; <span class="comment">// 不传name返回所有值，否则返回对应值</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.location.search;</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">'?'</span>) == <span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    url = url.substr(<span class="number">1</span>);</span><br><span class="line">    url = url.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> name = name || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> nameres;</span><br><span class="line">    <span class="comment">// 获取全部参数及其值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;url.length;i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> info = url[i].split(<span class="string">'='</span>);</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        obj[info[<span class="number">0</span>]] = <span class="built_in">decodeURI</span>(info[<span class="number">1</span>]);</span><br><span class="line">        url[i] = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果传入一个参数名称，就匹配其值</span></span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;url.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> url[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (key == name) &#123;</span><br><span class="line">                    nameres = url[i][key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nameres = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> nameres;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'http://www.abc.com/test.php?id=1&amp;from=index'</span>;</span><br><span class="line"><span class="keyword">var</span> res = getUrlParams();</span><br><span class="line"><span class="keyword">var</span> res1 = getUrlParams(<span class="string">'id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//  [&#123;id: "1"&#125;, &#123;from: "index"&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res1); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这是一个比较简单的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天说一下如何获取url参数值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;locat
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="url" scheme="https://tech.guanqi.xyz/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>es6之const命令</title>
    <link href="https://tech.guanqi.xyz/2019-01-23/es6-const/"/>
    <id>https://tech.guanqi.xyz/2019-01-23/es6-const/</id>
    <published>2019-01-23T13:31:21.000Z</published>
    <updated>2019-01-23T13:18:51.546Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hi,我又回来了，今天学习一下<code>const</code>命令。</p></blockquote><h2 id="声明一个常量"><a href="#声明一个常量" class="headerlink" title="声明一个常量"></a>声明一个常量</h2><p><code>const</code>声明一个只读常量，一旦声明，常量的值便不可改变。</p><p>例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = <span class="number">12</span>;</span><br><span class="line">food = <span class="number">23</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h2 id="还可以声明一个变量"><a href="#还可以声明一个变量" class="headerlink" title="还可以声明一个变量"></a>还可以声明一个变量</h2><p><code>const</code>可以声明一个变量，声明以后，必须初始化，否则变错。</p><p>例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p><code>const</code>和<code>let</code>有许多相似点：</p><ul><li>只在其声明的块级作用域中有效；</li><li>不存在作用域提升，是暂时性死区，必须先声明，后使用；</li><li>不能重复声明，否则会报错</li></ul><p>例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.只在其声明的块级作用域中有效</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> food = <span class="string">'apple'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(food); <span class="comment">// Uncaught ReferenceError: food is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.暂时性死区</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(HI); <span class="comment">// Uncaught ReferenceError: HI is not defined</span></span><br><span class="line">    <span class="keyword">const</span> HI = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.不能重复声明</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> food = <span class="string">'apple'</span>;</span><br><span class="line">    <span class="keyword">const</span> food = <span class="string">'orange'</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'food' has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const的声明变量的本质"><a href="#const的声明变量的本质" class="headerlink" title="const的声明变量的本质"></a>const的声明变量的本质</h2><p>const声明的变量，并不是说变量的值不能改变，而是对于变量指向那个的内存地址所保存的数据不得改动。</p><ul><li><p>如果声明的变量是基本数据，那值就保存在变量指向的那个内存地址，可以理解为对于常量。</p></li><li><p>但是如果声明的变量是一个引用数据类型，那只能保证变量保存的指针地址不变，至于变量里面的属性和值，就不能保证了。</p></li></ul><p><em>注意：</em>如果把这个声明的引用数据类型变量指向另一个对象，就会报错。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 常量是一个对象</span></span><br><span class="line"><span class="keyword">const</span> About = &#123;&#125;;</span><br><span class="line">About.us = <span class="string">'usb'</span>;</span><br><span class="line">About.ua = <span class="string">'usc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(About); <span class="comment">// &#123;us: "usb", ua: "usc"&#125;</span></span><br><span class="line">About = &#123;&#125;; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常量是一个数组</span></span><br><span class="line"><span class="keyword">const</span> BALL = [];</span><br><span class="line">BALL.length = <span class="number">2</span>;</span><br><span class="line">BALL[<span class="number">0</span>] = <span class="string">'haha'</span>;</span><br><span class="line">BALL = []; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h2 id="补充：声明变量的方法"><a href="#补充：声明变量的方法" class="headerlink" title="补充：声明变量的方法"></a>补充：声明变量的方法</h2><ul><li>ES5的<code>var</code>和<code>function</code>命令。</li><li>ES6的<code>let</code>和<code>const</code>命令。</li></ul><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>其实，const也不是很难，只要你细心，就会发现非常的简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;hi,我又回来了，今天学习一下&lt;code&gt;const&lt;/code&gt;命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;声明一个常量&quot;&gt;&lt;a href=&quot;#声明一个常量&quot; class=&quot;headerlink&quot; title=&quot;声明一个常量&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="es6" scheme="https://tech.guanqi.xyz/categories/es6/"/>
    
    
      <category term="es6" scheme="https://tech.guanqi.xyz/tags/es6/"/>
    
      <category term="const" scheme="https://tech.guanqi.xyz/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>es6之块级作用域</title>
    <link href="https://tech.guanqi.xyz/2019-01-23/es6-block/"/>
    <id>https://tech.guanqi.xyz/2019-01-23/es6-block/</id>
    <published>2019-01-23T13:30:21.000Z</published>
    <updated>2019-01-23T13:16:19.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天，来探讨一下ES6中的块级作用域。</p></blockquote><h2 id="全局作用域和函数作用域"><a href="#全局作用域和函数作用域" class="headerlink" title="全局作用域和函数作用域"></a>全局作用域和函数作用域</h2><p>在ES5中，只全局作用域和函数作用域。这会导致函数作用域覆盖了全局作用域；亦或者循环中的变量泄露为全局变量。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  1.函数作用域覆盖了全局作用域,发生了变量提升，函数声明大于var声明的变量，因此函数里面的a提到了前面，在打印a，初始化一个undefined给a,所以打印出了undefined。</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'1'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span>&lt;<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a  = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 2.循环中的变量泄露为全局变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5;</span></span><br></pre></td></tr></table></figure><h2 id="ES6的块级作用域"><a href="#ES6的块级作用域" class="headerlink" title="ES6的块级作用域"></a>ES6的块级作用域</h2><p>用let命令新增了块级作用域，外层作用域无法获取到内层作用域，非常安全明了。即使外层和内层都使用相同变量名，也都互不干扰。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.外层作用域无法获取到内层作用域</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">41</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>,a); <span class="comment">// 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>,a); <span class="comment">// 1 41</span></span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> food = <span class="string">'apple'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(food); <span class="comment">// Uncaught ReferenceError: food is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> food = <span class="string">'apple'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(food); <span class="comment">// Uncaught ReferenceError: food is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 外层和内层都使用相同变量名，也都互不干扰</span></span><br><span class="line">&#123;  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> food = <span class="string">'apple'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(food); <span class="comment">// apple</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> food = <span class="string">'orange'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(food); <span class="comment">// orange</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级作用域和和函数声明"><a href="#块级作用域和和函数声明" class="headerlink" title="块级作用域和和函数声明"></a>块级作用域和和函数声明</h2><p>在ES5中，函数只能在顶级作用域和函数作用域中声明，不能在块级作用域中声明。但是在ES6中，函数可以在块级作用域中声明。</p><p>但是会有一定的问题，因为函数声明会被提到代码的最前面。所以会报错，最好在ES6中用函数表达式来表示一个函数。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.函数声明报错</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'我在函数里面！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// Uncaught TypeError: fn is not a function</span></span><br><span class="line"><span class="comment">//2.函数表达式没错</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> fa = <span class="string">'111'</span>;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我在函数里面！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(fa,fn); <span class="comment">// 111 ƒ () &#123; console.log('我在函数里面！');&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>ES6中允许函数在块级作用域中可以声明的条件是必须在大括号里面，否则就会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.报错的情况</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">4</span>&gt;<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.报错的情况</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">4</span>&gt;<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// Uncaught SyntaxError: Lexical declaration cannot appear in a single-statement context</span></span><br></pre></td></tr></table></figure><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>今天就将这些，下次再会。期待再更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天，来探讨一下ES6中的块级作用域。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;全局作用域和函数作用域&quot;&gt;&lt;a href=&quot;#全局作用域和函数作用域&quot; class=&quot;headerlink&quot; title=&quot;全局作用域和函数作用域&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="es6" scheme="https://tech.guanqi.xyz/categories/es6/"/>
    
    
      <category term="es6" scheme="https://tech.guanqi.xyz/tags/es6/"/>
    
      <category term="块级作用域" scheme="https://tech.guanqi.xyz/tags/%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>es6之set命令</title>
    <link href="https://tech.guanqi.xyz/2019-01-22/es6-set/"/>
    <id>https://tech.guanqi.xyz/2019-01-22/es6-set/</id>
    <published>2019-01-22T10:30:21.000Z</published>
    <updated>2019-01-23T13:20:42.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习set"><a href="#学习set" class="headerlink" title="学习set"></a>学习set</h2><p>set是ES6中的新增的数据结构，是一种构造函数，类似于数组，但是里面的元素都是唯一的，不重复的。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>].forEach( <span class="function"><span class="params">x</span> =&gt;</span> set.add(x) );</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set的属性"><a href="#set的属性" class="headerlink" title="set的属性"></a>set的属性</h3><p>set的属性包括constructor（set原型）和size（用来记录set的大小）。</p><p>用法：<code>Set.prototype.constructor</code>,<code>Set.prototype.size</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">45</span>,<span class="number">523</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set.constructor); <span class="comment">// ƒ Set() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="set的方法"><a href="#set的方法" class="headerlink" title="set的方法"></a>set的方法</h3><h4 id="set的操作方法"><a href="#set的操作方法" class="headerlink" title="set的操作方法"></a>set的操作方法</h4><ul><li>add(val); 添加某个值</li><li>delete(val); // 删除某个值，返回布尔值，表示结果。</li><li>has(val); // 判断该值是否存在于Set中。</li><li>clear(); // 清楚所有的值</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">//1.add();</span></span><br><span class="line">set.add(<span class="number">12</span>).add(<span class="number">32</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(2) &#123;12, 32&#125;</span></span><br><span class="line"><span class="comment">// 2.delete(val);</span></span><br><span class="line">set.delete(<span class="number">32</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(1) &#123;12&#125;</span></span><br><span class="line"><span class="comment">//3.has(val);</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">88</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">//4.clear();</span></span><br><span class="line">set.clear();</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="set的遍历方法"><a href="#set的遍历方法" class="headerlink" title="set的遍历方法"></a>set的遍历方法</h4><p><code>set</code>的键和值是同一个值。</p><ul><li>keys() 返回键名的方法</li><li>values() 返回键值的方法</li><li>entries() 返回键值对的方法</li><li>forEach() 用回调函数遍历各个元素的方法</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">32</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// // 2 1 5 34 45 33 23 32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// // 2 1 5 34 45 33 23 32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// [2, 2] [1, 1] [5, 5] [34, 34] [45, 45] [33, 33] [23, 23] [32, 32]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">value,key</span>) =&gt;</span> <span class="built_in">console</span>.log(key+ <span class="string">'='</span> +value)); <span class="comment">// 2=2 1=1 5=5 34=34 45=45 33=33 23=23 32=32</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>...</code>运算符和<code>Array.from</code>以及<code>map</code>和<code>filter</code>都可以遍历set结构。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="...运算符"></a><code>...</code>运算符</h3><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'123456654321'</span>);</span><br><span class="line"><span class="built_in">console</span>.log([...set]); <span class="comment">// ["1", "2", "3", "4", "5", "6"]</span></span><br></pre></td></tr></table></figure><p><code>...</code>和数组加起来可以去重</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> removeRepeat = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(removeRepeat); <span class="comment">//[1, 2, 3, 4, 6]</span></span><br></pre></td></tr></table></figure><h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a><code>map</code>方法</h3><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">x</span> =&gt;</span> x*<span class="number">2</span>))); <span class="comment">// &#123;2, 4, 6, 8&#125;</span></span><br></pre></td></tr></table></figure><h3 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a><code>filter</code>方法</h3><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function"><span class="params">x</span> =&gt;</span> x%<span class="number">2</span> === <span class="number">0</span>))); <span class="comment">// &#123;2, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a><code>Array.from</code></h3><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(set, x =&gt; x*<span class="number">2</span>))); <span class="comment">// &#123;2, 4, 6, 8&#125;</span></span><br></pre></td></tr></table></figure><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p>使用这个<code>set</code>可以实现数学中的交集，并集效果。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numa = <span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b]);</span><br><span class="line"><span class="built_in">console</span>.log(numa); <span class="comment">// &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="keyword">let</span> numb = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));</span><br><span class="line"><span class="built_in">console</span>.log(numb); <span class="comment">// &#123;3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="学习WeakSet"><a href="#学习WeakSet" class="headerlink" title="学习WeakSet"></a>学习WeakSet</h2><p>WeakSet和Set类似，也是没有重复的值。注意的是，它里面的成员只能是对象，其他数据类型不接受。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(<span class="number">1</span>); <span class="comment">// Uncaught TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))</span></span><br><span class="line"><span class="keyword">let</span> wsa = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(<span class="string">'1'</span>); <span class="comment">// Uncaught TypeError: Invalid value used in weak set</span></span><br><span class="line"><span class="keyword">let</span> wsb = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;); <span class="comment">// Uncaught TypeError: object is not iterable (cannot read property Symbol(Symbol.iterator))</span></span><br><span class="line"><span class="keyword">let</span> wsc = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([<span class="number">1</span>,<span class="number">3</span>]); <span class="comment">// Uncaught TypeError: Invalid value used in weak set</span></span><br><span class="line"><span class="keyword">let</span> wsc = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]);</span><br><span class="line"><span class="built_in">console</span>.log(wsc); <span class="comment">// WeakSet &#123;Array(2), Array(2)&#125;</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong>从上面的例子中，可以看出1.<code>WeakSet</code>构造函数的参数不接受字符串，数字，普通对象，数组（数组中的参数必须是对象）；接受数组（数组中的参数是对象的数组）。</p><h3 id="WeakSet的方法"><a href="#WeakSet的方法" class="headerlink" title="WeakSet的方法"></a>WeakSet的方法</h3><ul><li><code>WeakSet.prototype.add(val)</code>添加一个值;</li><li><code>WeakSet.prototype.delete(val)</code>删除一个值;</li><li><code>WeakSet.prototype.has(val)</code>是否有这个值;</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wset = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">23</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">2</span>]]);</span><br><span class="line"><span class="comment">//1.添加值</span></span><br><span class="line">wset.add([<span class="number">12</span>,<span class="number">33</span>,<span class="number">23</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(wset); <span class="comment">// WeakSet &#123;Array(3), Array(4), Array(3)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.删除值</span></span><br><span class="line">wset.delete([<span class="number">12</span>,<span class="number">33</span>,<span class="number">23</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(wset); <span class="comment">// WeakSet &#123;Array(4), Array(3)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.是否有这个值</span></span><br><span class="line"><span class="built_in">console</span>.log(wset.has([<span class="number">12</span>,<span class="number">33</span>,<span class="number">23</span>])); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="WeakSet的属性"><a href="#WeakSet的属性" class="headerlink" title="WeakSet的属性"></a>WeakSet的属性</h3><p>由于WeakSet中的值都是弱属性，随时可能消失，被垃圾回收，遍历机制无法保证值是否还存在，所以不能用<code>size</code>和<code>forEach()</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wset = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">23</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">2</span>]]);</span><br><span class="line"><span class="built_in">console</span>.log(wset.size); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;wset.length;i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(wset[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Set和WeakSet就介绍到这里，赶快用起来吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习set&quot;&gt;&lt;a href=&quot;#学习set&quot; class=&quot;headerlink&quot; title=&quot;学习set&quot;&gt;&lt;/a&gt;学习set&lt;/h2&gt;&lt;p&gt;set是ES6中的新增的数据结构，是一种构造函数，类似于数组，但是里面的元素都是唯一的，不重复的。&lt;/p&gt;
&lt;p&gt;例
      
    
    </summary>
    
      <category term="es6" scheme="https://tech.guanqi.xyz/categories/es6/"/>
    
    
      <category term="es6" scheme="https://tech.guanqi.xyz/tags/es6/"/>
    
      <category term="set" scheme="https://tech.guanqi.xyz/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>es6之let命令</title>
    <link href="https://tech.guanqi.xyz/2019-01-19/es6-let/"/>
    <id>https://tech.guanqi.xyz/2019-01-19/es6-let/</id>
    <published>2019-01-19T09:30:21.000Z</published>
    <updated>2019-01-19T09:43:28.003Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/es6.jpg" alt="let" title="">                </div>                <div class="image-caption">let</div>            </figure><h2 id="let命令的用法"><a href="#let命令的用法" class="headerlink" title="let命令的用法"></a>let命令的用法</h2><p><code>let</code>是es6中的声明一个变量的命令，只在它声明的代码块中有效，出了这个代码块就会报错。也非常适合<code>for</code>循环，在循环中i的值只在循环语句中生效，在外边取不到的。</p><p><code>var</code>命令声明的是一个全局的变量，i是指向全局的变量，只会输出最后的值。而<code>let</code>只在循环语句块里面生效，每次循环都会重新声明一个i的，所以每次循环都能拿到对应的值。</p><p><code>for</code>循环的变量是父作用域，和在循环体内<code>let</code>定义的变量（子作用域）不在同一个作用域。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在自身所在代码块中有效</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.在for循环语句块中有效</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j); <span class="comment">// j is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;<span class="number">10</span>;a++) &#123;</span><br><span class="line">    arr[a] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">4</span>]); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> b=<span class="number">0</span>;b&lt;<span class="number">10</span>;b++) &#123;</span><br><span class="line">    arr[b] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b[<span class="number">4</span>]); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.for循环的变量和循环体内的变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">'fed'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 结果是</span></span><br><span class="line"><span class="comment">*   fed</span></span><br><span class="line"><span class="comment">*   fed</span></span><br><span class="line"><span class="comment">*   fed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="let命令不存在作用域提升"><a href="#let命令不存在作用域提升" class="headerlink" title="let命令不存在作用域提升"></a>let命令不存在作用域提升</h2><p><code>var</code>命令是会发生作用域提升的，在声明之前，是<code>undefined</code>,未声明便有默认值了。而<code>let</code>定义的变量必须在声明后使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fa); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> fa = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fb); <span class="comment">// fb is not defined</span></span><br><span class="line"><span class="keyword">let</span> fb = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="let存在暂时性死区"><a href="#let存在暂时性死区" class="headerlink" title="let存在暂时性死区"></a>let存在暂时性死区</h2><p>“暂时性死区”（temporal dead zone，简称 TDZ）是指在ES6的规定中，如果区块中存在<code>let</code>和<code>const</code>命令的，这两个命令声明的变量就已经形成了封闭作用域。在此之前声明的变量，都会报错。</p><p>例如：下面声明了一个全局变量，但是在块级作用域中<code>let</code>又声明了一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> food = <span class="string">'apple'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="string">'str'</span> == <span class="string">'string'</span>) &#123;</span><br><span class="line">    food = <span class="string">'banana'</span>; <span class="comment">// Uncaught ReferenceError: food is not defined</span></span><br><span class="line">    <span class="keyword">let</span> food;</span><br><span class="line">    <span class="built_in">console</span>.log(food); <span class="comment">// undefined</span></span><br><span class="line">    food = <span class="string">'orange'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(food); <span class="comment">// orange</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>暂时性四区会有一些不好的地方。</p><p>typeof检测不安全</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> x; <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br></pre></td></tr></table></figure><h2 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h2><p>简而言之，就是不允许在同一作用域内，声明两个一样的变量。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'a' has already been declared</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'b' has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不能在函数参数内重复声明参数，否则报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'x' has already been declared</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">2</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'y' has already been declared</span></span><br><span class="line">&#125;</span><br><span class="line">wait(<span class="number">3</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h2><p>在ES6之前，顶级对象的属性和全局变量是一致的，所以导致出现很多问题。</p><ul><li>只有运行开才能捕捉到错误，没法一开始就检测出错误。</li><li>顶层对象是随时随地可以读取和写入的，所以不利于模块化编程。</li><li>window其实指的是游览器窗口，顶层对象有一个实体含义。</li></ul><p>所以es6改进了一点，就是<code>let</code>，<code>const</code>声明的全局变量不属于顶层对象的属性。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="学以致用let命令"><a href="#学以致用let命令" class="headerlink" title="学以致用let命令"></a>学以致用let命令</h2><p>古语有云：学了就用处处行，不学不用等于零。所以我写了一个关于let的小例子。</p><p>这是一个选项卡的案例，在之前，我们还要定义<code>btns[i].index = i</code>,而现在用let命令就方便多了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>, <span class="selector-class">.content</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.tab span'</span>);</span><br><span class="line"><span class="keyword">let</span> contents = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.content p'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; btns.length; j++) &#123;</span><br><span class="line">            btns[j].className = <span class="string">''</span>;</span><br><span class="line">            contents[j].className = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'active'</span>;</span><br><span class="line">        contents[i].className = <span class="string">'active'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>上面就是一些介绍如何正确的使用<code>let</code>命令，在实践中用起来吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="es6" scheme="https://tech.guanqi.xyz/categories/es6/"/>
    
    
      <category term="es6" scheme="https://tech.guanqi.xyz/tags/es6/"/>
    
      <category term="let" scheme="https://tech.guanqi.xyz/tags/let/"/>
    
  </entry>
  
  <entry>
    <title>ajax技术详解</title>
    <link href="https://tech.guanqi.xyz/2019-01-18/js-ajax/"/>
    <id>https://tech.guanqi.xyz/2019-01-18/js-ajax/</id>
    <published>2019-01-18T13:16:21.000Z</published>
    <updated>2019-01-24T10:01:39.239Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天来讲一下ajax的有关知识点。</p></blockquote><h2 id="ajax概念"><a href="#ajax概念" class="headerlink" title="ajax概念"></a>ajax概念</h2><p>ajax全称叫<strong>Asynchronous JavaScript and XML</strong>,意思是异步的 JavaScript 和 XML。</p><p>ajax是现有标准的一种新方法，不是编程语言，可以在不刷新网页的情况下，和服务器交换数据并且更新部分页面内容，不需要任何插件，只需要游览器允许运行JavaScript就可以。</p><p>而传统的网页（不使用ajax的）如果需要更新页面内容，就需要重新请求服务器，返回网页内容，重新渲染刷新页面。</p><h2 id="ajax的原理"><a href="#ajax的原理" class="headerlink" title="ajax的原理"></a>ajax的原理</h2><p><strong>原理</strong>：ajax的运行过程包括以下几个方面</p><ol><li>Browser游览器通过事件触发方法，本地通过<code>XMLHttpRequest</code>对象，创建并且发送请求通过互联网到服务器；</li><li>Server服务器收到请求的内容，响应请求，发送所需数据到游览器；</li><li>Browser游览器通过<code>XMLHttpRequest</code>对象的<code>onreadystatechange</code>的方法收到请求的数据后，解析和渲染数据到页面中。</li></ol><p><strong>注意：</strong>ajax依赖的标准有以下几个</p><ol><li>XMLHttpRequest对象,异步的与服务器交换数据</li><li>JavaScript/DOM,信息显示/交互</li><li>XML,作为转换数据的格式</li></ol><h2 id="XMLHttpRequest的使用"><a href="#XMLHttpRequest的使用" class="headerlink" title="XMLHttpRequest的使用"></a>XMLHttpRequest的使用</h2><p>创建<code>XMLHttpRequest</code>对象，通过<code>new</code>实例化一个<code>XMLHttpRequest</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() || <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>); <span class="comment">// 兼容ie和Firefox，google chrome,opera,safari</span></span><br></pre></td></tr></table></figure><p>发送请求使用<code>XMLHttpRequest</code>对象的<code>open</code>和<code>send</code>方法</p><h3 id="open方法使用"><a href="#open方法使用" class="headerlink" title="open方法使用"></a>open方法使用</h3><p><code>open(method,url,async)</code>,接受三个参数。</p><ul><li>第一个是method请求的类型，如：<code>get</code>和<code>post</code>;</li><li>第二个是url请求地址，即文件在服务器的位置；</li><li>第三个是是否处理异步处理请求,值为true和false；</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'https://www.abc.com/service.php?tamp='</span>+<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()),<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="send方法使用"><a href="#send方法使用" class="headerlink" title="send方法使用"></a>send方法使用</h3><p><code>send(string)</code>接受的参数为请求类型为post传递的值，为get类型时候不传值。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send(<span class="string">'tamp='</span>+<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br></pre></td></tr></table></figure><h3 id="onreadystatechange事件"><a href="#onreadystatechange事件" class="headerlink" title="onreadystatechange事件"></a>onreadystatechange事件</h3><p>当readyState属性发生变化时，就会触发onreadystatechange事件，该事件通过回调函数获取到响应的数据信息。</p><p><strong>readyState</strong>值:</p><ul><li>值为0表示：请求未初始化；</li><li>值为1表示：服务器连接已建立；</li><li>值为2表示：请求已接收；</li><li>值为3表示：请求处理中；</li><li>值为4表示:请求已完成，且响应已就绪；</li></ul><p><strong>status</strong>值：</p><ul><li>200: 请求成功</li><li>404: 未找到页面</li></ul><h3 id="简单的get请求。"><a href="#简单的get请求。" class="headerlink" title="简单的get请求。"></a>简单的get请求。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (!xhr &amp;&amp; <span class="keyword">typeof</span> xhr !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() || <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'https://www.abc.com/service.php?tamp='</span>+<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()),<span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h2 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h2><h3 id="模拟的JSON数据"><a href="#模拟的JSON数据" class="headerlink" title="模拟的JSON数据"></a>模拟的JSON数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 保存为data.json文件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"get_succ"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"alun"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"mark"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>:<span class="number">3</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"jean"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟的Nodejs的api"><a href="#模拟的Nodejs的api" class="headerlink" title="模拟的Nodejs的api"></a>模拟的Nodejs的api</h3><blockquote><p>请确保你的系统安装有node.js环境。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存为node.js文件</span></span><br><span class="line"><span class="comment">// 引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> success = &#123;</span><br><span class="line">    msg: <span class="string">"get_succ"</span>,</span><br><span class="line">    code: <span class="number">201</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        list: [</span><br><span class="line">            &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>: <span class="string">"alun"</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"name"</span>: <span class="string">"mark"</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"name"</span>: <span class="string">"jean"</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error = &#123;</span><br><span class="line">    msg: <span class="string">"get_fail"</span>,</span><br><span class="line">    code: <span class="number">101</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        info: <span class="string">'this request failed,again try!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authy = &#123;</span><br><span class="line">    msg: <span class="string">"no visited!"</span>,</span><br><span class="line">    code: <span class="number">403</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        info: <span class="string">'not visited!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立http服务</span></span><br><span class="line"><span class="keyword">const</span> serve = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lawDomainList = <span class="string">"http://localhost:9925"</span>;</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain;charset=utf8'</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,lawDomainList);</span><br><span class="line">    <span class="keyword">if</span> (req.url == <span class="string">'/api'</span>) &#123;</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(success));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(authy);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">serve.listen(port,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'serve is running on port 3000!'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="封装的ajax函数"><a href="#封装的ajax函数" class="headerlink" title="封装的ajax函数"></a>封装的ajax函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存为ajax.js文件</span></span><br><span class="line">$g = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!url &amp;&amp; !(<span class="keyword">typeof</span> url == <span class="string">'string'</span>)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'SysantaxError: this get request must had url!'</span>); &#125;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() || <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">            xhr.open(<span class="string">'GET'</span>,url,<span class="literal">true</span>);</span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                        resolve(<span class="keyword">this</span>.responseText,<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> resJson = &#123; <span class="attr">code</span>: <span class="keyword">this</span>.status, <span class="attr">response</span>: <span class="keyword">this</span>.response &#125;</span><br><span class="line">                        reject(resJson, <span class="keyword">this</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    post: <span class="function"><span class="keyword">function</span>(<span class="params">url,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!url) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'SysantaxError: this post request must had url!'</span>); &#125;</span><br><span class="line">            <span class="keyword">if</span> (!data) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'SysantaxError: this post request must had data!'</span>); &#125;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() || <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">            xhr.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                        resolve(<span class="keyword">this</span>.responseText,<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> resJson = &#123; <span class="attr">code</span>: <span class="keyword">this</span>.status, <span class="attr">response</span>: <span class="keyword">this</span>.response &#125;</span><br><span class="line">                        reject(resJson, <span class="keyword">this</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例：获取数据渲染页面"><a href="#示例：获取数据渲染页面" class="headerlink" title="示例：获取数据渲染页面"></a>示例：获取数据渲染页面</h2><blockquote><p>通过点击按钮获取数据，渲染列表。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"res"</span>&gt;</span>结果：暂无结果<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span><br><span class="line"><span class="keyword">let</span> resbox = <span class="built_in">document</span>.querySelector(<span class="string">'.res'</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'http://localhost:3000/api'</span>; <span class="comment">// node api</span></span><br><span class="line">    <span class="keyword">var</span> urlJson = <span class="string">'data.json'</span>; <span class="comment">// mock api</span></span><br><span class="line">    $g.get(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> res == <span class="string">'string'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> responTxt = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">            <span class="keyword">if</span> (responTxt.msg == <span class="string">'get_succ'</span> &amp;&amp; responTxt.code == <span class="number">201</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> list = responTxt.data.list;</span><br><span class="line">                <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;list.length;i++) &#123;</span><br><span class="line">                    str += <span class="string">'&lt;li&gt;'</span>+ list[i].id + <span class="string">':'</span> + list[i].name + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                resbox.innerHTML = str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这只是我总结的一小部分知识点，其实这个技术还是有很多地方没有说到，以后再补充吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天来讲一下ajax的有关知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ajax概念&quot;&gt;&lt;a href=&quot;#ajax概念&quot; class=&quot;headerlink&quot; title=&quot;ajax概念&quot;&gt;&lt;/a&gt;ajax概念&lt;/h2&gt;&lt;p&gt;aj
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="ajax" scheme="https://tech.guanqi.xyz/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>案例列表</title>
    <link href="https://tech.guanqi.xyz/2019-01-16/example-list/"/>
    <id>https://tech.guanqi.xyz/2019-01-16/example-list/</id>
    <published>2019-01-16T13:30:21.000Z</published>
    <updated>2019-01-30T01:52:21.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前我做了许多的案例，包括当当网pc、哔哩哔哩h5，今天介绍这两个案例。</p></blockquote><h1 id="当当网pc"><a href="#当当网pc" class="headerlink" title="当当网pc"></a>当当网pc</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/dd.jpg" alt="当当网pc" title="">                </div>                <div class="image-caption">当当网pc</div>            </figure><p>当当网是初学前端时候做的一个案例，这个案例包括登录，注册，首页，二级页，详情页，购物车页面这几个部分。</p><p>你可以先注册，然后登录，到首页看看，二级页看看，再到详情页添加商品到购物车（有待完善），最后在购物车结算。</p><p><strong>建议</strong>在电脑上游览，点击这里<a href="https://gitguanqi.github.io/demo/ddw" target="_blank" rel="noopener">预览</a>一下效果吧！</p><h1 id="哔哩哔哩h5"><a href="#哔哩哔哩h5" class="headerlink" title="哔哩哔哩h5"></a>哔哩哔哩h5</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/bl.jpg" alt="哔哩哔哩h5" title="">                </div>                <div class="image-caption">哔哩哔哩h5</div>            </figure><p>当当网是初学前端时候做的一个案例，这个案例包括登录，注册，首页，二级页，详情页，搜索页页面这几个部分。</p><p>你可以看频道内容，也可以看排行榜，还可以登录，注册（完善中），也可以看详情页视频。</p><p><strong>建议</strong>在手机上游览，点击这里<a href="https://gitguanqi.github.io/demo/blw" target="_blank" rel="noopener">预览</a>一下效果吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前我做了许多的案例，包括当当网pc、哔哩哔哩h5，今天介绍这两个案例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;当当网pc&quot;&gt;&lt;a href=&quot;#当当网pc&quot; class=&quot;headerlink&quot; title=&quot;当当网pc&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="案例" scheme="https://tech.guanqi.xyz/categories/%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="案例" scheme="https://tech.guanqi.xyz/tags/%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>js中对象详解</title>
    <link href="https://tech.guanqi.xyz/2019-01-16/js-object-use/"/>
    <id>https://tech.guanqi.xyz/2019-01-16/js-object-use/</id>
    <published>2019-01-16T13:16:21.000Z</published>
    <updated>2019-01-24T10:01:35.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天说一下有关对象操作方法的文章。</p></blockquote><h1 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h1><p>在js中数据类型分为两类，一个是基本数据类型，另一个是引用数据类型。基本数据类型包括文本字符串string、布尔boolean、数字number、未定义nudefined、空值null,而引用数据类型就是对象，包括普通的Object、数组Array、函数function、日期Date、正则表达式RegExp、字符串对象String、数字对象Number、布尔对象Boolean。今天要说的就是Object,普通的对象。</p><p>你可以把它当成一种无序的属性的集合，每个属性都有自己的名字和值，这个值可以是数组，也可以是对象，其他的也可以。</p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><p>创建对象有很多种方法，今天介绍常见的几种方法。</p><h2 id="直接量创建"><a href="#直接量创建" class="headerlink" title="直接量创建"></a>直接量创建</h2><p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="使用new运算符创建"><a href="#使用new运算符创建" class="headerlink" title="使用new运算符创建"></a>使用<code>new</code>运算符创建</h2><p>例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></p><h1 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h1><p>对象有很多的的属性和属性的值，属性用<code>.</code>来表示。在<code>.</code>左边的是要访问其属性的对象的引用名，它不能是字符串或者是表达式；在<code>.</code>右边的是属性名。</p><h2 id="定义一个对象"><a href="#定义一个对象" class="headerlink" title="定义一个对象"></a>定义一个对象</h2><p>直接量定义简单方便，直接在一个花括号里面写属性和值，属性之间用逗号隔开。</p><p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name = obj.name;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 'guan'</span></span><br></pre></td></tr></table></figure></p><h2 id="增加一个对象的属性和值"><a href="#增加一个对象的属性和值" class="headerlink" title="增加一个对象的属性和值"></a>增加一个对象的属性和值</h2><p>直接在对象里面添加属性即可，或者使用<code>.</code>定义一个新的属性值。</p><p>例如：直接拿上面的示例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span>,</span><br><span class="line">  address: <span class="string">'浙江杭州'</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.telephone = <span class="string">'0571-12340001'</span>;</span><br></pre></td></tr></table></figure><h2 id="修改一个对象的属性和值"><a href="#修改一个对象的属性和值" class="headerlink" title="修改一个对象的属性和值"></a>修改一个对象的属性和值</h2><p>使用<code>.</code>可以改变一个新的属性值。</p><p>例如：直接拿上面的示例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.name = <span class="string">'mark'</span>;</span><br></pre></td></tr></table></figure><h2 id="循环对象的属性和值"><a href="#循环对象的属性和值" class="headerlink" title="循环对象的属性和值"></a>循环对象的属性和值</h2><p>在js中,使用<code>for/in</code>方法可以遍历对象的属性和属性值。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">'='</span> + obj[key]); <span class="comment">//name=guan age=21 sex=man</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检测对象的属性是否存在"><a href="#检测对象的属性是否存在" class="headerlink" title="检测对象的属性是否存在"></a>检测对象的属性是否存在</h2><p>用<code>in</code>或者<code>undefined</code>判断，但是in运算符不常用，如果差不多会返回<code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1. 用in</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'name'</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  obj.name = <span class="string">'lee'</span>; <span class="comment">//lee</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">//lee</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.用判断</span></span><br><span class="line"><span class="keyword">if</span> (obj.name !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  obj.name = <span class="string">'lee'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">//lee</span></span><br></pre></td></tr></table></figure><h2 id="删除对象的属性和属性值"><a href="#删除对象的属性和属性值" class="headerlink" title="删除对象的属性和属性值"></a>删除对象的属性和属性值</h2><p>可以用<code>delete</code>运算符删除对象的属性，实际上是彻底从对象中删除这个属性，删除以后<code>for/in</code>方法和<code>in</code>运算符都不会找到该属性，如果打印该属性，会的到一个<code>undefined</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> obj.name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h1 id="作为关联数组的对象"><a href="#作为关联数组的对象" class="headerlink" title="作为关联数组的对象"></a>作为关联数组的对象</h1><p>在js中，数组是一种特殊的对象，所以也可以用对象来关联数组。</p><p>以下表示方法是相等的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object.property</span><br><span class="line">object[<span class="string">'property'</span>]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = obj[<span class="string">'name'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name == name); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="Object的属性和方法"><a href="#Object的属性和方法" class="headerlink" title="Object的属性和方法"></a>Object的属性和方法</h1><p>在js中，所有的对象都继承自Object类，所以它们都有通用的方法和属性。</p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p>在js中，每一个对象都有一个<code>constructor</code>属性,所以可以根据这个来检测某个数据是否属于对象。</p><p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor == <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以这样判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> arr == <span class="string">'object'</span> &amp;&amp; arr.constructor == <span class="built_in">Array</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arr is array'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">isArray(arr); <span class="comment">//arr is array</span></span><br></pre></td></tr></table></figure></p><h2 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a><code>instanceof</code>运算符</h2><p><code>instanceof</code>运算符可以检查<code>constructor</code>的值</p><p>因此上面可以写成。</p><p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> == <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以这样判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> arr == <span class="string">'object'</span> &amp;&amp; arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arr is array'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">isArray(arr); <span class="comment">//arr is array</span></span><br></pre></td></tr></table></figure></p><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><p>这个方法没有参数，可以把对象转换为一个字符串。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> str = obj.toString();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><h2 id="toLocaleString-方法"><a href="#toLocaleString-方法" class="headerlink" title="toLocaleString()方法"></a>toLocaleString()方法</h2><p>这个方法返回对象的一个本地化的字符串。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> str = now.toLocaleString();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//  2019/1/16 下午9:45:55</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-方法"><a href="#hasOwnProperty-方法" class="headerlink" title="hasOwnProperty()方法"></a><code>hasOwnProperty()</code>方法</h2><p>这个方法是检测对象的某个属性是否是自身的属性，而不是继承的属性。</p><p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guan'</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  sex: <span class="string">'man'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'address'</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><h2 id="valueOf-方法"><a href="#valueOf-方法" class="headerlink" title="valueOf()方法"></a>valueOf()方法</h2><p>这个方法把对象转化为某个基本数据类型，也就是一个数字，而不是字符串的时候才会调用的方法。</p><h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><p>对象的使用方法就是这些，最常用也是最基本的属性和方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天说一下有关对象操作方法的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是对象？&quot;&gt;&lt;a href=&quot;#什么是对象？&quot; class=&quot;headerlink&quot; title=&quot;什么是对象？&quot;&gt;&lt;/a&gt;什么是对象？&lt;/h1&gt;&lt;p&gt;在j
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="对象" scheme="https://tech.guanqi.xyz/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Demo列表</title>
    <link href="https://tech.guanqi.xyz/2019-01-16/demo-list/"/>
    <id>https://tech.guanqi.xyz/2019-01-16/demo-list/</id>
    <published>2019-01-16T02:30:21.000Z</published>
    <updated>2019-01-30T01:36:54.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小米首页"><a href="#小米首页" class="headerlink" title="小米首页"></a>小米首页</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo02.png" alt="小米首页" title="">                </div>                <div class="image-caption">小米首页</div>            </figure><p>这个demo是关于小米首页的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/xiaomi" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="天猫首页"><a href="#天猫首页" class="headerlink" title="天猫首页"></a>天猫首页</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo01.png" alt="天猫首页" title="">                </div>                <div class="image-caption">天猫首页</div>            </figure><p>这个demo是关于天猫首页的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/tmall" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="帅康首页"><a href="#帅康首页" class="headerlink" title="帅康首页"></a>帅康首页</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo03.png" alt="帅康首页" title="">                </div>                <div class="image-caption">帅康首页</div>            </figure><p>这个demo是关于帅康首页的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/sacon" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="58首页"><a href="#58首页" class="headerlink" title="58首页"></a>58首页</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo04.png" alt="58首页" title="">                </div>                <div class="image-caption">58首页</div>            </figure><p>这个demo是关于58首页的，建议在手机上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/58" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="换肤"><a href="#换肤" class="headerlink" title="换肤"></a>换肤</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo05.png" alt="换肤" title="">                </div>                <div class="image-caption">换肤</div>            </figure><p>这个demo是关于换肤的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/skinchange" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="商品放大镜"><a href="#商品放大镜" class="headerlink" title="商品放大镜"></a>商品放大镜</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo06.png" alt="商品放大镜" title="">                </div>                <div class="image-caption">商品放大镜</div>            </figure><p>这个demo是关于商品放大镜的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/magnifier" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="时钟canvas"><a href="#时钟canvas" class="headerlink" title="时钟canvas"></a>时钟canvas</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo08.png" alt="时钟" title="">                </div>                <div class="image-caption">时钟</div>            </figure><p>这个demo是关于时钟的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/clock" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="刮刮卡"><a href="#刮刮卡" class="headerlink" title="刮刮卡"></a>刮刮卡</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo07.png" alt="刮刮卡" title="">                </div>                <div class="image-caption">刮刮卡</div>            </figure><p>这个demo是关于刮刮卡的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/guaguaka" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="妈妈的礼物"><a href="#妈妈的礼物" class="headerlink" title="妈妈的礼物"></a>妈妈的礼物</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo09.png" alt="妈妈的礼物" title="">                </div>                <div class="image-caption">妈妈的礼物</div>            </figure><p>这个demo是关于妈妈的礼物的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/gifts" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="骰子"><a href="#骰子" class="headerlink" title="骰子"></a>骰子</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo10.png" alt="骰子" title="">                </div>                <div class="image-caption">骰子</div>            </figure><p>这个demo是关于骰子的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/dice" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="统计表"><a href="#统计表" class="headerlink" title="统计表"></a>统计表</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo11.png" alt="统计表" title="">                </div>                <div class="image-caption">统计表</div>            </figure><p>这个demo是关于统计表的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/chart" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="选项卡-tab切换"><a href="#选项卡-tab切换" class="headerlink" title="选项卡(tab切换)"></a>选项卡(tab切换)</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo12.png" alt="选项卡" title="">                </div>                <div class="image-caption">选项卡</div>            </figure><p>这个demo是关于选项卡的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/tab" target="_blank" rel="noopener">链接</a>查看。</p><h1 id="banner-轮播图"><a href="#banner-轮播图" class="headerlink" title="banner(轮播图)"></a>banner(轮播图)</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/demoimg/demo13.png" alt="banner" title="">                </div>                <div class="image-caption">banner</div>            </figure><p>这个demo是关于banner的，建议在pc上面查看，大家可以点击这个<a href="https://gitguanqi.github.io/demo/banner" target="_blank" rel="noopener">链接</a>查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小米首页&quot;&gt;&lt;a href=&quot;#小米首页&quot; class=&quot;headerlink&quot; title=&quot;小米首页&quot;&gt;&lt;/a&gt;小米首页&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lig
      
    
    </summary>
    
      <category term="demo" scheme="https://tech.guanqi.xyz/categories/demo/"/>
    
    
      <category term="demo" scheme="https://tech.guanqi.xyz/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>手机上查看pc上的网页</title>
    <link href="https://tech.guanqi.xyz/2019-01-13/pcpage-on-mobile/"/>
    <id>https://tech.guanqi.xyz/2019-01-13/pcpage-on-mobile/</id>
    <published>2019-01-13T09:51:21.000Z</published>
    <updated>2019-01-16T03:34:02.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>导语</strong>：前两天我在电脑上做了一个h5网页，但是只能在谷歌游览器的模拟设备上面看效果，但是没有办法在真机上测试效果。这两天，我发现了一个非常快捷的方法，可以让你轻轻松松在手机上测试电脑上你做的h5网页效果。</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>准备工具</li><li>连接步骤</li><li>写在最后</li></ul><h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ul><li>一台电脑</li><li>一部手机</li><li>一个局域网(wifi)</li></ul><h1 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h1><h2 id="第一步：连接网络"><a href="#第一步：连接网络" class="headerlink" title="第一步：连接网络"></a>第一步：连接网络</h2><p>手机和电脑同时连接上同一个局域网或者wifi，具体过程我就不演示了，身在互联网应该都是基本常识。</p><p><em>注意：</em>一定要同一个wifi网络，否则无法测试。</p><h2 id="第二步：电脑操作"><a href="#第二步：电脑操作" class="headerlink" title="第二步：电脑操作"></a>第二步：电脑操作</h2><ul><li>1.打开<code>cmd</code>，输入<code>ipconfig</code>，会出来一下内容。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/test1.png" alt="ipconfig" title="">                </div>                <div class="image-caption">ipconfig</div>            </figure><ul><li>2.打开游览器，在地址栏输入箭头所指的地址，我的是这个<code>http://192.168.1.104</code>，然后你会看到电脑上显示你刚刚做好的网页。</li></ul><h2 id="第三步：手机操作"><a href="#第三步：手机操作" class="headerlink" title="第三步：手机操作"></a>第三步：手机操作</h2><p>把这个地址可以在你的手机游览器里面输入，你就会看到和电脑同样内容的网页。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>最后你就会成功的看到你的手机游览器上面显示着你做好的页面，是不是很神奇呢。这个解决了困扰大部分开发人员的问题，就是做好h5的网页，不能够在真机上面看到真实的效果，利用这个方法就可以非常完美的检验你的劳动成果了，是不是非常好用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：前两天我在电脑上做了一个h5网页，但是只能在谷歌游览器的模拟设备上面看效果，但是没有办法在真机上测试效果。这两天，我发现了一个非常快捷的方法，可以让你轻轻松松在手机上测试电脑上你做的h5网页效果。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="网页技巧" scheme="https://tech.guanqi.xyz/categories/%E7%BD%91%E9%A1%B5%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="网页技巧" scheme="https://tech.guanqi.xyz/tags/%E7%BD%91%E9%A1%B5%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>js中数组的操作方法</title>
    <link href="https://tech.guanqi.xyz/2019-01-06/js-array-use/"/>
    <id>https://tech.guanqi.xyz/2019-01-06/js-array-use/</id>
    <published>2019-01-06T13:16:21.000Z</published>
    <updated>2019-01-24T10:01:36.304Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天给大家带来一篇有关数组操作方法的文章。</p></blockquote><h1 id="新建数组"><a href="#新建数组" class="headerlink" title="新建数组"></a>新建数组</h1><ul><li>方法一：通过<code>new</code>运算符创建一个数组构造函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><ul><li>方法二：通过方括号直接创建直接量数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="添加数组中的元素"><a href="#添加数组中的元素" class="headerlink" title="添加数组中的元素"></a>添加数组中的元素</h1><ul><li>方法一：通过下标添加元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'kwan'</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><ul><li>方法二：通过<code>array</code>的<code>push</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>push</code>是往数组末尾添加新元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.push(<span class="number">4</span>); <span class="comment">// result is [5,1,2,3,4];</span></span><br></pre></td></tr></table></figure><ul><li>方法三：通过<code>array</code>的<code>unshift</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>unshift</code>是网数组最前面添加一个新元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.unshift(<span class="number">4</span>); <span class="comment">// result is [4,1,2,3];</span></span><br></pre></td></tr></table></figure><h1 id="修改数组中的元素"><a href="#修改数组中的元素" class="headerlink" title="修改数组中的元素"></a>修改数组中的元素</h1><p>通过下标修改元素内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//下标修改</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// result is [4,2,3];</span></span><br></pre></td></tr></table></figure><h1 id="删除数组元素内容"><a href="#删除数组元素内容" class="headerlink" title="删除数组元素内容"></a>删除数组元素内容</h1><ul><li>方法一：通过<code>array</code>的<code>pop</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>pop</code>是往数组删除末尾元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.pop(); <span class="comment">// result is [1,2];</span></span><br></pre></td></tr></table></figure><ul><li>方法二：通过<code>array</code>的<code>shift</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>shift</code>是网数组删除最前面一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.shift(); <span class="comment">// result is [2,3];</span></span><br></pre></td></tr></table></figure><h1 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h1><p>用<code>concat</code>方法来合并另外一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.concat(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1,2,3,4,5,6];</span></span><br></pre></td></tr></table></figure><h1 id="删除指定数组"><a href="#删除指定数组" class="headerlink" title="删除指定数组"></a>删除指定数组</h1><p>用<code>splice</code>方法来合并另外一个数组。</p><p><strong>注意：</strong><code>splice</code>方法接受两个参数，一个从哪里开始，一个是到哪里结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2,3];</span></span><br></pre></td></tr></table></figure><h1 id="截取指定数组"><a href="#截取指定数组" class="headerlink" title="截取指定数组"></a>截取指定数组</h1><p>用<code>slice</code>方法来合并另外一个数组。</p><p><strong>注意：</strong><code>slice</code>方法接受两个参数，一个从哪里开始，一个是到哪里结束（但是不包括这个结束的元素本身）。如果是负数，就从倒数第几个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">1</span>);); <span class="comment">// [1];</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>今天的数组操作方法就介绍这么多，以后会持续更新的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天给大家带来一篇有关数组操作方法的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;新建数组&quot;&gt;&lt;a href=&quot;#新建数组&quot; class=&quot;headerlink&quot; title=&quot;新建数组&quot;&gt;&lt;/a&gt;新建数组&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="js" scheme="https://tech.guanqi.xyz/categories/js/"/>
    
    
      <category term="js" scheme="https://tech.guanqi.xyz/tags/js/"/>
    
      <category term="数组操作" scheme="https://tech.guanqi.xyz/tags/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>markdown使用笔记</title>
    <link href="https://tech.guanqi.xyz/2018-11-24/markdown-use/"/>
    <id>https://tech.guanqi.xyz/2018-11-24/markdown-use/</id>
    <published>2018-11-24T06:03:21.000Z</published>
    <updated>2019-01-16T03:30:46.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经很久没有写过文章了，感觉这个冬天过的非常寒冷，自己平时工作也比较忙，所以没有更新文章。今天正好有时间，就想写点东西，为生活的自己，为远方的家人，增添一些精彩。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天主要讲的就是markdown这门标记语言，说要标记语言，你们可能会想到<code>html</code>，对的，它就是一门超文本标记语言，用来展示网页内容结构的。</p><p>那markdown不太一样，它是用于文档的快速排版，类似于word。</p><p>它有以下特点：</p><ul><li>轻量</li><li>简单</li><li>通用</li></ul><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>写博客</li><li>写说明</li><li>转化</li></ul><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>正因为它有那些特点，语法简单容易学，而且功能还比较强大，所以非常多的人用它来写博客。最流行的博客平台有很多都支持markdown，比如说wordpress，zblog等博客平台，还有github等代码托管平台。</p><h3 id="写说明"><a href="#写说明" class="headerlink" title="写说明"></a>写说明</h3><p>在github上随处可见各种仓库都有<strong>README.md</strong>结尾的说明文档，帮助开发者更好的了解这个仓库存放的东西是什么，都有哪些功能作用，可以用来做什么。</p><h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><p>转化这个用途，就不太常见了，它主要是把markdown文件转化为ppt,word等文件文档格式。用于学术研究，数据计算等领域。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>标题</li><li>文本</li><li>图片</li><li>链接</li><li>列表</li><li>表格</li><li>代码</li></ul><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在markdown的语法规则中，标题是用 # 号来标记的，一共有六级，分别是1-6类似于html的标题标签。# 号从大到小，内容从大到小，# 号越多，级别越小，内容越详细。</p><p>语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br><span class="line">#### 标题4</span><br><span class="line">##### 标题5</span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure></p><p>下面是效果展示：</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>文本也是markdown的特色之一。包括粗体，斜体，删除，引用，分割线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.粗体用两个*号包围内容。  </span><br><span class="line">2.斜体用一对*号包围内容。   </span><br><span class="line">3.删除用一对两个波浪线表示  </span><br><span class="line">4.引用是用大于号来表示，大于号越多，程度越深。  </span><br><span class="line">5.分割线是用来区分各段落的不同内容的。</span><br></pre></td></tr></table></figure><p>下面是效果展示。</p><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><p><del>我是删除内容</del></p><blockquote><p> 我是引用的内容</p></blockquote><blockquote><blockquote><p>我是引用的内容</p></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>我是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote><hr><p>我是分割线</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>说明图片使用最前面一个英文叹号，中间是方括号括起来，写说明，后面是一个花括号，写图片地址。</p><p><strong>语法</strong>：<code>![我是图片](xxx.jpg)</code></p><p>这样就是表示一个图片。</p><p>例如：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.jpg" alt="百度" title="">                </div>                <div class="image-caption">百度</div>            </figure></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接的使用方法和图片有些类似，就是去掉了叹号，后面的都不变，前面还是方括号，用来链接地址文字说明，后面是花括号，用于链接的网络地址。</p><p><strong>语法</strong>： <code>[链接说明](http://www.example.com)</code></p><p>例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是用来展示要点，一列一列显示内容，用于内容比较多的时候使用。</p><p><strong>语法：</strong>  </p><ol><li>无序列表：<code>+</code>和<code>-</code>。<code>+</code>就是一级列表，<code>-</code>就是二级列表。</li><li>有序列表：用数字加点，要空格。</li></ol><p>例如：</p><p>这是无序列表。</p><ul><li>水果<ul><li>香蕉</li><li>苹果</li><li>葡萄</li></ul></li><li>蔬菜</li><li>谷物</li><li>天气</li></ul><p>这是有序列表。</p><ol><li>水果</li><li>蔬菜</li><li>谷物</li><li>天气</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是用于展示某一个统计内容的，范围比较广。</p><p>语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">两点是左右，点在左边就文字居左。</span><br></pre></td></tr></table></figure></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序号|姓名|成绩|排名</span><br><span class="line">--|:--:|--:|--</span><br><span class="line">1|张三|98|优秀</span><br><span class="line">2|李四|46|不及格</span><br><span class="line">3|王五|63|合格</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>序号</th><th style="text-align:center">姓名</th><th style="text-align:right">成绩</th><th>排名</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">张三</td><td style="text-align:right">98</td><td>优秀</td></tr><tr><td>2</td><td style="text-align:center">李四</td><td style="text-align:right">46</td><td>不及格</td></tr><tr><td>3</td><td style="text-align:center">王五</td><td style="text-align:right">63</td><td>合格</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>可以用代码或者代码块来写代码，是广大程序员必爱之物。</p><p><strong>语法：</strong> </p><ol><li><p>两个斜点表示一个代码条，并且高亮显示；</p></li><li><p>三个斜点一排，排成两排，中间写点内容，就是代码块，用来展示很多段代码。你可以在第一排旁边写上你要写代码的内容类型，比如：<code>html</code>,<code>css</code>,<code>javascript</code>或<code>js</code>,<code>php</code>等等都可以广泛的支持各种标记、编程语言。</p></li></ol><p>效果如下：</p><ul><li>代码条</li></ul><p>例如：<code>css</code></p><ul><li>代码块</li></ul><p>例如：这是一段html标记语言代码块。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Markdown学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Markdown<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎学习markdown课程。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>例如：这是一段css标记语言代码块。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如：这是一段js标记语言代码块。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'你好，欢迎学习markdown教程'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><code>Markdown</code>是一门非常不错的，值得每个人学习的文本编辑器都支持的标记语法的语言，希望每个人都能学会，这里我只是把我日常写作中常用的做了一个总结汇总，都某时记不得的时候，再来回顾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;已经很久没有写过文章了，感觉这个冬天过的非常寒冷，自己平时工作也比较忙，所以没有更新文章。今天正好有时间，就想写点东西，为生活的自己，为远方的家人，增添一些精彩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍
      
    
    </summary>
    
      <category term="标记语言" scheme="https://tech.guanqi.xyz/categories/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="markdown" scheme="https://tech.guanqi.xyz/tags/markdown/"/>
    
      <category term="文本编辑" scheme="https://tech.guanqi.xyz/tags/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>雅虎军规总结</title>
    <link href="https://tech.guanqi.xyz/2018-11-18/yahoo-rules/"/>
    <id>https://tech.guanqi.xyz/2018-11-18/yahoo-rules/</id>
    <published>2018-11-18T14:16:21.000Z</published>
    <updated>2019-01-30T01:39:28.189Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：雅虎军规是雅虎的开发人员在总结了网站的不合理部分后，提出的优化网站性能提高的一套方法规则，非常适合初学者绕过这些坎。这篇博文，是我在网络上搜集的一些关于雅虎军规的内容，图片归原作者所有，总结一起，供大家参考使用，希望对你们以后的开发过程中有所帮助。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_logo.jpg" alt="http" title="">                </div>                <div class="image-caption">http</div>            </figure><h1 id="1-尽可能的减少http请求数"><a href="#1-尽可能的减少http请求数" class="headerlink" title="1.尽可能的减少http请求数"></a>1.尽可能的减少http请求数</h1><p><strong>HTTP</strong>：从客户端到服务器端的请求消息。包括消息首行中，对资源的请求方法资源的标识符以及使用的协议。</p><p><strong>请求过程</strong>：当你打开网页的时候，你所看到的文字，图片，多媒体，这一切内容，都是你从服务器获取的，每一个内容的获取，就是一个http请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules01.png" alt="http" title="">                </div>                <div class="image-caption">http</div>            </figure><h1 id="2-使用CDN（内容分发网络）"><a href="#2-使用CDN（内容分发网络）" class="headerlink" title="2.使用CDN（内容分发网络）"></a>2.使用CDN（内容分发网络）</h1><p><strong>CDN</strong>：内容分发网络，意思就是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules02.png" alt="CDN" title="">                </div>                <div class="image-caption">CDN</div>            </figure><p><strong>通俗来说</strong>：就是在离你最近的地方，放置一台性能好、链接顺畅的副本服务器，让你能够以最近的距离，最快的速度获取内容。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules03.png" alt="CDN" title="">                </div>                <div class="image-caption">CDN</div>            </figure><h1 id="3-添加Expire-Cache-Control头"><a href="#3-添加Expire-Cache-Control头" class="headerlink" title="3.添加Expire/Cache-Control头"></a>3.添加Expire/Cache-Control头</h1><p><strong>Expire头</strong>：内容是一个时间值，值就是资源在本地的过期时间，存在本地；在本地缓存阶段，找到一个对应的资源值，当前时间还没有超过资源的过期时间，就直接使用这个资源，不会发送http请求。</p><p><strong>Cache-Control头C</strong>：是http协议中常用的头部之一，负责页面的缓存机制，如果该头部指示缓存，缓存的内容也会存在本地，操作流程和expire相似，但也有不同的地方，Cache-Control有更多的选项，而且有更多的处理方式。</p><h1 id="4-启用Gzip压缩"><a href="#4-启用Gzip压缩" class="headerlink" title="4.启用Gzip压缩"></a>4.启用Gzip压缩</h1><p>看图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules04.png" alt="Gzip压缩" title="">                </div>                <div class="image-caption">Gzip压缩</div>            </figure></p><p>举个例子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules05.png" alt="Gzip压缩" title="">                </div>                <div class="image-caption">Gzip压缩</div>            </figure></p><h1 id="5-将css放在页面最上面"><a href="#5-将css放在页面最上面" class="headerlink" title="5.将css放在页面最上面"></a>5.将css放在页面最上面</h1><p><strong>CSS</strong>：CSS，就是层叠样式表。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules06.png" alt="CSS01" title="">                </div>                <div class="image-caption">CSS01</div>            </figure><p>为了提高游览器加载速度，建议放在<code>html</code>的<code>head</code>标签内。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules07.png" alt="CSS02" title="">                </div>                <div class="image-caption">CSS02</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules08.png" alt="CSS03" title="">                </div>                <div class="image-caption">CSS03</div>            </figure><h1 id="6-将script放在页面最下面"><a href="#6-将script放在页面最下面" class="headerlink" title="6.将script放在页面最下面"></a>6.将script放在页面最下面</h1><p><strong>页面DOM加载顺序</strong>：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules09.png" alt="js01" title="">                </div>                <div class="image-caption">js01</div>            </figure></p><p>为了顺利加载各种资源，把js放在页面最下面，可以正常运行脚本，也为获取DOM元素更流畅。</p><h1 id="7-避免在CSS中使用Expressions"><a href="#7-避免在CSS中使用Expressions" class="headerlink" title="7.避免在CSS中使用Expressions"></a>7.避免在CSS中使用Expressions</h1><p><strong>定义</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules10.png" alt="CSS—Expressions" title="">                </div>                <div class="image-caption">CSS—Expressions</div>            </figure><p>例子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules11.png" alt="CSS—Expressions" title="">                </div>                <div class="image-caption">CSS—Expressions</div>            </figure></p><h1 id="8-把js和css文件放到外部文件中"><a href="#8-把js和css文件放到外部文件中" class="headerlink" title="8.把js和css文件放到外部文件中"></a>8.把js和css文件放到外部文件中</h1><p><strong>情况1</strong>：写在页面内，如果只是的单独一个页面使用js和css文件，可以写在页面里面；还有就是不经常访问的页面；并且脚本和样式很少。<br>这样写可以：</p><ul><li>减少页面请求</li><li>提升页面渲染速度</li></ul><p><strong>情况2</strong>：单独提取，如果是大量页面复用，那就需要引入js和css文件。<br>这样写可以：</p><ul><li>提高js和css的复用性</li><li>缩小页面体积</li><li>提高了js的css的可维护性</li></ul><h1 id="9-减少DNS查询"><a href="#9-减少DNS查询" class="headerlink" title="9.减少DNS查询"></a>9.减少DNS查询</h1><p><strong>DNS</strong>：（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules12.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><p><strong>缓存时间对比</strong>:</p><ul><li>当缓存时间长时：减少DNS的重复查找，节省时间。</li><li>当缓存时间短时：及时的检测网站服务器的变化，保证正确性。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules13.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><p><strong>域名</strong>：（Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。</p><p>可以使用单域和多域</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules14.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><h1 id="10-压缩JavaScript和Css"><a href="#10-压缩JavaScript和Css" class="headerlink" title="10.压缩JavaScript和Css"></a>10.压缩JavaScript和Css</h1><p><strong>方法</strong>：</p><ul><li>去除不必要的空白符，格式符，注释符。</li><li>简写方法名，参数名压缩js脚本。</li></ul><p>例如：jquery</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules15.png" alt="压缩JavaScript和Css" title="">                </div>                <div class="image-caption">压缩JavaScript和Css</div>            </figure><p><em>建议：</em>：在网站上线项目前，将JavaScript和Css都进行压缩，使线上版本是最轻量级的，大幅提升网站性能。</p><h1 id="11-避免重定向"><a href="#11-避免重定向" class="headerlink" title="11.避免重定向"></a>11.避免重定向</h1><p><strong>定义</strong>： 原始请求被重新转向了其他请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules16.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><p><em>状态码</em>：</p><ul><li>301（Moved Permanently）：被移动到了另外的位置。</li><li>302 Found：被找到了，不在原始位置，临时重定向。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules17.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><p>为什么避免重定向：多了一次请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules18.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><h1 id="12-移除重复的脚步"><a href="#12-移除重复的脚步" class="headerlink" title="12.移除重复的脚步"></a>12.移除重复的脚步</h1><p>例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移除重复的脚步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> number = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 引用1次 正常 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 引用2次 不正常 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js dom</span></span><br><span class="line">number++;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).value = number;</span><br></pre></td></tr></table></figure><h1 id="13-配置实体标签（ETag）"><a href="#13-配置实体标签（ETag）" class="headerlink" title="13.配置实体标签（ETag）"></a>13.配置实体标签（ETag）</h1><p><strong>定义</strong>：使用特殊的字符串来标识某个请求资源版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules19.png" alt="配置实体标签（ETag）" title="">                </div>                <div class="image-caption">配置实体标签（ETag）</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules20.png" alt="配置实体标签（ETag）" title="">                </div>                <div class="image-caption">配置实体标签（ETag）</div>            </figure><p>如果本地版本游览器一样，就使用本地的缓存文件，并且会返回304。</p><h1 id="14-使用Ajax缓存"><a href="#14-使用Ajax缓存" class="headerlink" title="14.使用Ajax缓存"></a>14.使用Ajax缓存</h1><p><strong>定义</strong>：即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules21.png" alt="使用Ajax缓存" title="">                </div>                <div class="image-caption">使用Ajax缓存</div>            </figure><p><strong>方法</strong>：get和post</p><ul><li>POST：每次都执行，不被缓存。</li><li>get:同一地址不重复执行，可以被缓存。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/yh_rules22.png" alt="get和post" title="">                </div>                <div class="image-caption">get和post</div>            </figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这是我第一次总结前人的经验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：雅虎军规是雅虎的开发人员在总结了网站的不合理部分后，提出的优化网站性能提高的一套方法规则，非常适合初学者绕过这些坎。这篇博文，是我在网络上搜集的一些关于雅虎军规的内容，图片归原作者所有，总结一起，供大家参考使用，希望对你们以后的开发过程中有所
      
    
    </summary>
    
      <category term="前端规范" scheme="https://tech.guanqi.xyz/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="雅虎军规" scheme="https://tech.guanqi.xyz/tags/%E9%9B%85%E8%99%8E%E5%86%9B%E8%A7%84/"/>
    
      <category term="前端规范" scheme="https://tech.guanqi.xyz/tags/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
      <category term="性能优化" scheme="https://tech.guanqi.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>git配置教程</title>
    <link href="https://tech.guanqi.xyz/2018-11-18/git-config/"/>
    <id>https://tech.guanqi.xyz/2018-11-18/git-config/</id>
    <published>2018-11-18T14:16:21.000Z</published>
    <updated>2019-01-30T01:34:53.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-配置ssh"><a href="#一-配置ssh" class="headerlink" title="一.配置ssh"></a>一.配置ssh</h2><h3 id="1-检查本机是否有ssh-key设置"><a href="#1-检查本机是否有ssh-key设置" class="headerlink" title="1.检查本机是否有ssh key设置"></a>1.检查本机是否有ssh key设置</h3><p>如果没有则提示： No such file or directory<br>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm删除所有文件）</p><h3 id="2-使用Git-Bash生成新的ssh-key"><a href="#2-使用Git-Bash生成新的ssh-key" class="headerlink" title="2.使用Git Bash生成新的ssh key"></a>2.使用Git Bash生成新的ssh key</h3><p>$ cd ~  #保证当前路径在”~”下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;  #建议填写自己真实有效的邮箱地址</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车</span><br><span class="line">Enter passphrase (empty for no passphrase):   #输入密码（可以为空）</span><br><span class="line">Enter same passphrase again:   #再次确认密码（可以为空）</span><br><span class="line">Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥</span><br><span class="line">Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. #生成的公钥</span><br><span class="line">The key fingerprint is:</span><br><span class="line">e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 xxxxxx@yy.com</span><br><span class="line">//本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。</span><br><span class="line">//可生成ssh key自定义名称的密钥，默认id_rsa。</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; -f ~/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</span><br></pre></td></tr></table></figure></p><h2 id="3-添加ssh-key到GItHub"><a href="#3-添加ssh-key到GItHub" class="headerlink" title="3.添加ssh key到GItHub"></a>3.添加ssh key到GItHub</h2><h3 id="3-1-登录GitHub系统；"><a href="#3-1-登录GitHub系统；" class="headerlink" title="3.1 登录GitHub系统；"></a>3.1 登录GitHub系统；</h3><p>  点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/git03.png" alt="key" title="">                </div>                <div class="image-caption">key</div>            </figure><h3 id="3-2-复制id-rsa-pub的公钥内容"><a href="#3-2-复制id-rsa-pub的公钥内容" class="headerlink" title="3.2 复制id_rsa.pub的公钥内容"></a>3.2 复制id_rsa.pub的公钥内容</h3><p>1) 进入c:/Users/xxxx_000/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。<br>2) Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“AddKey”。</p><h3 id="4-配置账户"><a href="#4-配置账户" class="headerlink" title="4.配置账户"></a>4.配置账户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “your_username” #设置用户名</span><br><span class="line">$ git config --global user.email “your_registered_github_Email” #设置邮箱地址(建议用注册giuhub的邮箱)</span><br></pre></td></tr></table></figure><h3 id="5-测试ssh-keys是否设置成功"><a href="#5-测试ssh-keys是否设置成功" class="headerlink" title="5.测试ssh keys是否设置成功"></a>5.测试ssh keys是否设置成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &apos;github.com(192.30.252.129)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continueconnecting (yes/no)? yes #确认你是否继续联系，输入yes</span><br><span class="line">Warning: Permanently added&apos;github.com,192.30.252.129&apos; (RSA) to the list of known hosts.</span><br><span class="line">Enter passphrase for key&apos;/c/Users/xxxx_000/.ssh/id_rsa&apos;: #生成sshkye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。</span><br><span class="line">Hi xxx! You&apos;ve successfullyauthenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。</span><br></pre></td></tr></table></figure><h2 id="二、Github新建项目"><a href="#二、Github新建项目" class="headerlink" title="二、Github新建项目"></a>二、Github新建项目</h2><h3 id="1-Github新建项目"><a href="#1-Github新建项目" class="headerlink" title="1.Github新建项目"></a>1.Github新建项目</h3><p>点击按钮</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/git01.png" alt="新建" title="">                </div>                <div class="image-caption">新建</div>            </figure><h3 id="2-注意项目名（必须是：github的用户名-github-io）"><a href="#2-注意项目名（必须是：github的用户名-github-io）" class="headerlink" title="2.注意项目名（必须是：github的用户名.github.io）"></a>2.注意项目名（必须是：github的用户名.github.io）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/blogimg/git02.png" alt="新建" title="">                </div>                <div class="image-caption">新建</div>            </figure><h3 id="3-将项目clone到本地"><a href="#3-将项目clone到本地" class="headerlink" title="3.将项目clone到本地"></a>3.将项目clone到本地</h3><p><code>$ git clone https://github.com/&lt;你的用户名&gt;/&lt;仓库名字&gt;.git</code></p><p>然后输入命令，回车，等待clone完成。</p><h3 id="4-将index-html推送到远程github仓库中"><a href="#4-将index-html推送到远程github仓库中" class="headerlink" title="4.将index.html推送到远程github仓库中"></a>4.将index.html推送到远程github仓库中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;这里是注释信息，自己写&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="三-写在最后"><a href="#三-写在最后" class="headerlink" title="三.写在最后"></a>三.写在最后</h2><p>git的配置就到这里。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-配置ssh&quot;&gt;&lt;a href=&quot;#一-配置ssh&quot; class=&quot;headerlink&quot; title=&quot;一.配置ssh&quot;&gt;&lt;/a&gt;一.配置ssh&lt;/h2&gt;&lt;h3 id=&quot;1-检查本机是否有ssh-key设置&quot;&gt;&lt;a href=&quot;#1-检查本机是否有ssh-ke
      
    
    </summary>
    
      <category term="git" scheme="https://tech.guanqi.xyz/categories/git/"/>
    
    
      <category term="github" scheme="https://tech.guanqi.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>前端杂谈</title>
    <link href="https://tech.guanqi.xyz/2018-11-18/front-talk-one/"/>
    <id>https://tech.guanqi.xyz/2018-11-18/front-talk-one/</id>
    <published>2018-11-18T13:16:21.000Z</published>
    <updated>2019-01-16T03:19:00.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-故事简介"><a href="#一-故事简介" class="headerlink" title="一.故事简介"></a>一.故事简介</h2><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h3><p>今天，我想讲一讲有关前端的一些趣事。首先介绍一下我吧，我叫观奇笔记，内容更新其实不算多，主要是是我工作比较忙，没有时间去更新。</p><h3 id="2-行业态势"><a href="#2-行业态势" class="headerlink" title="2.行业态势"></a>2.行业态势</h3><p>前端技术，作为一门新兴的技术，已经火了好几年了，现在已经进入了一个瓶颈期，就是需求量还是会不断地增加，但是要求肯定会提高的，不会是以前的蛮荒时代，见一个前端就招进去了，而是会不断的筛选，淘汰技术差的，留下技术好的，一个大浪淘沙的时代。</p><h2 id="二-播种期"><a href="#二-播种期" class="headerlink" title="二.播种期"></a>二.播种期</h2><p>好了，开始言归正传。我来讲一讲我的前端生涯之路，也算是对之前的一些总结吧。</p><h3 id="1-高中时代"><a href="#1-高中时代" class="headerlink" title="1.高中时代"></a>1.高中时代</h3><p>我现在脑海中清晰的记得，我上高三的时候，我们的微机课老师在教室的黑板上写了一段代码。我还能回忆起来，大概就是以下这段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-讲课感受"><a href="#2-讲课感受" class="headerlink" title="2.讲课感受"></a>2.讲课感受</h3><p>我就被这个神奇的代码所吸引住了，当时老师还边说，边讲，边在黑板上用白色粉笔头画着，其实就是用粉笔头写代码。我当时就感觉这玩意真好，我要了解它，学会它。自此，想要学习html代码的种子便在我心中种下了，直到以后它生根，发芽，开花，直到结果。</p><h2 id="三-萌芽期"><a href="#三-萌芽期" class="headerlink" title="三.萌芽期"></a>三.萌芽期</h2><h3 id="1-无缘计算机"><a href="#1-无缘计算机" class="headerlink" title="1.无缘计算机"></a>1.无缘计算机</h3><p>上了大学以后，本来说是想报考计算机专业，但是没想到人招满了，我便被安排到了第二个志愿–电子商务，我感觉电子商务还可以，就是做购物网站的，还可以继续我的代码编写，我就欣然接受了这个专业，但是学开就后悔了，里面教的html少，也就是学习Dreamweaver（现在想想真是感觉太搞笑了，哈哈！），asp，商务一类的课程非常多，比如市场营销，商务谈判，管理学，经营企业，不管怎么不好，还是学点，以后会用到的。</p><h3 id="2-冲破牢笼"><a href="#2-冲破牢笼" class="headerlink" title="2.冲破牢笼"></a>2.冲破牢笼</h3><p>我后来就是自己买书，一点一点的学习web前端，其实那时候还不能叫前端，只能算作一个网页开发师。写一些简单的网页结构，一些简单的样式。自己没有电脑，就去学校的机房学习，打开电脑，打开记事本，就可以学习了，按照书上的，网上的教程学习，一点点的学习。每练习一个例子，就用记事本保存起来，存成Unicode格式或者utf-8格式的，可以在游览器显示的那种，后缀就是.html或者.htm就可以了，最后，在游览器里面查看效果，看到自己写的代码能够被游览器引擎解析然后展现在游览器的窗口里面，顿时感觉心中非常开心。</p><h2 id="四-写在最后"><a href="#四-写在最后" class="headerlink" title="四.写在最后"></a>四.写在最后</h2><p>好了，今天就讲到这里，以后陆续会和大家分享我的前端成长之路的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-故事简介&quot;&gt;&lt;a href=&quot;#一-故事简介&quot; class=&quot;headerlink&quot; title=&quot;一.故事简介&quot;&gt;&lt;/a&gt;一.故事简介&lt;/h2&gt;&lt;h3 id=&quot;1-起源&quot;&gt;&lt;a href=&quot;#1-起源&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="前端杂谈" scheme="https://tech.guanqi.xyz/categories/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="前端杂谈" scheme="https://tech.guanqi.xyz/tags/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
