<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>观奇笔记</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://gitguanqi.github.io/"/>
  <updated>2019-01-16T01:43:06.167Z</updated>
  <id>https://gitguanqi.github.io/</id>
  
  <author>
    <name>GuanQi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>雅虎军规总结</title>
    <link href="https://gitguanqi.github.io/2018-11-18/yahoo-rules/"/>
    <id>https://gitguanqi.github.io/2018-11-18/yahoo-rules/</id>
    <published>2018-11-18T14:16:21.000Z</published>
    <updated>2019-01-16T01:43:06.167Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：雅虎军规是雅虎的开发人员在总结了网站的不合理部分后，提出的优化网站性能提高的一套方法规则，非常适合初学者绕过这些坎。这篇博文，是我在网络上搜集的一些关于雅虎军规的内容，图片归原作者所有，总结一起，供大家参考使用，希望对你们以后的开发过程中有所帮助。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_logo.jpg" alt="http" title="">                </div>                <div class="image-caption">http</div>            </figure><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>1.尽可能的减少http请求数</li><li>2.使用CDN（内容分发网络）</li><li>3.添加Expire/Cache-Control头</li><li>4.启用Gzip压缩</li><li>5.将css放在页面最上面</li><li>6.将script放在页面最下面</li><li>7.避免在CSS中使用Expressions</li><li>8.把js和css文件放到外部文件中</li><li>9.减少DNS查询</li><li>10.压缩JavaScript和Css</li><li>11.避免重定向</li><li>12.移除重复的脚步</li><li>13.配置实体标签（ETag）</li><li>14.使用Ajax缓存</li></ul><h1 id="1-尽可能的减少http请求数"><a href="#1-尽可能的减少http请求数" class="headerlink" title="1.尽可能的减少http请求数"></a>1.尽可能的减少http请求数</h1><p><strong>HTTP</strong>：从客户端到服务器端的请求消息。包括消息首行中，对资源的请求方法资源的标识符以及使用的协议。</p><p><strong>请求过程</strong>：当你打开网页的时候，你所看到的文字，图片，多媒体，这一切内容，都是你从服务器获取的，每一个内容的获取，就是一个http请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules01.png" alt="http" title="">                </div>                <div class="image-caption">http</div>            </figure><h1 id="2-使用CDN（内容分发网络）"><a href="#2-使用CDN（内容分发网络）" class="headerlink" title="2.使用CDN（内容分发网络）"></a>2.使用CDN（内容分发网络）</h1><p><strong>CDN</strong>：内容分发网络，意思就是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules02.png" alt="CDN" title="">                </div>                <div class="image-caption">CDN</div>            </figure><p><strong>通俗来说</strong>：就是在离你最近的地方，放置一台性能好、链接顺畅的副本服务器，让你能够以最近的距离，最快的速度获取内容。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules03.png" alt="CDN" title="">                </div>                <div class="image-caption">CDN</div>            </figure><h1 id="3-添加Expire-Cache-Control头"><a href="#3-添加Expire-Cache-Control头" class="headerlink" title="3.添加Expire/Cache-Control头"></a>3.添加Expire/Cache-Control头</h1><p><strong>Expire头</strong>：内容是一个时间值，值就是资源在本地的过期时间，存在本地；在本地缓存阶段，找到一个对应的资源值，当前时间还没有超过资源的过期时间，就直接使用这个资源，不会发送http请求。</p><p><strong>Cache-Control头C</strong>：是http协议中常用的头部之一，负责页面的缓存机制，如果该头部指示缓存，缓存的内容也会存在本地，操作流程和expire相似，但也有不同的地方，Cache-Control有更多的选项，而且有更多的处理方式。</p><h1 id="4-启用Gzip压缩"><a href="#4-启用Gzip压缩" class="headerlink" title="4.启用Gzip压缩"></a>4.启用Gzip压缩</h1><p>看图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules04.png" alt="Gzip压缩" title="">                </div>                <div class="image-caption">Gzip压缩</div>            </figure></p><p>举个例子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules05.png" alt="Gzip压缩" title="">                </div>                <div class="image-caption">Gzip压缩</div>            </figure></p><h1 id="5-将css放在页面最上面"><a href="#5-将css放在页面最上面" class="headerlink" title="5.将css放在页面最上面"></a>5.将css放在页面最上面</h1><p><strong>CSS</strong>：CSS，就是层叠样式表。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules06.png" alt="CSS01" title="">                </div>                <div class="image-caption">CSS01</div>            </figure><p>为了提高游览器加载速度，建议放在<code>html</code>的<code>head</code>标签内。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules07.png" alt="CSS02" title="">                </div>                <div class="image-caption">CSS02</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules08.png" alt="CSS03" title="">                </div>                <div class="image-caption">CSS03</div>            </figure><h1 id="6-将script放在页面最下面"><a href="#6-将script放在页面最下面" class="headerlink" title="6.将script放在页面最下面"></a>6.将script放在页面最下面</h1><p><strong>页面DOM加载顺序</strong>：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules09.png" alt="js01" title="">                </div>                <div class="image-caption">js01</div>            </figure></p><p>为了顺利加载各种资源，把js放在页面最下面，可以正常运行脚本，也为获取DOM元素更流畅。</p><h1 id="7-避免在CSS中使用Expressions"><a href="#7-避免在CSS中使用Expressions" class="headerlink" title="7.避免在CSS中使用Expressions"></a>7.避免在CSS中使用Expressions</h1><p><strong>定义</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules10.png" alt="CSS—Expressions" title="">                </div>                <div class="image-caption">CSS—Expressions</div>            </figure><p>例子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules11.png" alt="CSS—Expressions" title="">                </div>                <div class="image-caption">CSS—Expressions</div>            </figure></p><h1 id="8-把js和css文件放到外部文件中"><a href="#8-把js和css文件放到外部文件中" class="headerlink" title="8.把js和css文件放到外部文件中"></a>8.把js和css文件放到外部文件中</h1><p><strong>情况1</strong>：写在页面内，如果只是的单独一个页面使用js和css文件，可以写在页面里面；还有就是不经常访问的页面；并且脚本和样式很少。<br>这样写可以：</p><ul><li>减少页面请求</li><li>提升页面渲染速度</li></ul><p><strong>情况2</strong>：单独提取，如果是大量页面复用，那就需要引入js和css文件。<br>这样写可以：</p><ul><li>提高js和css的复用性</li><li>缩小页面体积</li><li>提高了js的css的可维护性</li></ul><h1 id="9-减少DNS查询"><a href="#9-减少DNS查询" class="headerlink" title="9.减少DNS查询"></a>9.减少DNS查询</h1><p><strong>DNS</strong>：（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules12.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><p><strong>缓存时间对比</strong>:</p><ul><li>当缓存时间长时：减少DNS的重复查找，节省时间。</li><li>当缓存时间短时：及时的检测网站服务器的变化，保证正确性。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules13.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><p><strong>域名</strong>：（Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。</p><p>可以使用单域和多域</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules14.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><h1 id="10-压缩JavaScript和Css"><a href="#10-压缩JavaScript和Css" class="headerlink" title="10.压缩JavaScript和Css"></a>10.压缩JavaScript和Css</h1><p><strong>方法</strong>：</p><ul><li>去除不必要的空白符，格式符，注释符。</li><li>简写方法名，参数名压缩js脚本。</li></ul><p>例如：jquery</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules15.png" alt="压缩JavaScript和Css" title="">                </div>                <div class="image-caption">压缩JavaScript和Css</div>            </figure><p><em>建议：</em>：在网站上线项目前，将JavaScript和Css都进行压缩，使线上版本是最轻量级的，大幅提升网站性能。</p><h1 id="11-避免重定向"><a href="#11-避免重定向" class="headerlink" title="11.避免重定向"></a>11.避免重定向</h1><p><strong>定义</strong>： 原始请求被重新转向了其他请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules16.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><p><em>状态码</em>：</p><ul><li>301（Moved Permanently）：被移动到了另外的位置。</li><li>302 Found：被找到了，不在原始位置，临时重定向。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules17.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><p>为什么避免重定向：多了一次请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules18.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><h1 id="12-移除重复的脚步"><a href="#12-移除重复的脚步" class="headerlink" title="12.移除重复的脚步"></a>12.移除重复的脚步</h1><p>例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移除重复的脚步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var number = 0;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 引用1次 正常 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 引用2次 不正常 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js dom</span></span><br><span class="line">number++;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).value = number;</span><br></pre></td></tr></table></figure><h1 id="13-配置实体标签（ETag）"><a href="#13-配置实体标签（ETag）" class="headerlink" title="13.配置实体标签（ETag）"></a>13.配置实体标签（ETag）</h1><p><strong>定义</strong>：使用特殊的字符串来标识某个请求资源版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules19.png" alt="配置实体标签（ETag）" title="">                </div>                <div class="image-caption">配置实体标签（ETag）</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules20.png" alt="配置实体标签（ETag）" title="">                </div>                <div class="image-caption">配置实体标签（ETag）</div>            </figure><p>如果本地版本游览器一样，就使用本地的缓存文件，并且会返回304。</p><h1 id="14-使用Ajax缓存"><a href="#14-使用Ajax缓存" class="headerlink" title="14.使用Ajax缓存"></a>14.使用Ajax缓存</h1><p><strong>定义</strong>：即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules21.png" alt="使用Ajax缓存" title="">                </div>                <div class="image-caption">使用Ajax缓存</div>            </figure><p><strong>方法</strong>：get和post</p><ul><li>POST：每次都执行，不被缓存。</li><li>get:同一地址不重复执行，可以被缓存。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules22.png" alt="get和post" title="">                </div>                <div class="image-caption">get和post</div>            </figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这是我第一次总结前人的经验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：雅虎军规是雅虎的开发人员在总结了网站的不合理部分后，提出的优化网站性能提高的一套方法规则，非常适合初学者绕过这些坎。这篇博文，是我在网络上搜集的一些关于雅虎军规的内容，图片归原作者所有，总结一起，供大家参考使用，希望对你们以后的开发过程中有所
      
    
    </summary>
    
      <category term="前端性能" scheme="https://gitguanqi.github.io/categories/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
    
      <category term="雅虎前端规范" scheme="https://gitguanqi.github.io/tags/%E9%9B%85%E8%99%8E%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
      <category term="网站性能优化" scheme="https://gitguanqi.github.io/tags/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
