<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>观奇笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gitguanqi.github.io/"/>
  <updated>2019-01-16T03:34:02.080Z</updated>
  <id>https://gitguanqi.github.io/</id>
  
  <author>
    <name>GuanQi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手机上查看pc上的网页</title>
    <link href="https://gitguanqi.github.io/2019-01-13/pcpage-on-mobile/"/>
    <id>https://gitguanqi.github.io/2019-01-13/pcpage-on-mobile/</id>
    <published>2019-01-13T09:51:21.000Z</published>
    <updated>2019-01-16T03:34:02.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>导语</strong>：前两天我在电脑上做了一个h5网页，但是只能在谷歌游览器的模拟设备上面看效果，但是没有办法在真机上测试效果。这两天，我发现了一个非常快捷的方法，可以让你轻轻松松在手机上测试电脑上你做的h5网页效果。</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>准备工具</li><li>连接步骤</li><li>写在最后</li></ul><h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ul><li>一台电脑</li><li>一部手机</li><li>一个局域网(wifi)</li></ul><h1 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h1><h2 id="第一步：连接网络"><a href="#第一步：连接网络" class="headerlink" title="第一步：连接网络"></a>第一步：连接网络</h2><p>手机和电脑同时连接上同一个局域网或者wifi，具体过程我就不演示了，身在互联网应该都是基本常识。</p><p><em>注意：</em>一定要同一个wifi网络，否则无法测试。</p><h2 id="第二步：电脑操作"><a href="#第二步：电脑操作" class="headerlink" title="第二步：电脑操作"></a>第二步：电脑操作</h2><ul><li>1.打开<code>cmd</code>，输入<code>ipconfig</code>，会出来一下内容。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/test1.png" alt="ipconfig" title="">                </div>                <div class="image-caption">ipconfig</div>            </figure><ul><li>2.打开游览器，在地址栏输入箭头所指的地址，我的是这个<code>http://192.168.1.104</code>，然后你会看到电脑上显示你刚刚做好的网页。</li></ul><h2 id="第三步：手机操作"><a href="#第三步：手机操作" class="headerlink" title="第三步：手机操作"></a>第三步：手机操作</h2><p>把这个地址可以在你的手机游览器里面输入，你就会看到和电脑同样内容的网页。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>最后你就会成功的看到你的手机游览器上面显示着你做好的页面，是不是很神奇呢。这个解决了困扰大部分开发人员的问题，就是做好h5的网页，不能够在真机上面看到真实的效果，利用这个方法就可以非常完美的检验你的劳动成果了，是不是非常好用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：前两天我在电脑上做了一个h5网页，但是只能在谷歌游览器的模拟设备上面看效果，但是没有办法在真机上测试效果。这两天，我发现了一个非常快捷的方法，可以让你轻轻松松在手机上测试电脑上你做的h5网页效果。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="网页技巧" scheme="https://gitguanqi.github.io/categories/%E7%BD%91%E9%A1%B5%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="网页技巧" scheme="https://gitguanqi.github.io/tags/%E7%BD%91%E9%A1%B5%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>js中数组的操作方法</title>
    <link href="https://gitguanqi.github.io/2019-01-06/js-array-use/"/>
    <id>https://gitguanqi.github.io/2019-01-06/js-array-use/</id>
    <published>2019-01-06T13:16:21.000Z</published>
    <updated>2019-01-06T15:25:44.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天给大家带来一篇有关数组操作方法的文章。</p></blockquote><h1 id="新建数组"><a href="#新建数组" class="headerlink" title="新建数组"></a>新建数组</h1><ul><li>方法一：通过<code>new</code>运算符创建一个数组构造函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><ul><li>方法二：通过方括号直接创建直接量数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="添加数组中的元素"><a href="#添加数组中的元素" class="headerlink" title="添加数组中的元素"></a>添加数组中的元素</h1><ul><li>方法一：通过下标添加元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'kwan'</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><ul><li>方法二：通过<code>array</code>的<code>push</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>push</code>是往数组末尾添加新元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.push(<span class="number">4</span>); <span class="comment">// result is [5,1,2,3,4];</span></span><br></pre></td></tr></table></figure><ul><li>方法三：通过<code>array</code>的<code>unshift</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>unshift</code>是网数组最前面添加一个新元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.unshift(<span class="number">4</span>); <span class="comment">// result is [4,1,2,3];</span></span><br></pre></td></tr></table></figure><h1 id="修改数组中的元素"><a href="#修改数组中的元素" class="headerlink" title="修改数组中的元素"></a>修改数组中的元素</h1><p>通过下标修改元素内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//下标修改</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// result is [4,2,3];</span></span><br></pre></td></tr></table></figure><h1 id="删除数组元素内容"><a href="#删除数组元素内容" class="headerlink" title="删除数组元素内容"></a>删除数组元素内容</h1><ul><li>方法一：通过<code>array</code>的<code>pop</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>pop</code>是往数组删除末尾元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.pop(); <span class="comment">// result is [1,2];</span></span><br></pre></td></tr></table></figure><ul><li>方法二：通过<code>array</code>的<code>shift</code>方法来添加。</li></ul><p><strong>说明一点</strong>：<code>shift</code>是网数组删除最前面一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr.shift(); <span class="comment">// result is [2,3];</span></span><br></pre></td></tr></table></figure><h1 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h1><p>用<code>concat</code>方法来合并另外一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.concat(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1,2,3,4,5,6];</span></span><br></pre></td></tr></table></figure><h1 id="删除指定数组"><a href="#删除指定数组" class="headerlink" title="删除指定数组"></a>删除指定数组</h1><p>用<code>splice</code>方法来合并另外一个数组。</p><p><strong>注意：</strong><code>splice</code>方法接受两个参数，一个从哪里开始，一个是到哪里结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2,3];</span></span><br></pre></td></tr></table></figure><h1 id="截取指定数组"><a href="#截取指定数组" class="headerlink" title="截取指定数组"></a>截取指定数组</h1><p>用<code>slice</code>方法来合并另外一个数组。</p><p><strong>注意：</strong><code>slice</code>方法接受两个参数，一个从哪里开始，一个是到哪里结束（但是不包括这个结束的元素本身）。如果是负数，就从倒数第几个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">1</span>);); <span class="comment">// [1];</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>今天的数组操作方法就介绍这么多，以后会持续更新的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天给大家带来一篇有关数组操作方法的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;新建数组&quot;&gt;&lt;a href=&quot;#新建数组&quot; class=&quot;headerlink&quot; title=&quot;新建数组&quot;&gt;&lt;/a&gt;新建数组&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Javascript" scheme="https://gitguanqi.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://gitguanqi.github.io/tags/Javascript/"/>
    
      <category term="数组操作" scheme="https://gitguanqi.github.io/tags/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>markdown使用笔记</title>
    <link href="https://gitguanqi.github.io/2018-11-24/markdown-use/"/>
    <id>https://gitguanqi.github.io/2018-11-24/markdown-use/</id>
    <published>2018-11-24T06:03:21.000Z</published>
    <updated>2019-01-16T03:30:46.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经很久没有写过文章了，感觉这个冬天过的非常寒冷，自己平时工作也比较忙，所以没有更新文章。今天正好有时间，就想写点东西，为生活的自己，为远方的家人，增添一些精彩。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天主要讲的就是markdown这门标记语言，说要标记语言，你们可能会想到<code>html</code>，对的，它就是一门超文本标记语言，用来展示网页内容结构的。</p><p>那markdown不太一样，它是用于文档的快速排版，类似于word。</p><p>它有以下特点：</p><ul><li>轻量</li><li>简单</li><li>通用</li></ul><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>写博客</li><li>写说明</li><li>转化</li></ul><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>正因为它有那些特点，语法简单容易学，而且功能还比较强大，所以非常多的人用它来写博客。最流行的博客平台有很多都支持markdown，比如说wordpress，zblog等博客平台，还有github等代码托管平台。</p><h3 id="写说明"><a href="#写说明" class="headerlink" title="写说明"></a>写说明</h3><p>在github上随处可见各种仓库都有<strong>README.md</strong>结尾的说明文档，帮助开发者更好的了解这个仓库存放的东西是什么，都有哪些功能作用，可以用来做什么。</p><h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><p>转化这个用途，就不太常见了，它主要是把markdown文件转化为ppt,word等文件文档格式。用于学术研究，数据计算等领域。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>标题</li><li>文本</li><li>图片</li><li>链接</li><li>列表</li><li>表格</li><li>代码</li></ul><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在markdown的语法规则中，标题是用 # 号来标记的，一共有六级，分别是1-6类似于html的标题标签。# 号从大到小，内容从大到小，# 号越多，级别越小，内容越详细。</p><p>语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br><span class="line">#### 标题4</span><br><span class="line">##### 标题5</span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure></p><p>下面是效果展示：</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>文本也是markdown的特色之一。包括粗体，斜体，删除，引用，分割线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.粗体用两个*号包围内容。  </span><br><span class="line">2.斜体用一对*号包围内容。   </span><br><span class="line">3.删除用一对两个波浪线表示  </span><br><span class="line">4.引用是用大于号来表示，大于号越多，程度越深。  </span><br><span class="line">5.分割线是用来区分各段落的不同内容的。</span><br></pre></td></tr></table></figure><p>下面是效果展示。</p><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><p><del>我是删除内容</del></p><blockquote><p> 我是引用的内容</p></blockquote><blockquote><blockquote><p>我是引用的内容</p></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>我是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote><hr><p>我是分割线</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>说明图片使用最前面一个英文叹号，中间是方括号括起来，写说明，后面是一个花括号，写图片地址。</p><p><strong>语法</strong>：<code>![我是图片](xxx.jpg)</code></p><p>这样就是表示一个图片。</p><p>例如：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.jpg" alt="百度" title="">                </div>                <div class="image-caption">百度</div>            </figure></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接的使用方法和图片有些类似，就是去掉了叹号，后面的都不变，前面还是方括号，用来链接地址文字说明，后面是花括号，用于链接的网络地址。</p><p><strong>语法</strong>： <code>[链接说明](http://www.example.com)</code></p><p>例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是用来展示要点，一列一列显示内容，用于内容比较多的时候使用。</p><p><strong>语法：</strong>  </p><ol><li>无序列表：<code>+</code>和<code>-</code>。<code>+</code>就是一级列表，<code>-</code>就是二级列表。</li><li>有序列表：用数字加点，要空格。</li></ol><p>例如：</p><p>这是无序列表。</p><ul><li>水果<ul><li>香蕉</li><li>苹果</li><li>葡萄</li></ul></li><li>蔬菜</li><li>谷物</li><li>天气</li></ul><p>这是有序列表。</p><ol><li>水果</li><li>蔬菜</li><li>谷物</li><li>天气</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是用于展示某一个统计内容的，范围比较广。</p><p>语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">两点是左右，点在左边就文字居左。</span><br></pre></td></tr></table></figure></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序号|姓名|成绩|排名</span><br><span class="line">--|:--:|--:|--</span><br><span class="line">1|张三|98|优秀</span><br><span class="line">2|李四|46|不及格</span><br><span class="line">3|王五|63|合格</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>序号</th><th style="text-align:center">姓名</th><th style="text-align:right">成绩</th><th>排名</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">张三</td><td style="text-align:right">98</td><td>优秀</td></tr><tr><td>2</td><td style="text-align:center">李四</td><td style="text-align:right">46</td><td>不及格</td></tr><tr><td>3</td><td style="text-align:center">王五</td><td style="text-align:right">63</td><td>合格</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>可以用代码或者代码块来写代码，是广大程序员必爱之物。</p><p><strong>语法：</strong> </p><ol><li><p>两个斜点表示一个代码条，并且高亮显示；</p></li><li><p>三个斜点一排，排成两排，中间写点内容，就是代码块，用来展示很多段代码。你可以在第一排旁边写上你要写代码的内容类型，比如：<code>html</code>,<code>css</code>,<code>javascript</code>或<code>js</code>,<code>php</code>等等都可以广泛的支持各种标记、编程语言。</p></li></ol><p>效果如下：</p><ul><li>代码条</li></ul><p>例如：<code>css</code></p><ul><li>代码块</li></ul><p>例如：这是一段html标记语言代码块。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Markdown学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Markdown<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎学习markdown课程。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>例如：这是一段css标记语言代码块。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如：这是一段js标记语言代码块。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'你好，欢迎学习markdown教程'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><code>Markdown</code>是一门非常不错的，值得每个人学习的文本编辑器都支持的标记语法的语言，希望每个人都能学会，这里我只是把我日常写作中常用的做了一个总结汇总，都某时记不得的时候，再来回顾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;已经很久没有写过文章了，感觉这个冬天过的非常寒冷，自己平时工作也比较忙，所以没有更新文章。今天正好有时间，就想写点东西，为生活的自己，为远方的家人，增添一些精彩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍
      
    
    </summary>
    
      <category term="标记语言" scheme="https://gitguanqi.github.io/categories/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="markdown" scheme="https://gitguanqi.github.io/tags/markdown/"/>
    
      <category term="文本编辑" scheme="https://gitguanqi.github.io/tags/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>雅虎军规总结</title>
    <link href="https://gitguanqi.github.io/2018-11-18/yahoo-rules/"/>
    <id>https://gitguanqi.github.io/2018-11-18/yahoo-rules/</id>
    <published>2018-11-18T14:16:21.000Z</published>
    <updated>2019-01-16T02:58:31.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：雅虎军规是雅虎的开发人员在总结了网站的不合理部分后，提出的优化网站性能提高的一套方法规则，非常适合初学者绕过这些坎。这篇博文，是我在网络上搜集的一些关于雅虎军规的内容，图片归原作者所有，总结一起，供大家参考使用，希望对你们以后的开发过程中有所帮助。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_logo.jpg" alt="http" title="">                </div>                <div class="image-caption">http</div>            </figure><h1 id="1-尽可能的减少http请求数"><a href="#1-尽可能的减少http请求数" class="headerlink" title="1.尽可能的减少http请求数"></a>1.尽可能的减少http请求数</h1><p><strong>HTTP</strong>：从客户端到服务器端的请求消息。包括消息首行中，对资源的请求方法资源的标识符以及使用的协议。</p><p><strong>请求过程</strong>：当你打开网页的时候，你所看到的文字，图片，多媒体，这一切内容，都是你从服务器获取的，每一个内容的获取，就是一个http请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules01.png" alt="http" title="">                </div>                <div class="image-caption">http</div>            </figure><h1 id="2-使用CDN（内容分发网络）"><a href="#2-使用CDN（内容分发网络）" class="headerlink" title="2.使用CDN（内容分发网络）"></a>2.使用CDN（内容分发网络）</h1><p><strong>CDN</strong>：内容分发网络，意思就是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules02.png" alt="CDN" title="">                </div>                <div class="image-caption">CDN</div>            </figure><p><strong>通俗来说</strong>：就是在离你最近的地方，放置一台性能好、链接顺畅的副本服务器，让你能够以最近的距离，最快的速度获取内容。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules03.png" alt="CDN" title="">                </div>                <div class="image-caption">CDN</div>            </figure><h1 id="3-添加Expire-Cache-Control头"><a href="#3-添加Expire-Cache-Control头" class="headerlink" title="3.添加Expire/Cache-Control头"></a>3.添加Expire/Cache-Control头</h1><p><strong>Expire头</strong>：内容是一个时间值，值就是资源在本地的过期时间，存在本地；在本地缓存阶段，找到一个对应的资源值，当前时间还没有超过资源的过期时间，就直接使用这个资源，不会发送http请求。</p><p><strong>Cache-Control头C</strong>：是http协议中常用的头部之一，负责页面的缓存机制，如果该头部指示缓存，缓存的内容也会存在本地，操作流程和expire相似，但也有不同的地方，Cache-Control有更多的选项，而且有更多的处理方式。</p><h1 id="4-启用Gzip压缩"><a href="#4-启用Gzip压缩" class="headerlink" title="4.启用Gzip压缩"></a>4.启用Gzip压缩</h1><p>看图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules04.png" alt="Gzip压缩" title="">                </div>                <div class="image-caption">Gzip压缩</div>            </figure></p><p>举个例子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules05.png" alt="Gzip压缩" title="">                </div>                <div class="image-caption">Gzip压缩</div>            </figure></p><h1 id="5-将css放在页面最上面"><a href="#5-将css放在页面最上面" class="headerlink" title="5.将css放在页面最上面"></a>5.将css放在页面最上面</h1><p><strong>CSS</strong>：CSS，就是层叠样式表。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules06.png" alt="CSS01" title="">                </div>                <div class="image-caption">CSS01</div>            </figure><p>为了提高游览器加载速度，建议放在<code>html</code>的<code>head</code>标签内。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules07.png" alt="CSS02" title="">                </div>                <div class="image-caption">CSS02</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules08.png" alt="CSS03" title="">                </div>                <div class="image-caption">CSS03</div>            </figure><h1 id="6-将script放在页面最下面"><a href="#6-将script放在页面最下面" class="headerlink" title="6.将script放在页面最下面"></a>6.将script放在页面最下面</h1><p><strong>页面DOM加载顺序</strong>：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules09.png" alt="js01" title="">                </div>                <div class="image-caption">js01</div>            </figure></p><p>为了顺利加载各种资源，把js放在页面最下面，可以正常运行脚本，也为获取DOM元素更流畅。</p><h1 id="7-避免在CSS中使用Expressions"><a href="#7-避免在CSS中使用Expressions" class="headerlink" title="7.避免在CSS中使用Expressions"></a>7.避免在CSS中使用Expressions</h1><p><strong>定义</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules10.png" alt="CSS—Expressions" title="">                </div>                <div class="image-caption">CSS—Expressions</div>            </figure><p>例子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules11.png" alt="CSS—Expressions" title="">                </div>                <div class="image-caption">CSS—Expressions</div>            </figure></p><h1 id="8-把js和css文件放到外部文件中"><a href="#8-把js和css文件放到外部文件中" class="headerlink" title="8.把js和css文件放到外部文件中"></a>8.把js和css文件放到外部文件中</h1><p><strong>情况1</strong>：写在页面内，如果只是的单独一个页面使用js和css文件，可以写在页面里面；还有就是不经常访问的页面；并且脚本和样式很少。<br>这样写可以：</p><ul><li>减少页面请求</li><li>提升页面渲染速度</li></ul><p><strong>情况2</strong>：单独提取，如果是大量页面复用，那就需要引入js和css文件。<br>这样写可以：</p><ul><li>提高js和css的复用性</li><li>缩小页面体积</li><li>提高了js的css的可维护性</li></ul><h1 id="9-减少DNS查询"><a href="#9-减少DNS查询" class="headerlink" title="9.减少DNS查询"></a>9.减少DNS查询</h1><p><strong>DNS</strong>：（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules12.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><p><strong>缓存时间对比</strong>:</p><ul><li>当缓存时间长时：减少DNS的重复查找，节省时间。</li><li>当缓存时间短时：及时的检测网站服务器的变化，保证正确性。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules13.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><p><strong>域名</strong>：（Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。</p><p>可以使用单域和多域</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules14.png" alt="DNS" title="">                </div>                <div class="image-caption">DNS</div>            </figure><h1 id="10-压缩JavaScript和Css"><a href="#10-压缩JavaScript和Css" class="headerlink" title="10.压缩JavaScript和Css"></a>10.压缩JavaScript和Css</h1><p><strong>方法</strong>：</p><ul><li>去除不必要的空白符，格式符，注释符。</li><li>简写方法名，参数名压缩js脚本。</li></ul><p>例如：jquery</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules15.png" alt="压缩JavaScript和Css" title="">                </div>                <div class="image-caption">压缩JavaScript和Css</div>            </figure><p><em>建议：</em>：在网站上线项目前，将JavaScript和Css都进行压缩，使线上版本是最轻量级的，大幅提升网站性能。</p><h1 id="11-避免重定向"><a href="#11-避免重定向" class="headerlink" title="11.避免重定向"></a>11.避免重定向</h1><p><strong>定义</strong>： 原始请求被重新转向了其他请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules16.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><p><em>状态码</em>：</p><ul><li>301（Moved Permanently）：被移动到了另外的位置。</li><li>302 Found：被找到了，不在原始位置，临时重定向。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules17.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><p>为什么避免重定向：多了一次请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules18.png" alt="避免重定向" title="">                </div>                <div class="image-caption">避免重定向</div>            </figure><h1 id="12-移除重复的脚步"><a href="#12-移除重复的脚步" class="headerlink" title="12.移除重复的脚步"></a>12.移除重复的脚步</h1><p>例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移除重复的脚步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> number = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 引用1次 正常 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 引用2次 不正常 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js dom</span></span><br><span class="line">number++;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).value = number;</span><br></pre></td></tr></table></figure><h1 id="13-配置实体标签（ETag）"><a href="#13-配置实体标签（ETag）" class="headerlink" title="13.配置实体标签（ETag）"></a>13.配置实体标签（ETag）</h1><p><strong>定义</strong>：使用特殊的字符串来标识某个请求资源版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules19.png" alt="配置实体标签（ETag）" title="">                </div>                <div class="image-caption">配置实体标签（ETag）</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules20.png" alt="配置实体标签（ETag）" title="">                </div>                <div class="image-caption">配置实体标签（ETag）</div>            </figure><p>如果本地版本游览器一样，就使用本地的缓存文件，并且会返回304。</p><h1 id="14-使用Ajax缓存"><a href="#14-使用Ajax缓存" class="headerlink" title="14.使用Ajax缓存"></a>14.使用Ajax缓存</h1><p><strong>定义</strong>：即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules21.png" alt="使用Ajax缓存" title="">                </div>                <div class="image-caption">使用Ajax缓存</div>            </figure><p><strong>方法</strong>：get和post</p><ul><li>POST：每次都执行，不被缓存。</li><li>get:同一地址不重复执行，可以被缓存。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/yh_rules22.png" alt="get和post" title="">                </div>                <div class="image-caption">get和post</div>            </figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这是我第一次总结前人的经验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：雅虎军规是雅虎的开发人员在总结了网站的不合理部分后，提出的优化网站性能提高的一套方法规则，非常适合初学者绕过这些坎。这篇博文，是我在网络上搜集的一些关于雅虎军规的内容，图片归原作者所有，总结一起，供大家参考使用，希望对你们以后的开发过程中有所
      
    
    </summary>
    
      <category term="前端规范" scheme="https://gitguanqi.github.io/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="雅虎军规" scheme="https://gitguanqi.github.io/tags/%E9%9B%85%E8%99%8E%E5%86%9B%E8%A7%84/"/>
    
      <category term="前端规范" scheme="https://gitguanqi.github.io/tags/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
      <category term="性能优化" scheme="https://gitguanqi.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>git配置教程</title>
    <link href="https://gitguanqi.github.io/2018-11-18/git-config/"/>
    <id>https://gitguanqi.github.io/2018-11-18/git-config/</id>
    <published>2018-11-18T14:16:21.000Z</published>
    <updated>2019-01-16T03:21:08.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-配置ssh"><a href="#一-配置ssh" class="headerlink" title="一.配置ssh"></a>一.配置ssh</h2><h3 id="1-检查本机是否有ssh-key设置"><a href="#1-检查本机是否有ssh-key设置" class="headerlink" title="1.检查本机是否有ssh key设置"></a>1.检查本机是否有ssh key设置</h3><p>如果没有则提示： No such file or directory<br>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm删除所有文件）</p><h3 id="2-使用Git-Bash生成新的ssh-key"><a href="#2-使用Git-Bash生成新的ssh-key" class="headerlink" title="2.使用Git Bash生成新的ssh key"></a>2.使用Git Bash生成新的ssh key</h3><p>$ cd ~  #保证当前路径在”~”下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;  #建议填写自己真实有效的邮箱地址</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车</span><br><span class="line">Enter passphrase (empty for no passphrase):   #输入密码（可以为空）</span><br><span class="line">Enter same passphrase again:   #再次确认密码（可以为空）</span><br><span class="line">Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥</span><br><span class="line">Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. #生成的公钥</span><br><span class="line">The key fingerprint is:</span><br><span class="line">e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 xxxxxx@yy.com</span><br><span class="line">//本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。</span><br><span class="line">//可生成ssh key自定义名称的密钥，默认id_rsa。</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; -f ~/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</span><br></pre></td></tr></table></figure></p><h2 id="3-添加ssh-key到GItHub"><a href="#3-添加ssh-key到GItHub" class="headerlink" title="3.添加ssh key到GItHub"></a>3.添加ssh key到GItHub</h2><h3 id="3-1-登录GitHub系统；"><a href="#3-1-登录GitHub系统；" class="headerlink" title="3.1 登录GitHub系统；"></a>3.1 登录GitHub系统；</h3><p>  点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/git03.png" alt="key" title="">                </div>                <div class="image-caption">key</div>            </figure><h3 id="3-2-复制id-rsa-pub的公钥内容"><a href="#3-2-复制id-rsa-pub的公钥内容" class="headerlink" title="3.2 复制id_rsa.pub的公钥内容"></a>3.2 复制id_rsa.pub的公钥内容</h3><p>1) 进入c:/Users/xxxx_000/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。<br>2) Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“AddKey”。</p><h3 id="4-配置账户"><a href="#4-配置账户" class="headerlink" title="4.配置账户"></a>4.配置账户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “your_username” #设置用户名</span><br><span class="line">$ git config --global user.email “your_registered_github_Email” #设置邮箱地址(建议用注册giuhub的邮箱)</span><br></pre></td></tr></table></figure><h3 id="5-测试ssh-keys是否设置成功"><a href="#5-测试ssh-keys是否设置成功" class="headerlink" title="5.测试ssh keys是否设置成功"></a>5.测试ssh keys是否设置成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &apos;github.com(192.30.252.129)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continueconnecting (yes/no)? yes #确认你是否继续联系，输入yes</span><br><span class="line">Warning: Permanently added&apos;github.com,192.30.252.129&apos; (RSA) to the list of known hosts.</span><br><span class="line">Enter passphrase for key&apos;/c/Users/xxxx_000/.ssh/id_rsa&apos;: #生成sshkye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。</span><br><span class="line">Hi xxx! You&apos;ve successfullyauthenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。</span><br></pre></td></tr></table></figure><h2 id="二、Github新建项目"><a href="#二、Github新建项目" class="headerlink" title="二、Github新建项目"></a>二、Github新建项目</h2><h3 id="1-Github新建项目"><a href="#1-Github新建项目" class="headerlink" title="1.Github新建项目"></a>1.Github新建项目</h3><p>点击按钮</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/git01.png" alt="新建" title="">                </div>                <div class="image-caption">新建</div>            </figure><h3 id="2-注意项目名（必须是：github的用户名-github-io）"><a href="#2-注意项目名（必须是：github的用户名-github-io）" class="headerlink" title="2.注意项目名（必须是：github的用户名.github.io）"></a>2.注意项目名（必须是：github的用户名.github.io）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gitguanqi.github.io/img/blogimg/git02.png" alt="新建" title="">                </div>                <div class="image-caption">新建</div>            </figure><h3 id="3-将项目clone到本地"><a href="#3-将项目clone到本地" class="headerlink" title="3.将项目clone到本地"></a>3.将项目clone到本地</h3><p><code>$ git clone https://github.com/&lt;你的用户名&gt;/&lt;仓库名字&gt;.git</code></p><p>然后输入命令，回车，等待clone完成。</p><h3 id="4-将index-html推送到远程github仓库中"><a href="#4-将index-html推送到远程github仓库中" class="headerlink" title="4.将index.html推送到远程github仓库中"></a>4.将index.html推送到远程github仓库中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;这里是注释信息，自己写&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="三-写在最后"><a href="#三-写在最后" class="headerlink" title="三.写在最后"></a>三.写在最后</h2><p>git的配置就到这里。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-配置ssh&quot;&gt;&lt;a href=&quot;#一-配置ssh&quot; class=&quot;headerlink&quot; title=&quot;一.配置ssh&quot;&gt;&lt;/a&gt;一.配置ssh&lt;/h2&gt;&lt;h3 id=&quot;1-检查本机是否有ssh-key设置&quot;&gt;&lt;a href=&quot;#1-检查本机是否有ssh-ke
      
    
    </summary>
    
      <category term="git" scheme="https://gitguanqi.github.io/categories/git/"/>
    
    
      <category term="github" scheme="https://gitguanqi.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>前端杂谈</title>
    <link href="https://gitguanqi.github.io/2018-11-18/front-talk-one/"/>
    <id>https://gitguanqi.github.io/2018-11-18/front-talk-one/</id>
    <published>2018-11-18T13:16:21.000Z</published>
    <updated>2019-01-16T03:19:00.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-故事简介"><a href="#一-故事简介" class="headerlink" title="一.故事简介"></a>一.故事简介</h2><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h3><p>今天，我想讲一讲有关前端的一些趣事。首先介绍一下我吧，我叫观奇笔记，内容更新其实不算多，主要是是我工作比较忙，没有时间去更新。</p><h3 id="2-行业态势"><a href="#2-行业态势" class="headerlink" title="2.行业态势"></a>2.行业态势</h3><p>前端技术，作为一门新兴的技术，已经火了好几年了，现在已经进入了一个瓶颈期，就是需求量还是会不断地增加，但是要求肯定会提高的，不会是以前的蛮荒时代，见一个前端就招进去了，而是会不断的筛选，淘汰技术差的，留下技术好的，一个大浪淘沙的时代。</p><h2 id="二-播种期"><a href="#二-播种期" class="headerlink" title="二.播种期"></a>二.播种期</h2><p>好了，开始言归正传。我来讲一讲我的前端生涯之路，也算是对之前的一些总结吧。</p><h3 id="1-高中时代"><a href="#1-高中时代" class="headerlink" title="1.高中时代"></a>1.高中时代</h3><p>我现在脑海中清晰的记得，我上高三的时候，我们的微机课老师在教室的黑板上写了一段代码。我还能回忆起来，大概就是以下这段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-讲课感受"><a href="#2-讲课感受" class="headerlink" title="2.讲课感受"></a>2.讲课感受</h3><p>我就被这个神奇的代码所吸引住了，当时老师还边说，边讲，边在黑板上用白色粉笔头画着，其实就是用粉笔头写代码。我当时就感觉这玩意真好，我要了解它，学会它。自此，想要学习html代码的种子便在我心中种下了，直到以后它生根，发芽，开花，直到结果。</p><h2 id="三-萌芽期"><a href="#三-萌芽期" class="headerlink" title="三.萌芽期"></a>三.萌芽期</h2><h3 id="1-无缘计算机"><a href="#1-无缘计算机" class="headerlink" title="1.无缘计算机"></a>1.无缘计算机</h3><p>上了大学以后，本来说是想报考计算机专业，但是没想到人招满了，我便被安排到了第二个志愿–电子商务，我感觉电子商务还可以，就是做购物网站的，还可以继续我的代码编写，我就欣然接受了这个专业，但是学开就后悔了，里面教的html少，也就是学习Dreamweaver（现在想想真是感觉太搞笑了，哈哈！），asp，商务一类的课程非常多，比如市场营销，商务谈判，管理学，经营企业，不管怎么不好，还是学点，以后会用到的。</p><h3 id="2-冲破牢笼"><a href="#2-冲破牢笼" class="headerlink" title="2.冲破牢笼"></a>2.冲破牢笼</h3><p>我后来就是自己买书，一点一点的学习web前端，其实那时候还不能叫前端，只能算作一个网页开发师。写一些简单的网页结构，一些简单的样式。自己没有电脑，就去学校的机房学习，打开电脑，打开记事本，就可以学习了，按照书上的，网上的教程学习，一点点的学习。每练习一个例子，就用记事本保存起来，存成Unicode格式或者utf-8格式的，可以在游览器显示的那种，后缀就是.html或者.htm就可以了，最后，在游览器里面查看效果，看到自己写的代码能够被游览器引擎解析然后展现在游览器的窗口里面，顿时感觉心中非常开心。</p><h2 id="四-写在最后"><a href="#四-写在最后" class="headerlink" title="四.写在最后"></a>四.写在最后</h2><p>好了，今天就讲到这里，以后陆续会和大家分享我的前端成长之路的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-故事简介&quot;&gt;&lt;a href=&quot;#一-故事简介&quot; class=&quot;headerlink&quot; title=&quot;一.故事简介&quot;&gt;&lt;/a&gt;一.故事简介&lt;/h2&gt;&lt;h3 id=&quot;1-起源&quot;&gt;&lt;a href=&quot;#1-起源&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="前端杂谈" scheme="https://gitguanqi.github.io/categories/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="前端杂谈" scheme="https://gitguanqi.github.io/tags/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>git工具命令使用教程</title>
    <link href="https://gitguanqi.github.io/2018-09-25/git-tool-command/"/>
    <id>https://gitguanqi.github.io/2018-09-25/git-tool-command/</id>
    <published>2018-09-25T09:30:21.000Z</published>
    <updated>2019-01-16T03:13:25.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个学习git-bash以及命令的教程！</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add "></a>git add <filename></filename></h3><p><strong>含义</strong>：这是将文件从本地文件夹提交到git storage (暂存区)。</p><p>例如：<code>git add test.txt</code></p><h3 id="git-commit-m-““"><a href="#git-commit-m-““" class="headerlink" title="git commit -m ““"></a>git commit -m “<message>“</message></h3><p><strong>含义</strong>：这是将暂存区的文件提交到当前分支(master)。</p><p>例如： <code>git commit -m &quot;add files&quot;</code></p><h3 id="git-pull-origin"><a href="#git-pull-origin" class="headerlink" title="git pull origin "></a>git pull origin <branch name=""></branch></h3><p><strong>含义</strong>： 这是将远程仓库的git文件拉到本地。</p><p>例如：<code>git pull origin master</code></p><h3 id="git-push-origin"><a href="#git-push-origin" class="headerlink" title="git push origin "></a>git push origin <branch name=""></branch></h3><p><strong>含义</strong>： 这是将本地分支的git文件推送到远程仓库。</p><p>例如：<code>git push origin master</code></p><h2 id="分支（master）"><a href="#分支（master）" class="headerlink" title="分支（master）"></a>分支（master）</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p><code>git branch &lt;分支名字&gt;</code></p><p>例如：<code>git branch dev</code></p><h3 id="切换到指定分支"><a href="#切换到指定分支" class="headerlink" title="切换到指定分支"></a>切换到指定分支</h3><p><code>git checkout dev</code></p><h3 id="创建并且切换到指定分支"><a href="#创建并且切换到指定分支" class="headerlink" title="创建并且切换到指定分支"></a>创建并且切换到指定分支</h3><p><code>git branch -b &lt;分支名字&gt;</code></p><p>例如：<code>git branch -b dev</code></p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p><code>git branch -d &lt;分支名字&gt;</code></p><p>例如：<code>git branch -d dev</code></p><h3 id="强制删除分支"><a href="#强制删除分支" class="headerlink" title="强制删除分支"></a>强制删除分支</h3><p><code>git branch -D &lt;分支名字&gt;</code></p><p>例如：<code>git branch -D dev</code></p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p><code>git push origin -D &lt;分支名字&gt;</code></p><p>例如：<code>git push origin -D dev</code></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p><code>git merge &lt;分支名称&gt;</code></p><p>例如：<code>git merge dev</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p><code>git tag &lt;标签名字&gt;</code></p><p>例如: <code>git tag v0.1</code></p><h3 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h3><p><code>git tag</code></p><h3 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a>查看标签信息</h3><p><code>git show v0.1</code></p><h3 id="创建带有说明的标签"><a href="#创建带有说明的标签" class="headerlink" title="创建带有说明的标签"></a>创建带有说明的标签</h3><p><code>git tag -a v0.1 -m &quot;add tags&quot;</code></p><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p><code>git tag -d &lt;标签名字&gt;</code></p><h3 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h3><ul><li>推送本地全部标签：<code>git push origin --tags</code></li><li>推送特定标签：<code>git push origin v0.1</code></li></ul><h3 id="删除远程仓库标签"><a href="#删除远程仓库标签" class="headerlink" title="删除远程仓库标签"></a>删除远程仓库标签</h3><p><code>git push origin :refs/tags/v0.1</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="忽略其他文件"><a href="#忽略其他文件" class="headerlink" title="忽略其他文件"></a>忽略其他文件</h3><blockquote><p>有时候我们并不希望一些东西在我们的提交内容里面，比如node_moundle</p></blockquote><p>在文件夹下面创建<code>.gitignore</code>就可以忽略不希望提交的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># windows</span><br><span class="line">Desktop.ini</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这一期的git讲解就到这里。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一个学习git-bash以及命令的教程！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="git" scheme="https://gitguanqi.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://gitguanqi.github.io/tags/git/"/>
    
      <category term="git-bash" scheme="https://gitguanqi.github.io/tags/git-bash/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础教程(三)</title>
    <link href="https://gitguanqi.github.io/2018-05-10/vue-use-three/"/>
    <id>https://gitguanqi.github.io/2018-05-10/vue-use-three/</id>
    <published>2018-05-10T00:42:21.000Z</published>
    <updated>2019-01-16T03:16:05.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hello,大家好！时隔一天，我又回来了。因为一些事情停了。经过前两节，大家应该对vuejs有了一些了解。今天继续讲解vuejs。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>插值</li><li>指令</li><li>缩写</li></ul><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><blockquote><p>这是数据绑定最常见的形式，使用的Mustache”语法 (双大括号) 。</p></blockquote><p>例如：<code>&lt;span&gt;这个将不会改变: &lt;/span&gt;</code></p><h4 id="原生html内容"><a href="#原生html内容" class="headerlink" title="原生html内容"></a>原生html内容</h4><p>这个你需要使用<code>v-html</code>来实现。</p><p>例如： </p><p>1.<code>&lt;p&gt;这是html内容：&lt;/p&gt;</code></p><p>2.<code>&lt;p v-html=&quot;str&quot;&gt;&lt;/p&gt;</code></p><p><strong>注意</strong>：你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><blockquote><p>指令 (Directives) 是带有 v- 前缀的特殊特性，响应式的作用于DOM。</p></blockquote><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p><strong>含义</strong>：这个是根据传入的值来决定是否移除绑定的元素，它的值是<code>true</code>或者<code>false</code></p><p>例如：<code>&lt;p v-if=&quot;true&quot;&gt;我是vue&lt;/p&gt;</code></p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p><strong>修饰符</strong>：以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p><p><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;表单内容&lt;/form&gt;</code></p><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>v- 作为一种识别特性，常常会缩写，以便提高代码效率。</p><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>v-on是绑定元素要触发的各种事件的，可以缩写成<code>@&lt;事件名&gt;=&quot;&lt;触发的函数名&gt;&quot;</code></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.原样：</span><br><span class="line">&lt;button v-on:click=&quot;checkForm&quot;&gt;&lt;/button&gt;</span><br><span class="line">//2.缩写：</span><br><span class="line">&lt;button @click=&quot;checkForm&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>v-bind是绑定元素属性的一种指令，可以缩写成<code>:&lt;属性名&gt;=&quot;&lt;属性值&gt;&quot;</code></p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.原样： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.缩写： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>今天虽然只讲了一点，但贵在积累，积少成多，每天学习一点，相信总有一天能够技压群雄，加油！幸福生活是奋斗出来的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;hello,大家好！时隔一天，我又回来了。因为一些事情停了。经过前两节，大家应该对vuejs有了一些了解。今天继续讲解vuejs。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="js框架" scheme="https://gitguanqi.github.io/categories/js%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vuejs" scheme="https://gitguanqi.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础教程(二)</title>
    <link href="https://gitguanqi.github.io/2018-05-08/vue-use-two/"/>
    <id>https://gitguanqi.github.io/2018-05-08/vue-use-two/</id>
    <published>2018-05-08T02:42:21.000Z</published>
    <updated>2019-01-16T03:17:56.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天一起来和大家探讨vue基础知识点，主要是一些基本用法，只有打好扎实的基础，才能在以后vue.js开发过程中少走弯路。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>创建vue实例</li><li>数据绑定</li><li>方法</li></ul><h2 id="一-创建vue实例"><a href="#一-创建vue实例" class="headerlink" title="一.创建vue实例"></a>一.创建vue实例</h2><ul><li>首先引入vue.js文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue(2)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后实例化一个vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue(2)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>最后定义vue的管理边界</li></ul><p><strong>注意</strong>： 如果你不定义管理边界，就可能无法应用vue中的属性和方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue(2)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里写vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-数据绑定"><a href="#二-数据绑定" class="headerlink" title="二.数据绑定"></a>二.数据绑定</h2><p><strong>数据</strong>： 这里的数据就是你要渲染到页面中的值,这个数据发生变化，视图中的数据也会发生变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue(2)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里写vue.js --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"str"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                str: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-方法"><a href="#三-方法" class="headerlink" title="三.方法"></a>三.方法</h2><p><strong>方法</strong>： 就是js中的函数和事件监听。</p><p>例如：弹出一个信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue(2)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里写vue.js --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"str"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"alertInfo"</span>&gt;</span>弹出信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                str: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                alertInfo () &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">'这就是vue'</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-写在最后"><a href="#四-写在最后" class="headerlink" title="四.写在最后"></a>四.写在最后</h2><p>今天虽然只讲了一点，但贵在积累，积少成多，每天学习一点，相信总有一天能够技压群雄，加油！幸福生活是奋斗出来的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天一起来和大家探讨vue基础知识点，主要是一些基本用法，只有打好扎实的基础，才能在以后vue.js开发过程中少走弯路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="js框架" scheme="https://gitguanqi.github.io/categories/js%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vuejs" scheme="https://gitguanqi.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础教程(一)</title>
    <link href="https://gitguanqi.github.io/2018-05-06/vue-use-one/"/>
    <id>https://gitguanqi.github.io/2018-05-06/vue-use-one/</id>
    <published>2018-05-06T13:54:21.000Z</published>
    <updated>2019-01-16T03:17:18.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>哈喽，大家好！今天给大家继续讲解vue的知识点。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>引入vue.js文件</li><li>声明式渲染</li></ul><h2 id="一-引入vue-js"><a href="#一-引入vue-js" class="headerlink" title="一.引入vue.js"></a>一.引入vue.js</h2><ul><li>下载vue.js文件：点击<a href="https://cdn.jsdelivr.net/npm/vue/dist/vue.js" target="_blank" rel="noopener">下载</a></li></ul><p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></p><ul><li>CDN线上，引入地址：<a href="https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.common.js" target="_blank" rel="noopener">https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.common.js</a></li></ul><p><code>&lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.common.js&quot;&gt;&lt;/script&gt;</code></p><ul><li>新建html文件，在head标签内引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>引入vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            //内容</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        &#123;&#123; 1+2 &#125;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-声明式渲染"><a href="#二-声明式渲染" class="headerlink" title="二.声明式渲染"></a>二.声明式渲染</h2><p>两个花括号中间可以写表达式，判断，数据类型，就是不能写循环。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>引入vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            &#123;&#123; msg &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">                data: &#123;</span></span><br><span class="line"><span class="javascript">                    msg: <span class="string">'111'</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>今天虽然只讲了一点，但贵在积累，积少成多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;哈喽，大家好！今天给大家继续讲解vue的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引入vue
      
    
    </summary>
    
      <category term="js框架" scheme="https://gitguanqi.github.io/categories/js%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vuejs" scheme="https://gitguanqi.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://gitguanqi.github.io/2018-05-05/dataset-description/"/>
    <id>https://gitguanqi.github.io/2018-05-05/dataset-description/</id>
    <published>2018-05-05T06:30:21.000Z</published>
    <updated>2019-01-16T03:10:30.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote><p>数据元素：数据的<strong>基本单位</strong>，每一个需要处理的<strong>对象</strong>都可以抽象成<strong>数据元素</strong>，简称元素。</p></blockquote><h2 id="数据结构：包含数据和结构。"><a href="#数据结构：包含数据和结构。" class="headerlink" title="数据结构：包含数据和结构。"></a>数据结构：包含数据和结构。</h2><ul><li>数据：是需要处理的数据元素的集合，一般来说这些数据元素，具有某个共同的特征。<br>例如：方向（东南西北）</li><li><p>结构：就是关系，即集合中各个数据元素之间存在的某种关系（或联系）。<br>1.线性结构，2.树形结构，3.图状结构，4.集合。</p></li><li><p>数据元素之间的关系用前件和后件来描述。<br>例如：连长是排长的后件，排长是连长的前件。</p></li><li><p>前后件关系是数据元素之间最基本的关系。</p></li><li>数据结构是指相互有关联的数据元素的集合。</li><li>数据是有结构的数据，结构是有数据之间关系决定的。</li></ul><h2 id="数据元素有逻辑和关系。"><a href="#数据元素有逻辑和关系。" class="headerlink" title="数据元素有逻辑和关系。"></a>数据元素有逻辑和关系。</h2><h2 id="数据结构逻辑结构和存储结构"><a href="#数据结构逻辑结构和存储结构" class="headerlink" title="数据结构逻辑结构和存储结构"></a>数据结构逻辑结构和存储结构</h2><h2 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h2><ul><li><p>数据的逻辑结构指的是数据元素之间的逻辑关系（前后件关系）的数据结构。<br>B=(D,R);  B = 数据结构  D = 数据元素的集合  R = D上关系的集合。</p><p>B = (D,R)<br>D = {早餐，午餐，晚餐}<br>R = {(早餐，午餐),(午餐，晚餐)}</p></li></ul><h2 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h2><p> <strong>数据的存储结构</strong>：又称数据的物理结构，是数据的逻辑结构在计算机存储空间中的存放方式。</p><ul><li><p>顺序存储结构：逻辑上相邻的数据元素，存储在物理上相邻的存储单元里。<br>  200 k1<br>  201 k2<br>  202 k3<br>  203 k4<br>  204 k5</p></li><li><p>链式存储结构：每个节点中至少包含一个指针域，用指针来体现数据元素之间逻辑上的联       系。</p><p>  Head            Key  Info<br>  200  –&gt;  200   k1    204</p><pre><code>201202   k3    203 203   k4    207204   k2    202205206207   k5     ^链式存储的线性表</code></pre></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这是计算机基础知识，最普通的一个概念。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;数据元素：数据的&lt;strong&gt;基本单位&lt;/strong&gt;，每一个需要处理的&lt;strong&gt;对象&lt;
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://gitguanqi.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构" scheme="https://gitguanqi.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>初识webpack</title>
    <link href="https://gitguanqi.github.io/2018-04-01/front-talk-three/"/>
    <id>https://gitguanqi.github.io/2018-04-01/front-talk-three/</id>
    <published>2018-04-01T08:07:39.000Z</published>
    <updated>2019-01-16T03:20:38.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天，咱们正式介绍一下前端打包神器，webpack。这是一款非常流行的打包工具，和各种框架都非常搭配。</p></blockquote><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p>大家好！今天我开始分享有关web前端的故事。俗话说：“男怕入错行，女怕嫁错郎”。如果能够进入发展前景比较好的行业是一个不错的选择，对自己以后的成长与发展都会起到很大的作用。虽然说目前还看不出什么，但是相信随着时间的流逝，这个行业会越来越好。而我选择的这个行业，就是互联网行业，属于服务业。而我目前从事的是前端，这个从2015年兴盛起来的职业，目前已经度过了寒冬，正迎来蓬勃的生机。</p><h2 id="二-四个核心概念"><a href="#二-四个核心概念" class="headerlink" title="二.四个核心概念"></a>二.四个核心概念</h2><p>接下来就解释一下这四个核心的概念。</p><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><h3 id="1-入口-entry"><a href="#1-入口-entry" class="headerlink" title="1.入口(entry)"></a>1.入口(entry)</h3><p>入口：所谓入口，就是指示webpack应该使用哪个模块来作为内部依赖的开始，它会根据入口来生成一个bundles文件。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面就是指定入口文件，就是file.js。</p><h3 id="2-输出-output"><a href="#2-输出-output" class="headerlink" title="2.输出(output)"></a>2.输出(output)</h3><p>出口：就是打包输出到哪个文件夹下面去。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面就是指定出口文件dist，文件名称叫dist文件夹下面的这个文件my-first-webpack.bundle.js。</p><h3 id="3-loader"><a href="#3-loader" class="headerlink" title="3.loader"></a>3.loader</h3><p>loader:就是让webpack去处理那些非JavaScript文件，并且导入任何类型的模块，比如css。并且，进行处理。它可以将所有类型的文件，转化为可以直接引用的模块。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义规则</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125; <span class="comment">//解析规则</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 到处配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><p>这个就是，模块打包规则。test,use,就是告诉webpack遇到引用txt文件的，使用raw-loader转化一下。</p><h3 id="4-插件-plugins"><a href="#4-插件-plugins" class="headerlink" title="4.插件(plugins)"></a>4.插件(plugins)</h3><p>这是最后一个核心概念。有时候，前面的不一定处理过来，所以靠扩展插件来提高打包效率是一个非常有效的方法。<br>它可以执行更多复杂的任务，例如：打包优化，压缩，重新定义环境变量等等。</p><p>插件的使用方法见下面的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 通过 npm 安装const webpack = require('webpack'); // 用于访问内置插件const path = require('path');const config = &#123;</span></span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>我们今天先说到这里，下次继续聊webpack。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天，咱们正式介绍一下前端打包神器，webpack。这是一款非常流行的打包工具，和各种框架都非常搭配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="前端杂谈" scheme="https://gitguanqi.github.io/categories/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="webpack" scheme="https://gitguanqi.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>初识vue</title>
    <link href="https://gitguanqi.github.io/2018-02-18/front-talk-two/"/>
    <id>https://gitguanqi.github.io/2018-02-18/front-talk-two/</id>
    <published>2018-02-18T12:57:39.000Z</published>
    <updated>2019-01-16T03:20:25.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-vue行业"><a href="#一-vue行业" class="headerlink" title="一.vue行业"></a>一.vue行业</h2><p>大家好！今天我开始分享有关web前端的故事。俗话说：“男怕入错行，女怕嫁错郎”。如果能够进入发展前景比较好的行业是一个不错的选择，对自己以后的成长与发展都会起到很大的作用。虽然说目前还看不出什么，但是相信随着时间的流逝，这个行业会越来越好。而我选择的这个行业，就是互联网行业，属于服务业。而我目前从事的是前端，这个从2015年兴盛起来的职业，目前已经度过了寒冬，正迎来蓬勃的生机。</p><h2 id="二-vue是什么"><a href="#二-vue是什么" class="headerlink" title="二.vue是什么"></a>二.vue是什么</h2><p>好了，废话不多说，现在就开始进入正题。有很多人看到这里，会禁不住的问，那vue是什么呢？vue是一套基于js写的框架，可以方便轻松的开发spa单页面应用程序。它是由前Google工程师尤雨溪开发的，它解决了开发者开发过程中的四个痛点。</p><h2 id="三-四大痛点"><a href="#三-四大痛点" class="headerlink" title="三.四大痛点"></a>三.四大痛点</h2><h3 id="1-学习门槛低"><a href="#1-学习门槛低" class="headerlink" title="1.学习门槛低"></a>1.学习门槛低</h3><p>第一个就是，使得学习vue的门槛变得非常低，只要你会基础的html和css知识，懂得原生的js，那么恭喜您，已经拿到了学习vue的入场券。这对于web前端的小伙伴们来说是一个非常诱人的东西，你不需要掌握什么高深的技术知识，就可以轻松学习vue知识点。</p><h3 id="2-学习成本低"><a href="#2-学习成本低" class="headerlink" title="2.学习成本低"></a>2.学习成本低</h3><p>当然了，除了学习门槛比较低之外，学习成本也是比较低的，不你需要花费多大的时间，以及金钱。它是一个免费开源的js框架，为开发者提供高效率的开发框架。你需要点击进入它的官网，便可以看见它的开发文档。这套文档感觉非常通俗易懂，只要你仔细阅读，还是可以读懂的。它还提供了脚手架组件化开发工具，只有你下载下来一步步输入几行命令，就可以拥有很不错的开发环境。</p><h3 id="3-覆盖设备广"><a href="#3-覆盖设备广" class="headerlink" title="3.覆盖设备广"></a>3.覆盖设备广</h3><p>第三个就是，它跨设备，基本上各种设备都支持，不论是PC端，还是移动端，亦或者是手机app都可以。这种特点给了使用它的人极大的方便。</p><h3 id="4-跨平台"><a href="#4-跨平台" class="headerlink" title="4.跨平台"></a>4.跨平台</h3><p>第四个就是跨平台，在这里我就一句话概括，既可以开发andriod，也可以开发ios应用。</p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>以上就是web开发的四个痛点，vue都完美解决。我刚开始接触vue的时候，只是知道它是一种区别于MVC模式的MVVM模式。MVVM的本质就是通过数据绑定view和model，数据一旦发生变化，view和model也会发生变化。这种模式使得学习vue非常简单好用！</p><p>我正在行驶在这一条vue大道上，我知道我的方向不变，始终会到达终点的。我始终相信，功夫不负有心人，只要努力坚持，一定会成功！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-vue行业&quot;&gt;&lt;a href=&quot;#一-vue行业&quot; class=&quot;headerlink&quot; title=&quot;一.vue行业&quot;&gt;&lt;/a&gt;一.vue行业&lt;/h2&gt;&lt;p&gt;大家好！今天我开始分享有关web前端的故事。俗话说：“男怕入错行，女怕嫁错郎”。如果能够进入发展前景
      
    
    </summary>
    
      <category term="前端杂谈" scheme="https://gitguanqi.github.io/categories/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="vuejs" scheme="https://gitguanqi.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>node.js常用命令</title>
    <link href="https://gitguanqi.github.io/2017-12-21/node-command/"/>
    <id>https://gitguanqi.github.io/2017-12-21/node-command/</id>
    <published>2017-12-21T07:27:21.000Z</published>
    <updated>2019-01-16T03:03:24.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>验证是否安装node<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$node -v</span><br><span class="line">$npm -v</span><br></pre></td></tr></table></figure></p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><blockquote><p>node package manager ,<br>Node 的包管理器</p></blockquote><h3 id="安装-包"><a href="#安装-包" class="headerlink" title="安装 包"></a>安装 包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装到当前目录</span><br><span class="line">$ npm install &lt;包名&gt;</span><br></pre></td></tr></table></figure><p>出现error network 重新安装</p><h3 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm search &lt;包名&gt;</span><br></pre></td></tr></table></figure><h3 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h3><p>在cmd中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install &lt;包名&gt;@版本号</span><br><span class="line">$ npm install jquery@1.12.4</span><br></pre></td></tr></table></figure><h3 id="查看包的版本信息"><a href="#查看包的版本信息" class="headerlink" title="查看包的版本信息"></a>查看包的版本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm list &lt;包名&gt;</span><br></pre></td></tr></table></figure><h3 id="查看安装的包列表"><a href="#查看安装的包列表" class="headerlink" title="查看安装的包列表"></a>查看安装的包列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm ls</span><br></pre></td></tr></table></figure><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm update &lt;包名&gt;</span><br></pre></td></tr></table></figure><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall jquery</span><br></pre></td></tr></table></figure><h3 id="init-初始化"><a href="#init-初始化" class="headerlink" title="init 初始化"></a>init 初始化</h3><p><code>npm init</code> 会生成一个packagejson的文件，项目的配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;day06&quot;, //项目名</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;, //版本号</span><br><span class="line">  &quot;description&quot;: &quot;this is a npm project&quot;, //项目的描述</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;, //程序的入口文件</span><br><span class="line">  &quot;dependencies&quot;: &#123; //项目依赖的包!!!重要的</span><br><span class="line">    &quot;jquery&quot;: &quot;^1.12.4&quot;</span><br><span class="line">    &quot;zepto&quot;: &quot;^1.2.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;&#125;, //开发阶段依赖的包!!!重要的</span><br><span class="line">  &quot;scripts&quot;: &#123; //命令</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [ //关键词</span><br><span class="line">    &quot;npm&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;guanqi&quot;, //作者</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot; //协议</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装并添加依赖"><a href="#安装并添加依赖" class="headerlink" title="安装并添加依赖"></a>安装并添加依赖</h3><p><code>$ npm install &lt;包名&gt; --save</code> 会将当前目录下的安装包，并将包的信息，<br>添加到package.json中的<strong>dependencies</strong>选项中</p><p><code>$ npm install &lt;包名&gt; --save-dev</code>安装开发阶段用的工具包，并不是项目必须有的。这个命令会将包安装到当前目录下的安装包，并将包的版本信息，<br>添加到package.json中的<strong>devDependencies</strong>选项中</p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p><code>$ npm install &lt;包&gt; -g</code> , -g代表全局安装，不会在package.json中看到</p><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p><code>$ bower install &lt;包名&gt; --save</code>,在当前目录安装包，并将版本信息添加到bower.json中</p><p><code>$ bower install &lt;包名&gt;@版本号</code>，安装指定的版本号</p><h3 id="查看包的信息"><a href="#查看包的信息" class="headerlink" title="查看包的信息"></a>查看包的信息</h3><p><code>$ bower info &lt;包名&gt;</code> 查看包的详细信息</p><h3 id="搜索包-1"><a href="#搜索包-1" class="headerlink" title="搜索包"></a>搜索包</h3><p><code>$ bower search &lt;包名&gt;</code></p><h3 id="包列表"><a href="#包列表" class="headerlink" title="包列表"></a>包列表</h3><p><code>$ bower list</code></p><h3 id="卸载包-1"><a href="#卸载包-1" class="headerlink" title="卸载包"></a>卸载包</h3><p><code>$ bower uninstall &lt;包名&gt;</code></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>心动不如行动，快练习一下巩固知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装node&quot;&gt;&lt;a href=&quot;#安装node&quot; class=&quot;headerlink&quot; title=&quot;安装node&quot;&gt;&lt;/a&gt;安装node&lt;/h3&gt;&lt;p&gt;验证是否安装node&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="node" scheme="https://gitguanqi.github.io/categories/node/"/>
    
    
      <category term="nodejs" scheme="https://gitguanqi.github.io/tags/nodejs/"/>
    
      <category term="node命令" scheme="https://gitguanqi.github.io/tags/node%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Node.js简介</title>
    <link href="https://gitguanqi.github.io/2017-12-10/node-introduction/"/>
    <id>https://gitguanqi.github.io/2017-12-10/node-introduction/</id>
    <published>2017-12-10T10:04:21.000Z</published>
    <updated>2019-01-16T02:59:57.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a><br><a href="http://nodejs.cn/" target="_blank" rel="noopener">中文官网</a></p><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. </p><p>Node.js是构建在 chorme的V8引擎上的一个js运行时</p><p>Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. </p><p>事件驱动(回调函数)<br>非阻塞异步I/O<br>单线程单进程</p><p>Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Ryan Dahl</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>高并发(双11)</li><li>站内信</li><li>实时聊天</li><li>缺点：不适合大量的计算</li></ul><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><p>在游览器中全局对象（顶层对象）是window<br>在node中全局对象叫Global</p><ul><li>Buffer</li><li>process</li><li>console</li><li>setTimeout</li><li>setInterval</li><li>clearTimeout</li><li>clearInterval<h2 id="REPL环境"><a href="#REPL环境" class="headerlink" title="REPL环境"></a>REPL环境</h2></li></ul><p>进入的方法，在cmd中输入node,然后enter，就可以进入node的REPL环境。</p><ul><li>Read 读，读取用户输入，解析输入的JS数据结构并存储在内存中</li><li>Eval 执行，执行输入的数据结构</li><li>Print 打印，输出结果</li><li>Loop 循环 ，循环操作以上步骤，直到CTRL+C以后</li><li>退出REPL环境，用Ctrl+C两次</li></ul><h2 id="运行Node-js的代码"><a href="#运行Node-js的代码" class="headerlink" title="运行Node.js的代码"></a>运行Node.js的代码</h2><p><code>$ node &lt;文件名&gt;</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>node.js是一个很不错的后端服务器编程语言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;
      
    
    </summary>
    
      <category term="node" scheme="https://gitguanqi.github.io/categories/node/"/>
    
    
      <category term="nodejs" scheme="https://gitguanqi.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>todocmvc练习(vue版)</title>
    <link href="https://gitguanqi.github.io/2017-10-23/todomvc/"/>
    <id>https://gitguanqi.github.io/2017-10-23/todomvc/</id>
    <published>2017-10-23T06:42:21.000Z</published>
    <updated>2019-01-16T03:12:34.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>安装依赖的css，js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm install</span><br></pre></td></tr></table></figure><h2 id="引入vue"><a href="#引入vue" class="headerlink" title="引入vue"></a>引入vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义初始化数据"><a href="#定义初始化数据" class="headerlink" title="定义初始化数据"></a>定义初始化数据</h2><p>在app.js中，实例化Vue，然后定义初始化数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; //为了形成块级作用域()()</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">datas: [</span><br><span class="line">   &#123;id: 121,title: &apos;html5&apos;,isCompleted: false&#125;,</span><br><span class="line">   &#123;id: 122,title: &apos;css3&apos;,isCompleted: false&#125;,</span><br><span class="line">   &#123;id: 123,title: &apos;js6&apos;,isCompleted: false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="绑定假数据到li上"><a href="#绑定假数据到li上" class="headerlink" title="绑定假数据到li上"></a>绑定假数据到li上</h2><p>如果当前的isCompleted是true,就是显示选中状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;completed: isCom&#125;"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in datas"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">value</span>=<span class="string">"Create a TodoMVC template"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">v-model</span>=<span class="string">"val"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val: <span class="string">''</span>, <span class="comment">//显式声明 输入框数据</span></span><br></pre></td></tr></table></figure><h2 id="回车输入数据"><a href="#回车输入数据" class="headerlink" title="回车输入数据"></a>回车输入数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> @<span class="attr">keyup.enter</span>=<span class="string">"addItem"</span> <span class="attr">v-model</span>=<span class="string">"val"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">addItem()&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.val)&#123; <span class="comment">//val存在或者非空的时候才会去添加</span></span><br><span class="line"><span class="keyword">this</span>.datas.push(&#123;</span><br><span class="line"><span class="comment">//console.log(new Date().getTime());</span></span><br><span class="line">id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="comment">//为了保持id的唯一</span></span><br><span class="line">title: <span class="keyword">this</span>.val,</span><br><span class="line">isCompleted: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.val = <span class="string">''</span>; <span class="comment">//填完数据以后清空输入框的内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示总计"><a href="#显示总计" class="headerlink" title="显示总计"></a>显示总计</h2><p>通过一个方法来计算数组数据的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">addItem()&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.val)&#123; <span class="comment">//val存在或者非空的时候才会去添加</span></span><br><span class="line"><span class="keyword">this</span>.datas.push(&#123;</span><br><span class="line"><span class="comment">//console.log(new Date().getTime());</span></span><br><span class="line">id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="comment">//为了保持id的唯一</span></span><br><span class="line">title: <span class="keyword">this</span>.val,</span><br><span class="line">isCompleted: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.val = <span class="string">''</span>; <span class="comment">//填完数据以后清空输入框的内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">clearCompleted()&#123;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="comment">//遍历datas,如果当前选项是未选中,就把它留下</span></span><br><span class="line"><span class="keyword">this</span>.datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!elem.isCompleted)&#123;</span><br><span class="line">arr.push(elem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="keyword">this</span>)</span><br><span class="line"><span class="keyword">this</span>.datas = arr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先绑定计算属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; legTotal &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选中后显示隐藏completed"><a href="#选中后显示隐藏completed" class="headerlink" title="选中后显示隐藏completed"></a>选中后显示隐藏completed</h2><p>通过v-show来控制显示隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> <span class="attr">v-show</span>=<span class="string">"isShowClear"</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在计算属性中</span></span><br><span class="line">compluted： &#123;</span><br><span class="line">isShowClear()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.datas.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.datas[i].isCompleted)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击clear-completed删除选中项"><a href="#点击clear-completed删除选中项" class="headerlink" title="点击clear completed删除选中项"></a>点击clear completed删除选中项</h2><p>绑定点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> <span class="attr">v-show</span>=<span class="string">"isShowClear"</span> @<span class="attr">click</span>=<span class="string">"clearCompleted"</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在方法中写这个点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clearCompleted()&#123;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="comment">//遍历datas,如果当前选项是未选中,就把它留下</span></span><br><span class="line"><span class="keyword">this</span>.datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!elem.isCompleted)&#123;</span><br><span class="line">arr.push(elem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="keyword">this</span>)</span><br><span class="line"><span class="keyword">this</span>.datas = arr;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="点击X号删除当前项"><a href="#点击X号删除当前项" class="headerlink" title="点击X号删除当前项"></a>点击X号删除当前项</h2><p>添加点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">"removeCurrent(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeCurrent(index)&#123;</span><br><span class="line"><span class="keyword">this</span>.datas.splice(index,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全选全不选"><a href="#全选全不选" class="headerlink" title="全选全不选"></a>全选全不选</h2><p>点击全选如果是true,让数据全部变成非选中状态;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toggle-all"</span> <span class="attr">class</span>=<span class="string">"toggle-all"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  @<span class="attr">click</span>=<span class="string">"checkedAll"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在方法中</span></span><br><span class="line">checkedAll()&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.isCheckedAll)&#123; <span class="comment">//全部选中</span></span><br><span class="line"><span class="keyword">this</span>.datas.forEach(<span class="function"><span class="params">elem</span>=&gt;</span>&#123;</span><br><span class="line">elem.isCompleted = <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.datas.forEach(<span class="function"><span class="params">elem</span>=&gt;</span>&#123;</span><br><span class="line">elem.isCompleted = <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.isCheckedAll = !<span class="keyword">this</span>.isCheckedAll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一个练习，是用vue写的，各方面都练习到了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;p&gt;安装依赖的css，js&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="前端案例" scheme="https://gitguanqi.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="vuejs" scheme="https://gitguanqi.github.io/tags/vuejs/"/>
    
      <category term="todomvc" scheme="https://gitguanqi.github.io/tags/todomvc/"/>
    
  </entry>
  
  <entry>
    <title>babel编译教程</title>
    <link href="https://gitguanqi.github.io/2017-09-21/babel-use/"/>
    <id>https://gitguanqi.github.io/2017-09-21/babel-use/</id>
    <published>2017-09-21T09:30:21.000Z</published>
    <updated>2019-01-16T03:09:28.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="babel安装"><a href="#babel安装" class="headerlink" title="babel安装"></a>babel安装</h3><p>安装前你需要安装<strong><em>node.js</em></strong>和<strong><em>npm</em></strong>以及<strong><em>gulp</em></strong>三个包。</p><p>然后执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>然后在安装 babel和babel-core两个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev gulp-babel babel-preset-env</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-cor --save-dev</span><br></pre></td></tr></table></figure><h3 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h3><p>新建一个名为gulpfile.js的文件夹,然后引入包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&apos;gulp&apos;);</span><br><span class="line">const babel = require(&apos;gulp-babel&apos;);</span><br><span class="line"> </span><br><span class="line">gulp.task(&apos;default&apos;, () =&gt;</span><br><span class="line">    gulp.src(&apos;es6/*.js&apos;)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            presets: [&apos;env&apos;]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))</span><br><span class="line">);</span><br><span class="line">gulp.task(&apos;babel&apos;,() =&gt; &#123;</span><br><span class="line">gulp.watch(&apos;es6/*.js&apos;,[&apos;default&apos;])</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>新建一个名为src 的文件夹,然后写点js.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h3 id="运行任务"><a href="#运行任务" class="headerlink" title="运行任务"></a>运行任务</h3><p><code>$ gulp</code></p><p><code>$ gulp babel</code></p><p>这样就大功告成了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;babel安装&quot;&gt;&lt;a href=&quot;#babel安装&quot; class=&quot;headerlink&quot; title=&quot;babel安装&quot;&gt;&lt;/a&gt;babel安装&lt;/h3&gt;&lt;p&gt;安装前你需要安装&lt;strong&gt;&lt;em&gt;node.js&lt;/em&gt;&lt;/strong&gt;和&lt;strong&gt;
      
    
    </summary>
    
      <category term="编译工具" scheme="https://gitguanqi.github.io/categories/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="es6" scheme="https://gitguanqi.github.io/tags/es6/"/>
    
      <category term="babel" scheme="https://gitguanqi.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+coding搭建个人博客</title>
    <link href="https://gitguanqi.github.io/2017-09-21/hexo-coding-config/"/>
    <id>https://gitguanqi.github.io/2017-09-21/hexo-coding-config/</id>
    <published>2017-09-21T07:16:21.000Z</published>
    <updated>2019-01-16T02:58:03.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-检测node和npm"><a href="#1-检测node和npm" class="headerlink" title="1.检测node和npm"></a>1.检测node和npm</h2><p>先检测一下有没有<strong><em>node.js</em></strong>和<strong><em>npm</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">//如果有，说明node.js安装成功！</span><br><span class="line">$ node -v</span><br><span class="line">v8.4.0</span><br><span class="line">//如果有，说明npm安装成功！</span><br><span class="line">$npm -v</span><br><span class="line">$ npm -v</span><br><span class="line">5.3.0</span><br></pre></td></tr></table></figure><h2 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2.安装hexo"></a>2.安装hexo</h2><p>在git-bash中运行以下命令安装hexo</p><h3 id="安装hexo全局"><a href="#安装hexo全局" class="headerlink" title="安装hexo全局"></a>安装hexo全局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后运行<br><code>$ npm install</code> </p><p>就能够建立起一个本地的服务器，端口是4000，打开浏览器 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就能访问属于你自己的博客了。</p><h2 id="3-切换主题"><a href="#3-切换主题" class="headerlink" title="3.切换主题"></a>3.切换主题</h2><h3 id="主题代码拷贝"><a href="#主题代码拷贝" class="headerlink" title="主题代码拷贝"></a>主题代码拷贝</h3><p>主题的拷贝也是直接使用 git 即可，首先进入到你博客的根目录，再打开 git-bash 运行</p><p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>在博客根目录下找到 _config.yml 文件，找到里面的 theme，改为</p><p>theme: next</p><p>这时再运行一次 hexo s ，看看主题有没有生效吧。</p><h2 id="4-发布到coding"><a href="#4-发布到coding" class="headerlink" title="4.发布到coding"></a>4.发布到coding</h2><p>前提是你先注册一个<a href="https://coding.net" target="_blank" rel="noopener">coding</a>账号</p><p>hexo 提供了一个部署命令 hexo deploy，首先需要安装一下 hexo-deployer-git插件</p><p><code>npm install hexo-deployer-git --save</code></p><p>然后配置一下_config.yml 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repoistory: https://git.coding.net/codinggq/problog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>预览效果</p><p>在 coding 上建立一个私人仓库，找到代码的 coding 地址，填好上面的配置，然后直接执行</p><p><code>hexo deploy</code></p><p>不出意外的话会让你填写 coding 的用户名和密码完成上传操作。如果你有配置 ssh 方式的话就更加方便了。</p><p>这个时候再到 coding 对应的项目里面打开 pages 服务，根据 coding 建议，因为不是 jekyll 项目，所以需要再新建一个.nojekyll 文件（空文件就行，其实不建立也行），等上一会就能够访问自己的博客了。</p><p>最后运行以下命令上传到coding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><blockquote><p>如果不行用git,输入以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir problog</span><br><span class="line">cd problog</span><br><span class="line">git init</span><br><span class="line">echo &quot;# problog&quot; &gt;&gt; README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://git.coding.net/codinggq/problog.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5.写在最后"></a>5.写在最后</h2><p>今天的hexo+coding配置免费博客就到这里，赶快体验一下吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-检测node和npm&quot;&gt;&lt;a href=&quot;#1-检测node和npm&quot; class=&quot;headerlink&quot; title=&quot;1.检测node和npm&quot;&gt;&lt;/a&gt;1.检测node和npm&lt;/h2&gt;&lt;p&gt;先检测一下有没有&lt;strong&gt;&lt;em&gt;node.js&lt;/e
      
    
    </summary>
    
      <category term="搭建博客" scheme="https://gitguanqi.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://gitguanqi.github.io/tags/hexo/"/>
    
      <category term="coding" scheme="https://gitguanqi.github.io/tags/coding/"/>
    
      <category term="blog" scheme="https://gitguanqi.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>SASS使用教程</title>
    <link href="https://gitguanqi.github.io/2017-09-19/sass-use/"/>
    <id>https://gitguanqi.github.io/2017-09-19/sass-use/</id>
    <published>2017-09-19T00:42:21.000Z</published>
    <updated>2019-01-16T03:08:21.356Z</updated>
    
    <content type="html"><![CDATA[<p>本篇我想大家介绍SASS的一些知识，希望对大家有所帮助。</p><h2 id="1-SASS介绍。"><a href="#1-SASS介绍。" class="headerlink" title="1.SASS介绍。"></a>1.SASS介绍。</h2><blockquote><p>SASS是世界上最成熟、最稳定、最强大的专业级CSS扩展语言！</p></blockquote><p>SASS有以下四个特点:</p><h3 id="兼容CSS"><a href="#兼容CSS" class="headerlink" title="兼容CSS"></a>兼容CSS</h3><p>Sass完全兼容所有版本的CSS。我们对此严格把控，所以你可以无缝地使用任何可用的CSS库。</p><h3 id="特性丰富"><a href="#特性丰富" class="headerlink" title="特性丰富"></a>特性丰富</h3><p>Sass拥有比其他任何CSS扩展语言更多的功能和特性。Sass核心团队不懈努力，一直使其保持领先地位</p><h3 id="成熟"><a href="#成熟" class="headerlink" title="成熟"></a>成熟</h3><p>Sass已经经过其核心团队超过8年的精心打造。</p><h3 id="行业认可"><a href="#行业认可" class="headerlink" title="行业认可"></a>行业认可</h3><p>一次又一次地，行业把Sass作为首选CSS扩展语言。</p><h3 id="社区庞大"><a href="#社区庞大" class="headerlink" title="社区庞大"></a>社区庞大</h3><p>数家科技企业和成百上千名开发者为Sass提供支持。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>有无数的框架使用Sass构建。比如Compass，Bourbon，和Susy。</p><h2 id="2-SASS安装配置。"><a href="#2-SASS安装配置。" class="headerlink" title="2.SASS安装配置。"></a>2.SASS安装配置。</h2><p>安装前，你需要安装<strong>npm</strong>和<strong>gulp</strong>这两个工具。</p><h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><p>由于sass基于ruby语言开发而成，所以安装sass前还需要安装<a href="http://rubyinstaller.org/downloads" target="_blank" rel="noopener">ruby</a>。</p><p>安装成功后，在cmd中输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br><span class="line">//如果成功则会出现</span><br><span class="line">ruby 2.4.1p111 (2017-03-22 revision 58053) [x64-mingw32]</span><br></pre></td></tr></table></figure><h3 id="接下来，更换成国内的gem源"><a href="#接下来，更换成国内的gem源" class="headerlink" title="接下来，更换成国内的gem源"></a>接下来，更换成国内的gem源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//1.删除原gem源</span><br><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">//2.添加国内淘宝源</span><br><span class="line">gem sources -a https://ruby.taobao.org/</span><br><span class="line"></span><br><span class="line">//3.打印是否替换成功</span><br><span class="line">gem sources -l</span><br><span class="line">//4.更换成功后打印如下</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line">https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><h3 id="最后，安装sass。"><a href="#最后，安装sass。" class="headerlink" title="最后，安装sass。"></a>最后，安装sass。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$npm init</span><br><span class="line">//一路直下</span><br><span class="line">$ npm install sass --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sass -v</span><br><span class="line">//出现这说明安装成功</span><br><span class="line">Sass 3.5.1 (Bleeding Edge)</span><br></pre></td></tr></table></figure><p>至此，已经安装好了sass。</p><h2 id="3-SASS语法介绍。"><a href="#3-SASS语法介绍。" class="headerlink" title="3.SASS语法介绍。"></a>3.SASS语法介绍。</h2><h3 id="基础知识。"><a href="#基础知识。" class="headerlink" title="基础知识。"></a>基础知识。</h3><ul><li><p>导入@import ‘reset’<br>所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。</p></li><li><p>注释</p></li></ul><p>/**/多行注释<br>//单行注释</p><ul><li>变量</li></ul><p>声明变量用$符号</p><p>例如：<code>$width:300px</code></p><p>默认变量加上default</p><p>例如：<code>$width:300px!default</code></p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><ul><li>选择器嵌套</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    a&#123;</span><br><span class="line">        span&#123;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            color: #ff0;</span><br><span class="line">            font-size: 5em;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    left: &#123;</span><br><span class="line">      width: 4px;</span><br><span class="line">      color: #888;</span><br><span class="line">    &#125;</span><br><span class="line">    right: &#123;</span><br><span class="line">      width: 2px;</span><br><span class="line">      color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跳出嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    a&#123;</span><br><span class="line">        @at-root span&#123;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            color: #ff0;</span><br><span class="line">            font-size: 5em;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>伪类嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    &amp;hover:&#123;</span><br><span class="line">       color: #f00;</span><br><span class="line">    &#125;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    a&#123;</span><br><span class="line">        @at-root span&#123;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            color: #ff0;</span><br><span class="line">            font-size: 5em;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一些，以后介绍。</p><h2 id="4-SASS总结。"><a href="#4-SASS总结。" class="headerlink" title="4.SASS总结。"></a>4.SASS总结。</h2><p>通过学习SASS，我感受到了SASS强大的CSS编译功能，确实方便我们每个人进行CSS编译开发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇我想大家介绍SASS的一些知识，希望对大家有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;1-SASS介绍。&quot;&gt;&lt;a href=&quot;#1-SASS介绍。&quot; class=&quot;headerlink&quot; title=&quot;1.SASS介绍。&quot;&gt;&lt;/a&gt;1.SASS介绍。&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="编译工具" scheme="https://gitguanqi.github.io/categories/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="css编译" scheme="https://gitguanqi.github.io/tags/css%E7%BC%96%E8%AF%91/"/>
    
      <category term="sass" scheme="https://gitguanqi.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>栈及其基本运算</title>
    <link href="https://gitguanqi.github.io/2017-09-19/stock-learn/"/>
    <id>https://gitguanqi.github.io/2017-09-19/stock-learn/</id>
    <published>2017-09-19T00:42:21.000Z</published>
    <updated>2019-01-16T03:11:20.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈及其基本运算"><a href="#栈及其基本运算" class="headerlink" title="栈及其基本运算"></a>栈及其基本运算</h1><h2 id="一-定义"><a href="#一-定义" class="headerlink" title="一.定义"></a>一.定义</h2><p>栈是一种特殊的线性表，所有的插入和删除都在表的同一端进行；<br>在栈中，一端是封闭端，不允许进行插入和删除元素，另一端是开口端，允许插入和删除元素。</p><p>例如：子弹匣</p><p>通常用指针<strong>top</strong>来表示栈顶的位置，用指针<strong>bottom</strong>来指向栈底。</p><p>假设s=(a1,a2,a3,…an),a1=栈底元素，an=栈顶元素。<br>先进后出，栈顶后入栈，先出栈，最晚被插入，最早被删除。</p><h2 id="二-特点"><a href="#二-特点" class="headerlink" title="二.特点"></a>二.特点</h2><ul><li>栈顶元素总是最后被插入的元素，也是最早被删除的元素。</li><li>栈顶元素总是最早被插入的元素，也是最晚被删除的元素。</li><li>栈具有记忆作用。</li><li>在顺序存储结构下，栈的插入与删除运算都不需要移动表中其他数据元素。</li><li>栈顶指针top动态反映了栈中元素的变化情况。</li></ul><blockquote><p>栈的修改原则是“先进后出”（last in first out,lifo）,或后进先出（first in frist out,filo）,栈也被称为”后进先出“表。</p></blockquote><h2 id="三-基本运算"><a href="#三-基本运算" class="headerlink" title="三.基本运算"></a>三.基本运算</h2><p>栈的基本运算是：</p><ul><li>入栈：在栈顶位置插入一个新元素。</li><li>退栈：取出栈顶元素并赋予制定变量。</li><li>读栈顶元素：将指针top指向的元素的值赋给一个指定的变量。</li></ul><p><em>栈的存储可以采用顺序方式和链式方式</em>来实现。</p><p>a.空栈 -&gt; b.插入元素A后 -&gt; c.插入元素b,c,e,f后 -&gt; d.删除元素e,f后<br>                          top    F<br>                                 E<br>                                 D            top  D<br>                                 C                 C<br>                                 B                 B<br>            top A                A                 A<br>    top</p><h2 id="四-最后"><a href="#四-最后" class="headerlink" title="四.最后"></a>四.最后</h2><p>今天只是介绍了一部分，以后再补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈及其基本运算&quot;&gt;&lt;a href=&quot;#栈及其基本运算&quot; class=&quot;headerlink&quot; title=&quot;栈及其基本运算&quot;&gt;&lt;/a&gt;栈及其基本运算&lt;/h1&gt;&lt;h2 id=&quot;一-定义&quot;&gt;&lt;a href=&quot;#一-定义&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://gitguanqi.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="栈运算" scheme="https://gitguanqi.github.io/tags/%E6%A0%88%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
</feed>
